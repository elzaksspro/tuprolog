\relax 
\@writefile{toc}{\contentsline {chapter}{\numberline {7}Multi-paradigm programming in Prolog and Java}{114}{chapter.7}}
\@writefile{lof}{\addvspace {10\p@ }}
\@writefile{lot}{\addvspace {10\p@ }}
\newlabel{ch:mpp-in-java}{{7}{114}{Multi-paradigm programming in Prolog and Java\relax }{chapter.7}{}}
\@writefile{toc}{\contentsline {section}{\numberline {7.1}Using Java from Prolog: \textit  {JavaLibrary}}{114}{section.7.1}}
\newlabel{sec:java-library}{{7.1}{114}{Using Java from Prolog: \textit {JavaLibrary}\relax }{section.7.1}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {7.1.1}Type mapping}{115}{subsection.7.1.1}}
\@writefile{lot}{\contentsline {table}{\numberline {7.1}{\ignorespaces Prolog/Java type mapping.}}{115}{table.7.1}}
\newlabel{tab:prolog-java-type-mapping}{{7.1}{115}{Prolog/Java type mapping}{table.7.1}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {7.1.2}Creating and accessing objects: an overview}{116}{subsection.7.1.2}}
\newlabel{ssec:creating-and-accessing-objects}{{7.1.2}{116}{Creating and accessing objects: an overview\relax }{subsection.7.1.2}{}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {7.1.2.1}Examples}{120}{subsubsection.7.1.2.1}}
\@writefile{lot}{\contentsline {table}{\numberline {7.2}{\ignorespaces The Java \texttt  {Counter} class and the Prolog program that exploits it via JavaLibrary.}}{121}{table.7.2}}
\newlabel{tab:javalibrary-counter-example}{{7.2}{121}{The Java \texttt {Counter} class and the Prolog program that exploits it via JavaLibrary}{table.7.2}{}}
\@writefile{lot}{\contentsline {table}{\numberline {7.3}{\ignorespaces Creating and using a Swing component from a \unhbox \voidb@x \hbox {{\sf  {tu}}Prolog}{} program.}}{122}{table.7.3}}
\newlabel{tab:jexamples-swing}{{7.3}{122}{Creating and using a Swing component from a \tuprolog {} program}{table.7.3}{}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {7.1.2.2}Registering object bindings}{122}{subsubsection.7.1.2.2}}
\newlabel{sssec:register(prolog)}{{7.1.2.2}{122}{Registering object bindings\relax }{subsubsection.7.1.2.2}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {7.1.3}Predicates}{123}{subsection.7.1.3}}
\newlabel{ssec:all-javalibrary-predicates}{{7.1.3}{123}{Predicates\relax }{subsection.7.1.3}{}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {7.1.3.1}Object creation, class compilation and method invocation}{123}{subsubsection.7.1.3.1}}
\@writefile{lot}{\contentsline {table}{\numberline {7.4}{\ignorespaces Summary of \texttt  {JavaLibrary} predicates.}}{124}{table.7.4}}
\newlabel{tab:summary-of-javalibrary-predicates}{{7.4}{124}{Summary of \texttt {JavaLibrary} predicates}{table.7.4}{}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {7.1.3.2}Array management}{126}{subsubsection.7.1.3.2}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {7.1.3.3}Helper predicates}{128}{subsubsection.7.1.3.3}}
\@writefile{toc}{\contentsline {subsection}{\numberline {7.1.4}Functors}{128}{subsection.7.1.4}}
\@writefile{toc}{\contentsline {subsection}{\numberline {7.1.5}Operators}{128}{subsection.7.1.5}}
\@writefile{lot}{\contentsline {table}{\numberline {7.5}{\ignorespaces JavaLibrary operators.}}{128}{table.7.5}}
\newlabel{tab:javalibrary-operators}{{7.5}{128}{JavaLibrary operators}{table.7.5}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {7.1.6}Examples}{129}{subsection.7.1.6}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {7.1.6.1}RMI Connection to a Remote Object}{129}{subsubsection.7.1.6.1}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {7.1.6.2}A Swing GUI}{129}{subsubsection.7.1.6.2}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {7.1.6.3}Database access via JDBC}{129}{subsubsection.7.1.6.3}}
\@writefile{lot}{\contentsline {table}{\numberline {7.6}{\ignorespaces The RMI example in Java and in \unhbox \voidb@x \hbox {{\sf  {tu}}Prolog}{} via JavaLibrary.}}{130}{table.7.6}}
\newlabel{tab:rmi-example}{{7.6}{130}{The RMI example in Java and in \tuprolog {} via JavaLibrary}{table.7.6}{}}
\@writefile{lot}{\contentsline {table}{\numberline {7.7}{\ignorespaces Calculation of the minimum path between two given cities: the required data are fetched from a database via JDBC as shown in Table \ref  {tab:jdbc-example-part2}.}}{131}{table.7.7}}
\newlabel{tab:jdbc-example-part1}{{7.7}{131}{Calculation of the minimum path between two given cities: the required data are fetched from a database via JDBC as shown in Table \ref {tab:jdbc-example-part2}}{table.7.7}{}}
\@writefile{lot}{\contentsline {table}{\numberline {7.8}{\ignorespaces Accessing JDBC via \unhbox \voidb@x \hbox {{\sf  {tu}}Prolog}{}'s JavaLibrary.}}{132}{table.7.8}}
\newlabel{tab:jdbc-example-part2}{{7.8}{132}{Accessing JDBC via \tuprolog {}'s JavaLibrary}{table.7.8}{}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {7.1.6.4}Dynamic compilation}{132}{subsubsection.7.1.6.4}}
\@writefile{lot}{\contentsline {table}{\numberline {7.9}{\ignorespaces Dynamic compilation of a Java source code.}}{133}{table.7.9}}
\newlabel{tab:dynamic-compilation}{{7.9}{133}{Dynamic compilation of a Java source code}{table.7.9}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {7.1.7}Handling Java Exceptions}{133}{subsection.7.1.7}}
\newlabel{ssec:java-exceptions-in-tuprolog}{{7.1.7}{133}{Handling Java Exceptions\relax }{subsection.7.1.7}{}}
\@writefile{lot}{\contentsline {table}{\numberline {7.10}{\ignorespaces Another example of dynamic compilation, where the class source is retrieved via FTP: the user \texttt  {myName}, whose password is \texttt  {myPwd}, gets the content of the \texttt  {Counter.java} file from the server whose IP address is \texttt  {srvAddr}, dynamically compiles the class and creates a corresponding object. The FTP service is provided here by a shareware Java library, but any other similar library would work.}}{134}{table.7.10}}
\newlabel{tab:dynamic-compilation-via-FTP}{{7.10}{134}{Another example of dynamic compilation, where the class source is retrieved via FTP: the user \texttt {myName}, whose password is \texttt {myPwd}, gets the content of the \texttt {Counter.java} file from the server whose IP address is \texttt {srvAddr}, dynamically compiles the class and creates a corresponding object. The FTP service is provided here by a shareware Java library, but any other similar library would work}{table.7.10}{}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {7.1.7.1}Java exception examples}{135}{subsubsection.7.1.7.1}}
\newlabel{ssec:java-exception-examples}{{7.1.7.1}{135}{Java exception examples\relax }{subsubsection.7.1.7.1}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {7.1}{\ignorespaces Catching the Java exceptions of Example 1 in the \unhbox \voidb@x \hbox {{\sf  {tu}}Prolog}{} GUI. \textit  {Top:} the solutions tab. \textit  {Bottom:} details of the exception in the exception tab (see the \texttt  {Cause} variable bound to \texttt  {0} and the \texttt  {Msg} variable bound to \texttt  {'Counter'}; the other details map onto the anonymous variable \texttt  {\_}). }}{137}{figure.7.1}}
\newlabel{fig:exceptions1}{{7.1}{137}{Catching the Java exceptions of Example 1 in the \tuprolog {} GUI. \textit {Top:} the solutions tab. \textit {Bottom:} details of the exception in the exception tab (see the \texttt {Cause} variable bound to \texttt {0} and the \texttt {Msg} variable bound to \texttt {'Counter'}; the other details map onto the anonymous variable \texttt {\_})}{figure.7.1}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {7.2}{\ignorespaces A failed exception in the \unhbox \voidb@x \hbox {{\sf  {tu}}Prolog}{} GUI: the \texttt  {No} answer in the status bar and the \textit  {halt} message in the Solutions tab.}}{138}{figure.7.2}}
\newlabel{fig:exceptions2}{{7.2}{138}{A failed exception in the \tuprolog {} GUI: the \texttt {No} answer in the status bar and the \textit {halt} message in the Solutions tab}{figure.7.2}{}}
\@writefile{toc}{\contentsline {section}{\numberline {7.2}Using Prolog from Java: \textit  {the Java API}}{139}{section.7.2}}
\newlabel{sec:java-api}{{7.2}{139}{Using Prolog from Java: \textit {the Java API}\relax }{section.7.2}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {7.2.1}A Taxonomy of Prolog types in Java}{139}{subsection.7.2.1}}
\newlabel{ssec:java-api-types}{{7.2.1}{139}{A Taxonomy of Prolog types in Java\relax }{subsection.7.2.1}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {7.3}{\ignorespaces Prolog entities as a taxonomy of Java classes.}}{139}{figure.7.3}}
\newlabel{fig:term-taxonomy}{{7.3}{139}{Prolog entities as a taxonomy of Java classes}{figure.7.3}{}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {7.2.1.1}Further notes about \texttt  {Term}s}{140}{subsubsection.7.2.1.1}}
\@writefile{lot}{\contentsline {table}{\numberline {7.11}{\ignorespaces Manipulating Prolog entities from Java.}}{141}{table.7.11}}
\newlabel{tab:creating-prolog-terms-in-java}{{7.11}{141}{Manipulating Prolog entities from Java}{table.7.11}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {7.2.2}Prolog engines, theories and libraries}{142}{subsection.7.2.2}}
\newlabel{ssec:java-api-engine-solveinfo}{{7.2.2}{142}{Prolog engines, theories and libraries\relax }{subsection.7.2.2}{}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {7.2.2.1}Further notes about \texttt  {Prolog} engines}{142}{subsubsection.7.2.2.1}}
\@writefile{lot}{\contentsline {table}{\numberline {7.12}{\ignorespaces Classes for interacting with \unhbox \voidb@x \hbox {{\sf  {tu}}Prolog}{} engines.}}{143}{table.7.12}}
\newlabel{tab:engine-interface}{{7.12}{143}{Classes for interacting with \tuprolog {} engines}{table.7.12}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {7.2.3}Examples}{144}{subsection.7.2.3}}
\newlabel{ssec:java-api-examples}{{7.2.3}{144}{Examples\relax }{subsection.7.2.3}{}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {7.2.3.1}Appending lists}{144}{subsubsection.7.2.3.1}}
\@writefile{lot}{\contentsline {table}{\numberline {7.13}{\ignorespaces The list appending example.}}{145}{table.7.13}}
\newlabel{tab:java-api-example1}{{7.13}{145}{The list appending example}{table.7.13}{}}
\@writefile{lot}{\contentsline {table}{\numberline {7.14}{\ignorespaces Building a theory ``by hand'' from a clause list.}}{146}{table.7.14}}
\newlabel{tab:java-api-example-clauselist}{{7.14}{146}{Building a theory ``by hand'' from a clause list}{table.7.14}{}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {7.2.3.2}Exploiting a theory from clause list}{147}{subsubsection.7.2.3.2}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {7.2.3.3}A console-based Prolog interpreter}{147}{subsubsection.7.2.3.3}}
\@writefile{toc}{\contentsline {subsection}{\numberline {7.2.4}Registering object bindings}{147}{subsection.7.2.4}}
\newlabel{ssec:register(Java)}{{7.2.4}{147}{Registering object bindings\relax }{subsection.7.2.4}{}}
\@writefile{lot}{\contentsline {table}{\numberline {7.15}{\ignorespaces A simple console-based Prolog interpreter.}}{148}{table.7.15}}
\newlabel{tab:console-sample}{{7.15}{148}{A simple console-based Prolog interpreter}{table.7.15}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {7.4}{\ignorespaces A sample session with the Console-based Interpreter.}}{149}{figure.7.4}}
\newlabel{fig:console-interpreter}{{7.4}{149}{A sample session with the Console-based Interpreter}{figure.7.4}{}}
\@writefile{lot}{\contentsline {table}{\numberline {7.16}{\ignorespaces A program registering \texttt  {stdout} for \texttt  {System.out}. As an alternative to \texttt  {getLibrary}, \texttt  {loadLibrary} could have been used---if the library is already loaded, its behavior is identical to \texttt  {getLibrary}'s. Also, the fully qualified class name \texttt  {"alice.tuprolog.lib.JavaLibrary"} is needed in \texttt  {getLibrary} only because \texttt  {JavaLibrary} does \textit  {not} define a short library name (see Section \ref  {ssec:library-name} for details): otherwise, the shorter name could have been used.}}{150}{table.7.16}}
\newlabel{tab:registering-stdout-example}{{7.16}{150}{A program registering \texttt {stdout} for \texttt {System.out}. As an alternative to \texttt {getLibrary}, \texttt {loadLibrary} could have been used---if the library is already loaded, its behavior is identical to \texttt {getLibrary}'s. Also, the fully qualified class name \texttt {"alice.tuprolog.lib.JavaLibrary"} is needed in \texttt {getLibrary} only because \texttt {JavaLibrary} does \textit {not} define a short library name (see Section \ref {ssec:library-name} for details): otherwise, the shorter name could have been used}{table.7.16}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {7.2.5}Capturing the Prolog output in Java}{150}{subsection.7.2.5}}
\newlabel{ssec:capturing-output}{{7.2.5}{150}{Capturing the Prolog output in Java\relax }{subsection.7.2.5}{}}
\@writefile{toc}{\contentsline {section}{\numberline {7.3}Augmenting Prolog via Java:\\developing new libraries}{151}{section.7.3}}
\newlabel{sec:howto-develop-libraries}{{7.3}{151}{Augmenting Prolog via Java:\\developing new libraries\relax }{section.7.3}{}}
\@writefile{lot}{\contentsline {table}{\numberline {7.17}{\ignorespaces Capturing the Prolog output from Java: a complete example.}}{152}{table.7.17}}
\newlabel{tab:capturing-output-complete}{{7.17}{152}{Capturing the Prolog output from Java: a complete example}{table.7.17}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {7.3.1}Syntactic conventions}{152}{subsection.7.3.1}}
\newlabel{ssec:library-syntax}{{7.3.1}{152}{Syntactic conventions\relax }{subsection.7.3.1}{}}
\@writefile{lot}{\contentsline {table}{\numberline {7.18}{\ignorespaces Definition of a \unhbox \voidb@x \hbox {{\sf  {tu}}Prolog}{} library in Java.}}{154}{table.7.18}}
\newlabel{tab:TestLibrary}{{7.18}{154}{Definition of a \tuprolog {} library in Java}{table.7.18}{}}
\@writefile{lot}{\contentsline {table}{\numberline {7.19}{\ignorespaces A test program for the library defined in Table \ref  {tab:TestLibrary} \textit  {(top)} and the corresponding output \textit  {(bottom)}.}}{155}{table.7.19}}
\newlabel{tab:TestLibrary-Main}{{7.19}{155}{A test program for the library defined in Table \ref {tab:TestLibrary} \textit {(top)} and the corresponding output \textit {(bottom)}}{table.7.19}{}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {7.3.1.1}Capturing exceptions raised in libraries}{156}{subsubsection.7.3.1.1}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {7.3.1.2}Capturing the Java output in Prolog}{156}{subsubsection.7.3.1.2}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {7.3.1.3}Naming issues}{156}{subsubsection.7.3.1.3}}
\@writefile{lof}{\contentsline {figure}{\numberline {7.5}{\ignorespaces Loading a library from the Prolog side in the GUI \textit  {(top)} and its output (\textit  {bottom}). Be sure to read the loading issues in Section \ref  {ssec:library-loading-issues}, or the example will not work.}}{157}{figure.7.5}}
\newlabel{fig:testlibrary3}{{7.5}{157}{Loading a library from the Prolog side in the GUI \textit {(top)} and its output (\textit {bottom}). Be sure to read the loading issues in Section \ref {ssec:library-loading-issues}, or the example will not work}{figure.7.5}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {7.6}{\ignorespaces Loading a library from the Prolog side via the Library Manager icon in the \unhbox \voidb@x \hbox {{\sf  {tu}}Prolog}{} GUI. The loading issues in Section \ref  {ssec:library-loading-issues} still apply. Please note that the browse/save buttons in the dialog are \textit  {not} to be used to load/save libraries, but only to load/save \textit  {\unhbox \voidb@x \hbox {{\sf  {tu}}Prolog}{} preferences} in the form of \texttt  {.2p} files.}}{158}{figure.7.6}}
\newlabel{fig:testlibrary1}{{7.6}{158}{Loading a library from the Prolog side via the Library Manager icon in the \tuprolog {} GUI. The loading issues in Section \ref {ssec:library-loading-issues} still apply. Please note that the browse/save buttons in the dialog are \textit {not} to be used to load/save libraries, but only to load/save \textit {\tuprolog {} preferences} in the form of \texttt {.2p} files}{figure.7.6}{}}
\@writefile{lot}{\contentsline {table}{\numberline {7.20}{\ignorespaces A hybrid (mixed) Java + Prolog library \textit  {(top)} and the corresponding test program \textit  {(bottom)}. }}{159}{table.7.20}}
\newlabel{tab:HybridLibrary}{{7.20}{159}{A hybrid (mixed) Java + Prolog library \textit {(top)} and the corresponding test program \textit {(bottom)}}{table.7.20}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {7.7}{\ignorespaces Loading a library from the Prolog side on the CUIConsole: the output here is in the same terminal, as expected. Again, be sure to read the loading issues in Section \ref  {ssec:library-loading-issues}, or the example will not work.}}{160}{figure.7.7}}
\newlabel{fig:testlibrary5}{{7.7}{160}{Loading a library from the Prolog side on the CUIConsole: the output here is in the same terminal, as expected. Again, be sure to read the loading issues in Section \ref {ssec:library-loading-issues}, or the example will not work}{figure.7.7}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {7.3.2}Hybrid Java+Prolog libraries}{160}{subsection.7.3.2}}
\newlabel{ssec:hybrid-libraries}{{7.3.2}{160}{Hybrid Java+Prolog libraries\relax }{subsection.7.3.2}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {7.3.3}Library loading issues}{160}{subsection.7.3.3}}
\newlabel{ssec:library-loading-issues}{{7.3.3}{160}{Library loading issues\relax }{subsection.7.3.3}{}}
\citation{short-patj-sac08}
\@writefile{lot}{\contentsline {table}{\numberline {7.21}{\ignorespaces Defining a new library with the same name as another.}}{162}{table.7.21}}
\newlabel{tab:StringLibrary-NewStringLibrary}{{7.21}{162}{Defining a new library with the same name as another}{table.7.21}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {7.3.4}Library Name}{162}{subsection.7.3.4}}
\newlabel{ssec:library-name}{{7.3.4}{162}{Library Name\relax }{subsection.7.3.4}{}}
\@writefile{toc}{\contentsline {section}{\numberline {7.4}Augmenting Java via Prolog:\\the P@J framework}{163}{section.7.4}}
\newlabel{sec:p@j}{{7.4}{163}{Augmenting Java via Prolog:\\the P@J framework\relax }{section.7.4}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {7.4.1}Term taxonomy}{163}{subsection.7.4.1}}
\newlabel{ssec:p@j-term-taxonomy}{{7.4.1}{163}{Term taxonomy\relax }{subsection.7.4.1}{}}
\newlabel{ssec:java-api-types}{{7.4.1}{164}{Term taxonomy\relax }{subsection.7.4.1}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {7.4.2}Examples}{165}{subsection.7.4.2}}
\newlabel{ssec:p@j-examples}{{7.4.2}{165}{Examples\relax }{subsection.7.4.2}{}}
\newlabel{tab:pj-example2}{{7.4.2}{166}{Examples\relax }{table.7.24}{}}
\@writefile{lot}{\contentsline {table}{\numberline {7.22}{\ignorespaces A Java class exploiting Prolog for implementing an abstract method \textit  {(top)} and a client using it \textit  {(bottom)}. Note that the \texttt  {Arrays.asList} method exploits the Java shortcut syntax for varargs. To run the example, the \texttt  {javassist.jar} library, used by the P@J runtime, must be in the class path: \texttt  {E:>java\nobreakspace  {}\nobreakspace  {}-cp .;2p.jar;javassist.jar PJexample} }}{167}{table.7.22}}
\newlabel{tab:pj-example1}{{7.22}{167}{A Java class exploiting Prolog for implementing an abstract method \textit {(top)} and a client using it \textit {(bottom)}. Note that the \texttt {Arrays.asList} method exploits the Java shortcut syntax for varargs. To run the example, the \texttt {javassist.jar} library, used by the P@J runtime, must be in the class path: \texttt {E:>java~~-cp .;2p.jar;javassist.jar PJexample}\relax }{table.7.22}{}}
\@writefile{lot}{\contentsline {table}{\numberline {7.23}{\ignorespaces Another Java class exploiting Prolog for method implementation. The \texttt  {length/2} predicate used in the \texttt  {clauses} section on top is part of the standard ISO list management predicates.}}{168}{table.7.23}}
\newlabel{tab:pj-example2}{{7.23}{168}{Another Java class exploiting Prolog for method implementation. The \texttt {length/2} predicate used in the \texttt {clauses} section on top is part of the standard ISO list management predicates}{table.7.23}{}}
\@writefile{lot}{\contentsline {table}{\numberline {7.24}{\ignorespaces Another Java class exploiting Prolog for method implementation.}}{169}{table.7.24}}
\newlabel{tab:pj-example3}{{7.24}{169}{Another Java class exploiting Prolog for method implementation}{table.7.24}{}}
\@writefile{lot}{\contentsline {table}{\numberline {7.25}{\ignorespaces A parser for arithmetic expressions encoded in Prolog inside an annotated Java program. The output prints \texttt  {true}, \texttt  {false}, \texttt  {true}, \texttt  {true} in this order, since 12+(3*4) is an expression but not a factor, while (12+(3*4)) is both an expression and a factor.}}{170}{table.7.25}}
\newlabel{tab:pj-example4}{{7.25}{170}{A parser for arithmetic expressions encoded in Prolog inside an annotated Java program. The output prints \texttt {true}, \texttt {false}, \texttt {true}, \texttt {true} in this order, since 12+(3*4) is an expression but not a factor, while (12+(3*4)) is both an expression and a factor}{table.7.25}{}}
\@setckpt{mpp-in-java}{
\setcounter{page}{171}
\setcounter{equation}{0}
\setcounter{enumi}{2}
\setcounter{enumii}{0}
\setcounter{enumiii}{0}
\setcounter{enumiv}{0}
\setcounter{footnote}{10}
\setcounter{mpfootnote}{0}
\setcounter{part}{0}
\setcounter{chapter}{7}
\setcounter{section}{4}
\setcounter{subsection}{2}
\setcounter{subsubsection}{0}
\setcounter{paragraph}{0}
\setcounter{subparagraph}{0}
\setcounter{figure}{7}
\setcounter{table}{25}
\setcounter{Item}{26}
\setcounter{Hfootnote}{21}
\setcounter{bookmark@seq@number}{117}
\setcounter{FancyVerbLine}{18}
\setcounter{section@level}{2}
}
