\relax 
\citation{ikvm}
\@writefile{toc}{\contentsline {chapter}{\numberline {8}Multi-paradigm programming in Prolog and .NET}{167}{chapter.8}}
\@writefile{lof}{\addvspace {10\p@ }}
\@writefile{lot}{\addvspace {10\p@ }}
\newlabel{ch:mpp-in-dotnet}{{8}{167}{Multi-paradigm programming in Prolog and .NET\relax }{chapter.8}{}}
\@writefile{toc}{\contentsline {section}{\numberline {8.1}A bit of history}{167}{section.8.1}}
\newlabel{sec:dotnet-tuprolog-history}{{8.1}{167}{A bit of history\relax }{section.8.1}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {8.1.1}\unhbox \voidb@x \hbox {{\sf  {tu}}Prolog}{} 2.1 and CSharpLibrary}{167}{subsection.8.1.1}}
\newlabel{ssec:dotnet-tuprolog2.1}{{8.1.1}{167}{\tuprolog {} 2.1 and CSharpLibrary\relax }{subsection.8.1.1}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {8.1.2}\unhbox \voidb@x \hbox {{\sf  {tu}}Prolog}{} 2.1.3: CSharpLibrary + exceptions}{168}{subsection.8.1.2}}
\newlabel{ssec:dotnet-tuprolog2.1.3}{{8.1.2}{168}{\tuprolog {} 2.1.3: CSharpLibrary + exceptions\relax }{subsection.8.1.2}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {8.1.3}\unhbox \voidb@x \hbox {{\sf  {tu}}Prolog}{} 2.2 and CLILibrary}{168}{subsection.8.1.3}}
\newlabel{ssec:dotnet-tuprolog2.2}{{8.1.3}{168}{\tuprolog {} 2.2 and CLILibrary\relax }{subsection.8.1.3}{}}
\citation{ikvm}
\@writefile{toc}{\contentsline {section}{\numberline {8.2}IKVM Basics}{170}{section.8.2}}
\newlabel{sec:dotnet-ikvm}{{8.2}{170}{IKVM Basics\relax }{section.8.2}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {8.2.1}Dynamic vs. Static modality}{170}{subsection.8.2.1}}
\newlabel{ssec:ikvm-dynamic-static}{{8.2.1}{170}{Dynamic vs. Static modality\relax }{subsection.8.2.1}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {8.2.2}Class loading issues}{171}{subsection.8.2.2}}
\newlabel{ssec:ikvm-class-loading}{{8.2.2}{171}{Class loading issues\relax }{subsection.8.2.2}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {8.2.3}The other way: writing .NET applications in Java}{172}{subsection.8.2.3}}
\newlabel{ssec:ikvm-writing-app-in-java}{{8.2.3}{172}{The other way: writing .NET applications in Java\relax }{subsection.8.2.3}{}}
\citation{ikvm}
\@writefile{toc}{\contentsline {section}{\numberline {8.3}\unhbox \voidb@x \hbox {{\sf  {tu}}Prolog}.NET now}{174}{section.8.3}}
\newlabel{sec:dotnet-tuprolog-now}{{8.3}{174}{\tuprolog .NET now\relax }{section.8.3}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {8.3.1}Highlights}{174}{subsection.8.3.1}}
\newlabel{ssec:dotnet-highligths}{{8.3.1}{174}{Highlights\relax }{subsection.8.3.1}{}}
\@writefile{lot}{\contentsline {table}{\numberline {8.1}{\ignorespaces Performance comparison between Java and C\# code executed directly or via \unhbox \voidb@x \hbox {{\sf  {tu}}Prolog}{}.NET (times in milliseconds).}}{175}{table.8.1}}
\newlabel{tab:dotnet-benchmarks}{{8.1}{175}{Performance comparison between Java and C\# code executed directly or via \tuprolog {}.NET (times in milliseconds)}{table.8.1}{}}
\@writefile{toc}{\contentsline {section}{\numberline {8.4}Using .NET from Prolog: OOLibrary}{176}{section.8.4}}
\newlabel{sec:dotnet-oolibrary}{{8.4}{176}{Using .NET from Prolog: OOLibrary\relax }{section.8.4}{}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {8.4.0.1}Motivation}{176}{subsubsection.8.4.0.1}}
\@writefile{lot}{\contentsline {table}{\numberline {8.2}{\ignorespaces The public interface of the root \texttt  {Convention} class. Any actual convention for a given language must specialize from this class according to the language details.}}{177}{table.8.2}}
\newlabel{tab:dotnet-convention-interface}{{8.2}{177}{The public interface of the root \texttt {Convention} class. Any actual convention for a given language must specialize from this class according to the language details}{table.8.2}{}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {8.4.0.2}Language Conventions}{177}{subsubsection.8.4.0.2}}
\@writefile{toc}{\contentsline {subsubsection}{\numberline {8.4.0.3}OOLibrary: predicates}{178}{subsubsection.8.4.0.3}}
\@writefile{lot}{\contentsline {table}{\numberline {8.3}{\ignorespaces The public interface of the \texttt  {OOLibrary} class. In addition, the \texttt  {$<-$/2}, (\texttt  {$<-$},\texttt  {returns})\texttt  {/3} and \texttt  {.} operators are defined for method calling and field/property access with the \texttt  {get}/\texttt  {set} pseudo-methods, exactly as in JavaLibrary.}}{179}{table.8.3}}
\newlabel{tab:dotnet-oolibrary-interface}{{8.3}{179}{The public interface of the \texttt {OOLibrary} class. In addition, the \texttt {$<-$/2}, (\texttt {$<-$},\texttt {returns})\texttt {/3} and \texttt {.} operators are defined for method calling and field/property access with the \texttt {get}/\texttt {set} pseudo-methods, exactly as in JavaLibrary}{table.8.3}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {8.4.1}Examples}{179}{subsection.8.4.1}}
\newlabel{sec:dotnet-oolibrary-examples}{{8.4.1}{179}{Examples\relax }{subsection.8.4.1}{}}
\@writefile{lot}{\contentsline {table}{\numberline {8.4}{\ignorespaces Using the \texttt  {Student} class in Visual Basic and Java without / with conventions.}}{180}{table.8.4}}
\newlabel{tab:dotnet-oolibrary-examples1}{{8.4}{180}{Using the \texttt {Student} class in Visual Basic and Java without / with conventions}{table.8.4}{}}
\@writefile{lot}{\contentsline {table}{\numberline {8.5}{\ignorespaces Using the Java \texttt  {StringTokenizer} straight from \unhbox \voidb@x \hbox {{\sf  {tu}}Prolog}{}.NET \textit  {(top)} and dynamically compile a Java source, convert it to \texttt  {dll}, and use it directly to instantiate an object and exploit it \textit  {(bottom)}. See also Figure \ref  {fig:dotnet-tokenizer-and-dynamic-compilation}.}}{181}{table.8.5}}
\newlabel{tab:dotnet-oolibrary-examples2}{{8.5}{181}{Using the Java \texttt {StringTokenizer} straight from \tuprolog {}.NET \textit {(top)} and dynamically compile a Java source, convert it to \texttt {dll}, and use it directly to instantiate an object and exploit it \textit {(bottom)}. See also Figure \ref {fig:dotnet-tokenizer-and-dynamic-compilation}}{table.8.5}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {8.1}{\ignorespaces \unhbox \voidb@x \hbox {{\sf  {tu}}Prolog}{}.NET executing the example in Table \ref  {tab:dotnet-oolibrary-examples2}. Of course, the execution time of the second example is sensible, since \texttt  {ikvm} is triggered behind the scenes to compile the class source.}}{182}{figure.8.1}}
\newlabel{fig:dotnet-tokenizer-and-dynamic-compilation}{{8.1}{182}{\tuprolog {}.NET executing the example in Table \ref {tab:dotnet-oolibrary-examples2}. Of course, the execution time of the second example is sensible, since \texttt {ikvm} is triggered behind the scenes to compile the class source}{figure.8.1}{}}
\@writefile{lot}{\contentsline {table}{\numberline {8.6}{\ignorespaces Using four \texttt  {Student} classes written in four languages.}}{183}{table.8.6}}
\newlabel{tab:dotnet-oolibrary-examples3}{{8.6}{183}{Using four \texttt {Student} classes written in four languages}{table.8.6}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {8.4.2}Handling .NET Exceptions}{183}{subsection.8.4.2}}
\newlabel{ssec:dotnet-oolibrary-exceptions}{{8.4.2}{183}{Handling .NET Exceptions\relax }{subsection.8.4.2}{}}
\@writefile{toc}{\contentsline {section}{\numberline {8.5}Using Prolog from .NET: the API}{184}{section.8.5}}
\newlabel{sec:dotnet-oo-api}{{8.5}{184}{Using Prolog from .NET: the API\relax }{section.8.5}{}}
\@writefile{toc}{\contentsline {section}{\numberline {8.6}Augmenting Prolog via .NET:\\developing new libraries}{184}{section.8.6}}
\newlabel{sec:dotnet-developing new libraries}{{8.6}{184}{Augmenting Prolog via .NET:\\developing new libraries\relax }{section.8.6}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {8.2}{\ignorespaces Creating a .NET application using \unhbox \voidb@x \hbox {{\sf  {tu}}Prolog}{} in Visual Studio: new project.}}{185}{figure.8.2}}
\newlabel{fig:dotnet-visualstudio1}{{8.2}{185}{Creating a .NET application using \tuprolog {} in Visual Studio: new project}{figure.8.2}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {8.3}{\ignorespaces Creating a .NET application using \unhbox \voidb@x \hbox {{\sf  {tu}}Prolog}{} in Visual Studio: the user GUI}}{186}{figure.8.3}}
\newlabel{fig:dotnet-visualstudio3}{{8.3}{186}{Creating a .NET application using \tuprolog {} in Visual Studio: the user GUI\relax }{figure.8.3}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {8.4}{\ignorespaces Creating a .NET application using \unhbox \voidb@x \hbox {{\sf  {tu}}Prolog}{} in Visual Studio: the .NET handler of the \textit  {OK} button.}}{187}{figure.8.4}}
\newlabel{fig:dotnet-visualstudio4}{{8.4}{187}{Creating a .NET application using \tuprolog {} in Visual Studio: the .NET handler of the \textit {OK} button}{figure.8.4}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {8.6.1}Capturing exceptions raised in .NET libraries}{188}{subsection.8.6.1}}
\@writefile{toc}{\contentsline {subsection}{\numberline {8.6.2}Capturing the .NET output in Prolog}{188}{subsection.8.6.2}}
\@writefile{lof}{\contentsline {figure}{\numberline {8.5}{\ignorespaces Loading the translated TestLibrary in the \unhbox \voidb@x \hbox {{\sf  {tu}}Prolog}{}.NET GUI either via the \texttt  {load\_library} predicate \textit  {(top)} or via the library manager \textit  {(bottom)}. (Compare with Figures \ref  {fig:testlibrary3} and \ref  {fig:testlibrary5} on page \pageref  {fig:testlibrary5}.)}}{189}{figure.8.5}}
\newlabel{fig:dotnet-testlibrary}{{8.5}{189}{Loading the translated TestLibrary in the \tuprolog {}.NET GUI either via the \texttt {load\_library} predicate \textit {(top)} or via the library manager \textit {(bottom)}. (Compare with Figures \ref {fig:testlibrary3} and \ref {fig:testlibrary5} on page \pageref {fig:testlibrary5}.)\relax }{figure.8.5}{}}
\@writefile{toc}{\contentsline {section}{\numberline {8.7}Augmenting .NET via Prolog:\\the P@J framework revised}{190}{section.8.7}}
\newlabel{sec:dotnet-pj}{{8.7}{190}{Augmenting .NET via Prolog:\\the P@J framework revised\relax }{section.8.7}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {8.7.1}P@.NET via code generators}{191}{subsection.8.7.1}}
\newlabel{ssec:dotnet-code-generators}{{8.7.1}{191}{P@.NET via code generators\relax }{subsection.8.7.1}{}}
\@writefile{toc}{\contentsline {section}{\numberline {8.8}Putting everything together}{192}{section.8.8}}
\newlabel{sec:dotnet-putting-together}{{8.8}{192}{Putting everything together\relax }{section.8.8}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {8.6}{\ignorespaces Top: generation of a C\# class from the Prolog source (\texttt  {Perm.pl}) shown on the left (default, static mode); the new class is named \texttt  {Perm.cs}. Bottom: same example in the dynamic mode. The Prolog file on the left is now just a pure placeholder containing a reference to the actual Prolog source. The generated class now loads the specified external file instead of embedding the Prolog code as a string. }}{193}{figure.8.6}}
\newlabel{fig:dotnet-codegen1and2}{{8.6}{193}{Top: generation of a C\# class from the Prolog source (\texttt {Perm.pl}) shown on the left (default, static mode); the new class is named \texttt {Perm.cs}. Bottom: same example in the dynamic mode. The Prolog file on the left is now just a pure placeholder containing a reference to the actual Prolog source. The generated class now loads the specified external file instead of embedding the Prolog code as a string}{figure.8.6}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {8.7}{\ignorespaces Using \unhbox \voidb@x \hbox {{\sf  {tu}}Prolog}{}.NET to bridge between classes using heterogeneous data types.}}{194}{figure.8.7}}
\newlabel{fig:dotnet-pipolo1}{{8.7}{194}{Using \tuprolog {}.NET to bridge between classes using heterogeneous data types}{figure.8.7}{}}
\@writefile{toc}{\contentsline {subsection}{\numberline {8.8.1}Example: Multi-language TicTacToe}{195}{subsection.8.8.1}}
\newlabel{ssec:mpp-tictactoe}{{8.8.1}{195}{Example: Multi-language TicTacToe\relax }{subsection.8.8.1}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {8.8}{\ignorespaces The \texttt  {Main} class in C\#: in this case, the C\# version of the \texttt  {TicTacToe} class is loaded (last line), but this argument could easily be taken from the command line. Note the loading of \texttt  {OOLibrary} and the capturing of Prolog code with the same technique presented in Section \ref  {ssec:capturing-output}.}}{196}{figure.8.8}}
\newlabel{fig:dotnet-pipolo5}{{8.8}{196}{The \texttt {Main} class in C\#: in this case, the C\# version of the \texttt {TicTacToe} class is loaded (last line), but this argument could easily be taken from the command line. Note the loading of \texttt {OOLibrary} and the capturing of Prolog code with the same technique presented in Section \ref {ssec:capturing-output}}{figure.8.8}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {8.9}{\ignorespaces The \texttt  {TicTacToe} class: public interface.}}{197}{figure.8.9}}
\newlabel{fig:dotnet-pipolo2}{{8.9}{197}{The \texttt {TicTacToe} class: public interface}{figure.8.9}{}}
\@writefile{lof}{\contentsline {figure}{\numberline {8.10}{\ignorespaces The Prolog code implementing the application logic.}}{198}{figure.8.10}}
\newlabel{fig:dotnet-pipolo34}{{8.10}{198}{The Prolog code implementing the application logic}{figure.8.10}{}}
\@setckpt{mpp-in-dotnet}{
\setcounter{page}{199}
\setcounter{equation}{0}
\setcounter{enumi}{5}
\setcounter{enumii}{0}
\setcounter{enumiii}{0}
\setcounter{enumiv}{0}
\setcounter{footnote}{12}
\setcounter{mpfootnote}{0}
\setcounter{part}{0}
\setcounter{chapter}{8}
\setcounter{section}{8}
\setcounter{subsection}{1}
\setcounter{subsubsection}{0}
\setcounter{paragraph}{0}
\setcounter{subparagraph}{0}
\setcounter{figure}{10}
\setcounter{table}{6}
\setcounter{Item}{37}
\setcounter{Hfootnote}{33}
\setcounter{bookmark@seq@number}{139}
\setcounter{FancyVerbLine}{18}
\setcounter{section@level}{2}
}
