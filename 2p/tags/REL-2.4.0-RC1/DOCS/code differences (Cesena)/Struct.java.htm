<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- Generated by Compare It! (c) Grig Software -->
<HTML>
<HEAD>
<TITLE>Struct.java Diff Report</TITLE>
<style type="text/css">
<!--
body { font-family: Verdana,Arial,Helvetica; background-color: #FFFFFF; }
td   { border:0; font-family: Arial, Helvetica; font-size: xx-small;}
table { border:0; width:100%; color: #666666;}
thead  { background-color: #343434; color: #FFFFFF; font-family: Verdana, Arial, Helvetica; height: 30px; vertical-align: middle; text-align: center; font-weight: bold; }
.Same { width:48%; }
.SrcOnly { background-color: #C0DCC0; color:#008000; width:48%; }
.DstOnly { background-color: #C0DCC0; color:#C80000; width:48%; }
.Virtual { background-color: #EEEEEE; width:48%; }
.Changed { background-color: #C0DCC0; color:#0000FF; width:48%; }
.InSame{ color:#0000FF; }
.InDiff { color:#C80000; font-weight:bold; }
.LineNum { background-color: #EEEEEE; width:2%; }
.Stats { background-color: #EEEEEE; color:black; }
.StatsA { background-color: #EEEEEE; color:black; }
a { font-family: Arial, Helvetica; font-size: xx-small;background-color: #EEEEEE; color:blue;}
-->
</STYLE>
</HEAD>
<BODY>
<table><tr><td align=right>Tuesday, May 17, 2011 10:40:08</td></tr></table>
<table>
<thead><tr><td width=50%>[NEW] alice/tuprolog/Struct.java</td><td width=50%>C[OLD] alice/tuprolog/Struct.java</td></tr></thead></table>

<table cellspacing=1 cellpadding=0>
<tr><td class="LineNum">1</td><td class="Same">/*</td>
<td class="LineNum">1</td><td class="Same">/*</td></tr>
<tr><td class="LineNum">2</td><td class="Same">&nbsp;* tuProlog - Copyright (C) 2001-2007 aliCE team at deis.unibo.it</td>
<td class="LineNum">2</td><td class="Same">&nbsp;* tuProlog - Copyright (C) 2001-2007 aliCE team at deis.unibo.it</td></tr>
<tr><td class="LineNum">3</td><td class="Same">&nbsp;*</td>
<td class="LineNum">3</td><td class="Same">&nbsp;*</td></tr>
<tr><td class="LineNum">4</td><td class="Same">&nbsp;* This library is free software; you can redistribute it and/or</td>
<td class="LineNum">4</td><td class="Same">&nbsp;* This library is free software; you can redistribute it and/or</td></tr>
<tr><td class="LineNum">5</td><td class="Same">&nbsp;* modify it under the terms of the GNU Lesser General Public</td>
<td class="LineNum">5</td><td class="Same">&nbsp;* modify it under the terms of the GNU Lesser General Public</td></tr>
<tr><td class="LineNum">6</td><td class="Same">&nbsp;* License as published by the Free Software Foundation; either</td>
<td class="LineNum">6</td><td class="Same">&nbsp;* License as published by the Free Software Foundation; either</td></tr>
<tr><td class="LineNum">7</td><td class="Same">&nbsp;* version 2.1 of the License, or (at your option) any later version.</td>
<td class="LineNum">7</td><td class="Same">&nbsp;* version 2.1 of the License, or (at your option) any later version.</td></tr>
<tr><td class="LineNum">8</td><td class="Same">&nbsp;*</td>
<td class="LineNum">8</td><td class="Same">&nbsp;*</td></tr>
<tr><td class="LineNum">9</td><td class="Same">&nbsp;* This library is distributed in the hope that it will be useful,</td>
<td class="LineNum">9</td><td class="Same">&nbsp;* This library is distributed in the hope that it will be useful,</td></tr>
<tr><td class="LineNum">10</td><td class="Same">&nbsp;* but WITHOUT ANY WARRANTY; without even the implied warranty of</td>
<td class="LineNum">10</td><td class="Same">&nbsp;* but WITHOUT ANY WARRANTY; without even the implied warranty of</td></tr>
<tr><td class="LineNum">11</td><td class="Same">&nbsp;* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</td>
<td class="LineNum">11</td><td class="Same">&nbsp;* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</td></tr>
<tr><td class="LineNum">12</td><td class="Same">&nbsp;* Lesser General Public License for more details.</td>
<td class="LineNum">12</td><td class="Same">&nbsp;* Lesser General Public License for more details.</td></tr>
<tr><td class="LineNum">13</td><td class="Same">&nbsp;*</td>
<td class="LineNum">13</td><td class="Same">&nbsp;*</td></tr>
<tr><td class="LineNum">14</td><td class="Same">&nbsp;* You should have received a copy of the GNU Lesser General Public</td>
<td class="LineNum">14</td><td class="Same">&nbsp;* You should have received a copy of the GNU Lesser General Public</td></tr>
<tr><td class="LineNum">15</td><td class="Same">&nbsp;* License along with this library; if not, write to the Free Software</td>
<td class="LineNum">15</td><td class="Same">&nbsp;* License along with this library; if not, write to the Free Software</td></tr>
<tr><td class="LineNum">16</td><td class="Same">&nbsp;* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</td>
<td class="LineNum">16</td><td class="Same">&nbsp;* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</td></tr>
<tr><td class="LineNum">17</td><td class="Same">&nbsp;*/</td>
<td class="LineNum">17</td><td class="Same">&nbsp;*/</td></tr>
<tr><td class="LineNum">18</td><td class="Same">package alice.tuprolog;</td>
<td class="LineNum">18</td><td class="Same">package alice.tuprolog;</td></tr>
<tr><td class="LineNum">19</td><td class="Same">&nbsp;</td>
<td class="LineNum">19</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">20</td><td class="Same">import java.util.AbstractMap;</td>
<td class="LineNum">20</td><td class="Same">import java.util.AbstractMap;</td></tr>
<tr><td class="LineNum">21</td><td class="Same">import java.util.Iterator;</td>
<td class="LineNum">21</td><td class="Same">import java.util.Iterator;</td></tr>
<tr><td class="LineNum">22</td><td class="Same">import java.util.LinkedList;</td>
<td class="LineNum">22</td><td class="Same">import java.util.LinkedList;</td></tr>
<tr><td class="LineNum">23</td><td class="Same">import java.util.List;</td>
<td class="LineNum">23</td><td class="Same">import java.util.List;</td></tr>
<tr><td class="LineNum">24</td><td class="Same">&nbsp;</td>
<td class="LineNum">24</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">25</td><td class="Same">/**</td>
<td class="LineNum">25</td><td class="Same">/**</td></tr>
<tr><td class="LineNum">26</td><td class="Same">&nbsp;* Struct class represents both compound prolog term</td>
<td class="LineNum">26</td><td class="Same">&nbsp;* Struct class represents both compound prolog term</td></tr>
<tr><td class="LineNum">27</td><td class="Same">&nbsp;* and atom term (considered as 0-arity compound).</td>
<td class="LineNum">27</td><td class="Same">&nbsp;* and atom term (considered as 0-arity compound).</td></tr>
<tr><td class="LineNum">28</td><td class="Same">&nbsp;*/</td>
<td class="LineNum">28</td><td class="Same">&nbsp;*/</td></tr>
<tr><td class="LineNum">29</td><td class="Same">public class Struct extends Term {</td>
<td class="LineNum">29</td><td class="Same">public class Struct extends Term {</td></tr>
<tr><td class="LineNum">30</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">30</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">31</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/** name of the structure */</td>
<td class="LineNum">31</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/** name of the structure */</td></tr>
<tr><td class="LineNum">32</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;private String name;</td>
<td class="LineNum">32</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;private String name;</td></tr>
<tr><td class="LineNum">33</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/** args array */</td>
<td class="LineNum">33</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/** args array */</td></tr>
<tr><td class="LineNum">34</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;private Term[] arg;</td>
<td class="LineNum">34</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;private Term[] arg;</td></tr>
<tr><td class="LineNum">35</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/** arity **/</td>
<td class="LineNum">35</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/** arity **/</td></tr>
<tr><td class="LineNum">36</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;private int arity;</td>
<td class="LineNum">36</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;private int arity;</td></tr>
<tr><td class="LineNum">37</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/** to speedup hash map operation */</td>
<td class="LineNum">37</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/** to speedup hash map operation */</td></tr>
<tr><td class="LineNum">38</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;private String predicateIndicator;</td>
<td class="LineNum">38</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;private String predicateIndicator;</td></tr>
<tr><td class="LineNum">39</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/** primitive behaviour */</td>
<td class="LineNum">39</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/** primitive behaviour */</td></tr>
<tr><td class="LineNum">40</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;private transient PrimitiveInfo primitive;</td>
<td class="LineNum">40</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;private transient PrimitiveInfo primitive;</td></tr>
<tr><td class="LineNum">41</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/** it indicates if the term is resolved */</td>
<td class="LineNum">41</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/** it indicates if the term is resolved */</td></tr>
<tr><td class="LineNum">42</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;private boolean resolved=false;</td>
<td class="LineNum">42</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;private boolean resolved=false;</td></tr>
<tr><td class="LineNum">43</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">43</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">44</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td>
<td class="LineNum">44</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td></tr>
<tr><td class="LineNum">45</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Builds a Struct representing an atom</td>
<td class="LineNum">45</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Builds a Struct representing an atom</td></tr>
<tr><td class="LineNum">46</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td>
<td class="LineNum">46</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td></tr>
<tr><td class="LineNum">47</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public Struct(String f) {</td>
<td class="LineNum">47</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public Struct(String f) {</td></tr>
<tr><td class="LineNum">48</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this(f,0);</td>
<td class="LineNum">48</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this(f,0);</td></tr>
<tr><td class="LineNum">49</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">49</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">50</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">50</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">51</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td>
<td class="LineNum">51</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td></tr>
<tr><td class="LineNum">52</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Builds a compound, with one argument</td>
<td class="LineNum">52</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Builds a compound, with one argument</td></tr>
<tr><td class="LineNum">53</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td>
<td class="LineNum">53</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td></tr>
<tr><td class="LineNum">54</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public Struct(String f, Term at0) {</td>
<td class="LineNum">54</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public Struct(String f, Term at0) {</td></tr>
<tr><td class="LineNum">55</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this(f, new Term[] {at0});</td>
<td class="LineNum">55</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this(f, new Term[] {at0});</td></tr>
<tr><td class="LineNum">56</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">56</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">57</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">57</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">58</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td>
<td class="LineNum">58</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td></tr>
<tr><td class="LineNum">59</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Builds a compound, with two arguments</td>
<td class="LineNum">59</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Builds a compound, with two arguments</td></tr>
<tr><td class="LineNum">60</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td>
<td class="LineNum">60</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td></tr>
<tr><td class="LineNum">61</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public Struct(String f, Term at0, Term at1) {</td>
<td class="LineNum">61</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public Struct(String f, Term at0, Term at1) {</td></tr>
<tr><td class="LineNum">62</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this(f, new Term[] {at0, at1});</td>
<td class="LineNum">62</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this(f, new Term[] {at0, at1});</td></tr>
<tr><td class="LineNum">63</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">63</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">64</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">64</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">65</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td>
<td class="LineNum">65</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td></tr>
<tr><td class="LineNum">66</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Builds a compound, with three arguments</td>
<td class="LineNum">66</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Builds a compound, with three arguments</td></tr>
<tr><td class="LineNum">67</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td>
<td class="LineNum">67</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td></tr>
<tr><td class="LineNum">68</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public Struct(String f, Term at0, Term at1, Term at2) {</td>
<td class="LineNum">68</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public Struct(String f, Term at0, Term at1, Term at2) {</td></tr>
<tr><td class="LineNum">69</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this(f, new Term[] {at0, at1, at2});</td>
<td class="LineNum">69</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this(f, new Term[] {at0, at1, at2});</td></tr>
<tr><td class="LineNum">70</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">70</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">71</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">71</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">72</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td>
<td class="LineNum">72</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td></tr>
<tr><td class="LineNum">73</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Builds a compound, with four arguments</td>
<td class="LineNum">73</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Builds a compound, with four arguments</td></tr>
<tr><td class="LineNum">74</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td>
<td class="LineNum">74</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td></tr>
<tr><td class="LineNum">75</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public Struct(String f, Term at0, Term at1, Term at2, Term at3) {</td>
<td class="LineNum">75</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public Struct(String f, Term at0, Term at1, Term at2, Term at3) {</td></tr>
<tr><td class="LineNum">76</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this(f, new Term[] {at0, at1, at2, at3});</td>
<td class="LineNum">76</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this(f, new Term[] {at0, at1, at2, at3});</td></tr>
<tr><td class="LineNum">77</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">77</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">78</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">78</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">79</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td>
<td class="LineNum">79</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td></tr>
<tr><td class="LineNum">80</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Builds a compound, with five arguments</td>
<td class="LineNum">80</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Builds a compound, with five arguments</td></tr>
<tr><td class="LineNum">81</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td>
<td class="LineNum">81</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td></tr>
<tr><td class="LineNum">82</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public Struct(String f, Term at0, Term at1, Term at2, Term at3, Term at4) {</td>
<td class="LineNum">82</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public Struct(String f, Term at0, Term at1, Term at2, Term at3, Term at4) {</td></tr>
<tr><td class="LineNum">83</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this(f, new Term[] {at0, at1, at2, at3, at4});</td>
<td class="LineNum">83</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this(f, new Term[] {at0, at1, at2, at3, at4});</td></tr>
<tr><td class="LineNum">84</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">84</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">85</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">85</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">86</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td>
<td class="LineNum">86</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td></tr>
<tr><td class="LineNum">87</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Builds a compound, with six arguments</td>
<td class="LineNum">87</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Builds a compound, with six arguments</td></tr>
<tr><td class="LineNum">88</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td>
<td class="LineNum">88</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td></tr>
<tr><td class="LineNum">89</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public Struct(String f, Term at0, Term at1, Term at2, Term at3, Term at4, Term at5) {</td>
<td class="LineNum">89</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public Struct(String f, Term at0, Term at1, Term at2, Term at3, Term at4, Term at5) {</td></tr>
<tr><td class="LineNum">90</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this(f, new Term[] {at0, at1, at2, at3, at4, at5});</td>
<td class="LineNum">90</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this(f, new Term[] {at0, at1, at2, at3, at4, at5});</td></tr>
<tr><td class="LineNum">91</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">91</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">92</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">92</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">93</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td>
<td class="LineNum">93</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td></tr>
<tr><td class="LineNum">94</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Builds a compound, with seven arguments</td>
<td class="LineNum">94</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Builds a compound, with seven arguments</td></tr>
<tr><td class="LineNum">95</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td>
<td class="LineNum">95</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td></tr>
<tr><td class="LineNum">96</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public Struct(String f, Term at0, Term at1, Term at2, Term at3, Term at4, Term at5, Term at6) {</td>
<td class="LineNum">96</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public Struct(String f, Term at0, Term at1, Term at2, Term at3, Term at4, Term at5, Term at6) {</td></tr>
<tr><td class="LineNum">97</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this(f, new Term[] {at0, at1, at2, at3, at4, at5, at6});</td>
<td class="LineNum">97</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this(f, new Term[] {at0, at1, at2, at3, at4, at5, at6});</td></tr>
<tr><td class="LineNum">98</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">98</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">99</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">99</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">100</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td>
<td class="LineNum">100</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td></tr>
<tr><td class="LineNum">101</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Builds a compound, with an array of arguments</td>
<td class="LineNum">101</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Builds a compound, with an array of arguments</td></tr>
<tr><td class="LineNum">102</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td>
<td class="LineNum">102</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td></tr>
<tr><td class="LineNum">103</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public Struct(String f, Term[] argList) {</td>
<td class="LineNum">103</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public Struct(String f, Term[] argList) {</td></tr>
<tr><td class="LineNum">104</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this(f, argList.length);</td>
<td class="LineNum">104</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this(f, argList.length);</td></tr>
<tr><td class="LineNum">105</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (int i = 0; i &lt; argList.length; i++)</td>
<td class="LineNum">105</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (int i = 0; i &lt; argList.length; i++)</td></tr>
<tr><td class="LineNum">106</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (argList[i] == null)</td>
<td class="LineNum">106</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (argList[i] == null)</td></tr>
<tr><td class="LineNum">107</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new InvalidTermException("Arguments of a Struct cannot be null");</td>
<td class="LineNum">107</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new InvalidTermException("Arguments of a Struct cannot be null");</td></tr>
<tr><td class="LineNum">108</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else</td>
<td class="LineNum">108</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else</td></tr>
<tr><td class="LineNum">109</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arg[i] = argList[i];</td>
<td class="LineNum">109</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arg[i] = argList[i];</td></tr>
<tr><td class="LineNum">110</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">110</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">111</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">111</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">112</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">112</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">113</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td>
<td class="LineNum">113</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td></tr>
<tr><td class="LineNum">114</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Builds a structure representing an empty list</td>
<td class="LineNum">114</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Builds a structure representing an empty list</td></tr>
<tr><td class="LineNum">115</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td>
<td class="LineNum">115</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td></tr>
<tr><td class="LineNum">116</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public Struct() {</td>
<td class="LineNum">116</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public Struct() {</td></tr>
<tr><td class="LineNum">117</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this("[]", 0);</td>
<td class="LineNum">117</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this("[]", 0);</td></tr>
<tr><td class="LineNum">118</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resolved = true;</td>
<td class="LineNum">118</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resolved = true;</td></tr>
<tr><td class="LineNum">119</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">119</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">120</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">120</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">121</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">121</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">122</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td>
<td class="LineNum">122</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td></tr>
<tr><td class="LineNum">123</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Builds a list providing head and tail</td>
<td class="LineNum">123</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Builds a list providing head and tail</td></tr>
<tr><td class="LineNum">124</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td>
<td class="LineNum">124</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td></tr>
<tr><td class="LineNum">125</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public Struct(Term h,Term t) {</td>
<td class="LineNum">125</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public Struct(Term h,Term t) {</td></tr>
<tr><td class="LineNum">126</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this(".",2);</td>
<td class="LineNum">126</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this(".",2);</td></tr>
<tr><td class="LineNum">127</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arg[0] = h;</td>
<td class="LineNum">127</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arg[0] = h;</td></tr>
<tr><td class="LineNum">128</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arg[1] = t;</td>
<td class="LineNum">128</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arg[1] = t;</td></tr>
<tr><td class="LineNum">129</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">129</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">130</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">130</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">131</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td>
<td class="LineNum">131</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td></tr>
<tr><td class="LineNum">132</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Builds a list specifying the elements</td>
<td class="LineNum">132</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Builds a list specifying the elements</td></tr>
<tr><td class="LineNum">133</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td>
<td class="LineNum">133</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td></tr>
<tr><td class="LineNum">134</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public Struct(Term[] argList) {</td>
<td class="LineNum">134</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public Struct(Term[] argList) {</td></tr>
<tr><td class="LineNum">135</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this(argList,0);</td>
<td class="LineNum">135</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this(argList,0);</td></tr>
<tr><td class="LineNum">136</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">136</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">137</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">137</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">138</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;private Struct(Term[] argList, int index) {</td>
<td class="LineNum">138</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;private Struct(Term[] argList, int index) {</td></tr>
<tr><td class="LineNum">139</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this(".",2);</td>
<td class="LineNum">139</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this(".",2);</td></tr>
<tr><td class="LineNum">140</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (index&lt;argList.length) {</td>
<td class="LineNum">140</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (index&lt;argList.length) {</td></tr>
<tr><td class="LineNum">141</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arg[0] = argList[index];</td>
<td class="LineNum">141</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arg[0] = argList[index];</td></tr>
<tr><td class="LineNum">142</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arg[1] = new Struct(argList,index+1);</td>
<td class="LineNum">142</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arg[1] = new Struct(argList,index+1);</td></tr>
<tr><td class="LineNum">143</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {</td>
<td class="LineNum">143</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {</td></tr>
<tr><td class="LineNum">144</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// build an empty list</td>
<td class="LineNum">144</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// build an empty list</td></tr>
<tr><td class="LineNum">145</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name = "[]";</td>
<td class="LineNum">145</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name = "[]";</td></tr>
<tr><td class="LineNum">146</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arity = 0;</td>
<td class="LineNum">146</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arity = 0;</td></tr>
<tr><td class="LineNum">147</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arg = null;</td>
<td class="LineNum">147</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arg = null;</td></tr>
<tr><td class="LineNum">148</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">148</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">149</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">149</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">150</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">150</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">151</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td>
<td class="LineNum">151</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td></tr>
<tr><td class="LineNum">152</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Builds a compound, with a linked list of arguments</td>
<td class="LineNum">152</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Builds a compound, with a linked list of arguments</td></tr>
<tr><td class="LineNum">153</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td>
<td class="LineNum">153</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td></tr>
<tr><td class="LineNum">154</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;Struct(String f, LinkedList al) {</td>
<td class="LineNum">154</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;Struct(String f, LinkedList al) {</td></tr>
<tr><td class="LineNum">155</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name = f;</td>
<td class="LineNum">155</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name = f;</td></tr>
<tr><td class="LineNum">156</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arity = al.size();</td>
<td class="LineNum">156</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arity = al.size();</td></tr>
<tr><td class="LineNum">157</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (arity &gt; 0) {</td>
<td class="LineNum">157</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (arity &gt; 0) {</td></tr>
<tr><td class="LineNum">158</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arg = new Term[arity];</td>
<td class="LineNum">158</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arg = new Term[arity];</td></tr>
<tr><td class="LineNum">159</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(int c = 0;c &lt; arity;c++)</td>
<td class="LineNum">159</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(int c = 0;c &lt; arity;c++)</td></tr>
<tr><td class="LineNum">160</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arg[c] = (Term) al.removeFirst();</td>
<td class="LineNum">160</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arg[c] = (Term) al.removeFirst();</td></tr>
<tr><td class="LineNum">161</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">161</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">162</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;predicateIndicator = name + "/" + arity;</td>
<td class="LineNum">162</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;predicateIndicator = name + "/" + arity;</td></tr>
<tr><td class="LineNum">163</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resolved = false;</td>
<td class="LineNum">163</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resolved = false;</td></tr>
<tr><td class="LineNum">164</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">164</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">165</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">165</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">166</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;private Struct(int arity_) {</td>
<td class="LineNum">166</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;private Struct(int arity_) {</td></tr>
<tr><td class="LineNum">167</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arity = arity_;</td>
<td class="LineNum">167</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arity = arity_;</td></tr>
<tr><td class="LineNum">168</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arg = new Term[arity];</td>
<td class="LineNum">168</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arg = new Term[arity];</td></tr>
<tr><td class="LineNum">169</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">169</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">170</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">170</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">171</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;private Struct(String name_,int arity_) {</td>
<td class="LineNum">171</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;private Struct(String name_,int arity_) {</td></tr>
<tr><td class="LineNum">172</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (name_ == null)</td>
<td class="LineNum">172</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (name_ == null)</td></tr>
<tr><td class="LineNum">173</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new InvalidTermException("The functor of a Struct cannot be null");</td>
<td class="LineNum">173</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new InvalidTermException("The functor of a Struct cannot be null");</td></tr>
<tr><td class="LineNum">174</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (name_.length() == 0 && arity_ &gt; 0)</td>
<td class="LineNum">174</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (name_.length() == 0 && arity_ &gt; 0)</td></tr>
<tr><td class="LineNum">175</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new InvalidTermException("The functor of a non-atom Struct cannot be an empty string");</td>
<td class="LineNum">175</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new InvalidTermException("The functor of a non-atom Struct cannot be an empty string");</td></tr>
<tr><td class="LineNum">176</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name = name_;</td>
<td class="LineNum">176</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name = name_;</td></tr>
<tr><td class="LineNum">177</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arity = arity_;</td>
<td class="LineNum">177</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arity = arity_;</td></tr>
<tr><td class="LineNum">178</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (arity &gt; 0) {</td>
<td class="LineNum">178</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (arity &gt; 0) {</td></tr>
<tr><td class="LineNum">179</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arg = new Term[arity];</td>
<td class="LineNum">179</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arg = new Term[arity];</td></tr>
<tr><td class="LineNum">180</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">180</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">181</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;predicateIndicator = name + "/" + arity;</td>
<td class="LineNum">181</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;predicateIndicator = name + "/" + arity;</td></tr>
<tr><td class="LineNum">182</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resolved = false;</td>
<td class="LineNum">182</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resolved = false;</td></tr>
<tr><td class="LineNum">183</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">183</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">184</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">184</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">185</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/** @deprecated Use Struct#getPredicateIndicator instead. */</td>
<td class="LineNum">185</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/** @deprecated Use Struct#getPredicateIndicator instead. */</td></tr>
<tr><td class="LineNum">186</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;String getHashKey() {</td>
<td class="LineNum">186</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;String getHashKey() {</td></tr>
<tr><td class="LineNum">187</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return getPredicateIndicator();</td>
<td class="LineNum">187</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return getPredicateIndicator();</td></tr>
<tr><td class="LineNum">188</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">188</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">189</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">189</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">190</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;String getPredicateIndicator() {</td>
<td class="LineNum">190</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;String getPredicateIndicator() {</td></tr>
<tr><td class="LineNum">191</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return predicateIndicator;</td>
<td class="LineNum">191</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return predicateIndicator;</td></tr>
<tr><td class="LineNum">192</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">192</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">193</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">193</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">194</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td>
<td class="LineNum">194</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td></tr>
<tr><td class="LineNum">195</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Gets the number of elements of</td>
<td class="LineNum">195</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Gets the number of elements of</td></tr>
<tr><td class="LineNum">196</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* this structure</td>
<td class="LineNum">196</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* this structure</td></tr>
<tr><td class="LineNum">197</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td>
<td class="LineNum">197</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td></tr>
<tr><td class="LineNum">198</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public int getArity() {</td>
<td class="LineNum">198</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public int getArity() {</td></tr>
<tr><td class="LineNum">199</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return arity;</td>
<td class="LineNum">199</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return arity;</td></tr>
<tr><td class="LineNum">200</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">200</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">201</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">201</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">202</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td>
<td class="LineNum">202</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td></tr>
<tr><td class="LineNum">203</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Gets the functor name  of this structure</td>
<td class="LineNum">203</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Gets the functor name  of this structure</td></tr>
<tr><td class="LineNum">204</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td>
<td class="LineNum">204</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td></tr>
<tr><td class="LineNum">205</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public String getName() {</td>
<td class="LineNum">205</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public String getName() {</td></tr>
<tr><td class="LineNum">206</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return name;</td>
<td class="LineNum">206</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return name;</td></tr>
<tr><td class="LineNum">207</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">207</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">208</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">208</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">209</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td>
<td class="LineNum">209</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td></tr>
<tr><td class="LineNum">210</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Gets the i-th element of this structure</td>
<td class="LineNum">210</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Gets the i-th element of this structure</td></tr>
<tr><td class="LineNum">211</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*</td>
<td class="LineNum">211</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*</td></tr>
<tr><td class="LineNum">212</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* No bound check is done</td>
<td class="LineNum">212</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* No bound check is done</td></tr>
<tr><td class="LineNum">213</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td>
<td class="LineNum">213</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td></tr>
<tr><td class="LineNum">214</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public Term getArg(int index) {</td>
<td class="LineNum">214</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public Term getArg(int index) {</td></tr>
<tr><td class="LineNum">215</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return arg[index];</td>
<td class="LineNum">215</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return arg[index];</td></tr>
<tr><td class="LineNum">216</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">216</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">217</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">217</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">218</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td>
<td class="LineNum">218</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td></tr>
<tr><td class="LineNum">219</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Sets the i-th element of this structure</td>
<td class="LineNum">219</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Sets the i-th element of this structure</td></tr>
<tr><td class="LineNum">220</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*</td>
<td class="LineNum">220</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*</td></tr>
<tr><td class="LineNum">221</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* (Only for internal service)</td>
<td class="LineNum">221</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* (Only for internal service)</td></tr>
<tr><td class="LineNum">222</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td>
<td class="LineNum">222</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td></tr>
<tr><td class="LineNum">223</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;void setArg(int index, Term argument) {</td>
<td class="LineNum">223</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;void setArg(int index, Term argument) {</td></tr>
<tr><td class="LineNum">224</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arg[index] = argument;</td>
<td class="LineNum">224</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arg[index] = argument;</td></tr>
<tr><td class="LineNum">225</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">225</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">226</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">226</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">227</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td>
<td class="LineNum">227</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td></tr>
<tr><td class="LineNum">228</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Gets the i-th element of this structure</td>
<td class="LineNum">228</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Gets the i-th element of this structure</td></tr>
<tr><td class="LineNum">229</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*</td>
<td class="LineNum">229</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*</td></tr>
<tr><td class="LineNum">230</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* No bound check is done. It is equivalent to</td>
<td class="LineNum">230</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* No bound check is done. It is equivalent to</td></tr>
<tr><td class="LineNum">231</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* &lt;code&gt;getArg(index).getTerm()&lt;/code&gt;</td>
<td class="LineNum">231</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* &lt;code&gt;getArg(index).getTerm()&lt;/code&gt;</td></tr>
<tr><td class="LineNum">232</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td>
<td class="LineNum">232</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td></tr>
<tr><td class="LineNum">233</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public Term getTerm(int index) {</td>
<td class="LineNum">233</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public Term getTerm(int index) {</td></tr>
<tr><td class="LineNum">234</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!(arg[index] instanceof Var))</td>
<td class="LineNum">234</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!(arg[index] instanceof Var))</td></tr>
<tr><td class="LineNum">235</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return arg[index];</td>
<td class="LineNum">235</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return arg[index];</td></tr>
<tr><td class="LineNum">236</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return arg[index].getTerm();</td>
<td class="LineNum">236</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return arg[index].getTerm();</td></tr>
<tr><td class="LineNum">237</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">237</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">238</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">238</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">239</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">239</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">240</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;// checking type and properties of the Term</td>
<td class="LineNum">240</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;// checking type and properties of the Term</td></tr>
<tr><td class="LineNum">241</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">241</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">242</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/** is this term a prolog numeric term? */</td>
<td class="LineNum">242</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/** is this term a prolog numeric term? */</td></tr>
<tr><td class="LineNum">243</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public boolean isNumber() {</td>
<td class="LineNum">243</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public boolean isNumber() {</td></tr>
<tr><td class="LineNum">244</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;</td>
<td class="LineNum">244</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;</td></tr>
<tr><td class="LineNum">245</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">245</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">246</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">246</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">247</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/** is this term a struct  */</td>
<td class="LineNum">247</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/** is this term a struct  */</td></tr>
<tr><td class="LineNum">248</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public boolean isStruct() {</td>
<td class="LineNum">248</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public boolean isStruct() {</td></tr>
<tr><td class="LineNum">249</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;</td>
<td class="LineNum">249</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;</td></tr>
<tr><td class="LineNum">250</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">250</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">251</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">251</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">252</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/** is this term a variable  */</td>
<td class="LineNum">252</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/** is this term a variable  */</td></tr>
<tr><td class="LineNum">253</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public boolean isVar() {</td>
<td class="LineNum">253</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public boolean isVar() {</td></tr>
<tr><td class="LineNum">254</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;</td>
<td class="LineNum">254</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;</td></tr>
<tr><td class="LineNum">255</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">255</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">256</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">256</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">257</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">257</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">258</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;// check type services</td>
<td class="LineNum">258</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;// check type services</td></tr>
<tr><td class="LineNum">259</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">259</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">260</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public boolean isAtomic() {</td>
<td class="LineNum">260</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public boolean isAtomic() {</td></tr>
<tr><td class="LineNum">261</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return  arity == 0;</td>
<td class="LineNum">261</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return  arity == 0;</td></tr>
<tr><td class="LineNum">262</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">262</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">263</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">263</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">264</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public boolean isCompound() {</td>
<td class="LineNum">264</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public boolean isCompound() {</td></tr>
<tr><td class="LineNum">265</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return arity &gt; 0;</td>
<td class="LineNum">265</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return arity &gt; 0;</td></tr>
<tr><td class="LineNum">266</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">266</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">267</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">267</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">268</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public boolean isAtom() {</td>
<td class="LineNum">268</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public boolean isAtom() {</td></tr>
<tr><td class="LineNum">269</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return (arity == 0 || isEmptyList());</td>
<td class="LineNum">269</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return (arity == 0 || isEmptyList());</td></tr>
<tr><td class="LineNum">270</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">270</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">271</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">271</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">272</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public boolean isList() {</td>
<td class="LineNum">272</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public boolean isList() {</td></tr>
<tr><td class="LineNum">273</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return (name.equals(".") && arity == 2 && arg[1].isList()) || isEmptyList();</td>
<td class="LineNum">273</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return (name.equals(".") && arity == 2 && arg[1].isList()) || isEmptyList();</td></tr>
<tr><td class="LineNum">274</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">274</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">275</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">275</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">276</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public boolean isGround() {</td>
<td class="LineNum">276</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public boolean isGround() {</td></tr>
<tr><td class="LineNum">277</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (int i=0; i&lt;arity; i++) {</td>
<td class="LineNum">277</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (int i=0; i&lt;arity; i++) {</td></tr>
<tr><td class="LineNum">278</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!arg[i].isGround()) {</td>
<td class="LineNum">278</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!arg[i].isGround()) {</td></tr>
<tr><td class="LineNum">279</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;</td>
<td class="LineNum">279</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;</td></tr>
<tr><td class="LineNum">280</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">280</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">281</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">281</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">282</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;</td>
<td class="LineNum">282</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;</td></tr>
<tr><td class="LineNum">283</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">283</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">284</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">284</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">285</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td>
<td class="LineNum">285</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td></tr>
<tr><td class="LineNum">286</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Check is this struct is clause or directive</td>
<td class="LineNum">286</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Check is this struct is clause or directive</td></tr>
<tr><td class="LineNum">287</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td>
<td class="LineNum">287</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td></tr>
<tr><td class="LineNum">288</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public boolean isClause() {</td>
<td class="LineNum">288</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public boolean isClause() {</td></tr>
<tr><td class="LineNum">289</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(name.equals(":-") && arity &gt; 1 && arg[0].getTerm() instanceof Struct);</td>
<td class="LineNum">289</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(name.equals(":-") && arity &gt; 1 && arg[0].getTerm() instanceof Struct);</td></tr>
<tr><td class="LineNum">290</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//return(name.equals(":-") && arity == 2 && arg[0].getTerm() instanceof Struct);</td>
<td class="LineNum">290</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//return(name.equals(":-") && arity == 2 && arg[0].getTerm() instanceof Struct);</td></tr>
<tr><td class="LineNum">291</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}    </td>
<td class="LineNum">291</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}    </td></tr>
<tr><td class="LineNum">292</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">292</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">293</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public Term getTerm() {</td>
<td class="LineNum">293</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public Term getTerm() {</td></tr>
<tr><td class="LineNum">294</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return this;</td>
<td class="LineNum">294</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return this;</td></tr>
<tr><td class="LineNum">295</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">295</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">296</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">296</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">297</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;//</td>
<td class="LineNum">297</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;//</td></tr>
<tr><td class="LineNum">298</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">298</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">299</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td>
<td class="LineNum">299</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td></tr>
<tr><td class="LineNum">300</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Gets an argument inside this structure, given its name</td>
<td class="LineNum">300</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Gets an argument inside this structure, given its name</td></tr>
<tr><td class="LineNum">301</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* </td>
<td class="LineNum">301</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* </td></tr>
<tr><td class="LineNum">302</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @param name name of the structure </td>
<td class="LineNum">302</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @param name name of the structure </td></tr>
<tr><td class="LineNum">303</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @return the argument or null if not found</td>
<td class="LineNum">303</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @return the argument or null if not found</td></tr>
<tr><td class="LineNum">304</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td>
<td class="LineNum">304</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td></tr>
<tr><td class="LineNum">305</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public Struct getArg(String name) {</td>
<td class="LineNum">305</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public Struct getArg(String name) {</td></tr>
<tr><td class="LineNum">306</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (arity == 0) {</td>
<td class="LineNum">306</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (arity == 0) {</td></tr>
<tr><td class="LineNum">307</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return null;</td>
<td class="LineNum">307</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return null;</td></tr>
<tr><td class="LineNum">308</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">308</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">309</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (int i=0; i&lt;arg.length; i++) {</td>
<td class="LineNum">309</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (int i=0; i&lt;arg.length; i++) {</td></tr>
<tr><td class="LineNum">310</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (arg[i] instanceof Struct) {</td>
<td class="LineNum">310</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (arg[i] instanceof Struct) {</td></tr>
<tr><td class="LineNum">311</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Struct s = (Struct) arg[i];</td>
<td class="LineNum">311</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Struct s = (Struct) arg[i];</td></tr>
<tr><td class="LineNum">312</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (s.getName().equals(name)) {</td>
<td class="LineNum">312</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (s.getName().equals(name)) {</td></tr>
<tr><td class="LineNum">313</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return s;</td>
<td class="LineNum">313</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return s;</td></tr>
<tr><td class="LineNum">314</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">314</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">315</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">315</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">316</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">316</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">317</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (int i=0; i&lt;arg.length; i++) {</td>
<td class="LineNum">317</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (int i=0; i&lt;arg.length; i++) {</td></tr>
<tr><td class="LineNum">318</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (arg[i] instanceof Struct) {</td>
<td class="LineNum">318</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (arg[i] instanceof Struct) {</td></tr>
<tr><td class="LineNum">319</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Struct s = (Struct)arg[i];</td>
<td class="LineNum">319</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Struct s = (Struct)arg[i];</td></tr>
<tr><td class="LineNum">320</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Struct sol = s.getArg(name);</td>
<td class="LineNum">320</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Struct sol = s.getArg(name);</td></tr>
<tr><td class="LineNum">321</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (sol!=null) {</td>
<td class="LineNum">321</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (sol!=null) {</td></tr>
<tr><td class="LineNum">322</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return sol;</td>
<td class="LineNum">322</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return sol;</td></tr>
<tr><td class="LineNum">323</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">323</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">324</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">324</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">325</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">325</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">326</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return null;</td>
<td class="LineNum">326</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return null;</td></tr>
<tr><td class="LineNum">327</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">327</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">328</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">328</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">329</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">329</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">330</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;//</td>
<td class="LineNum">330</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;//</td></tr>
<tr><td class="LineNum">331</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">331</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">332</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td>
<td class="LineNum">332</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td></tr>
<tr><td class="LineNum">333</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Test if a term is greater than other</td>
<td class="LineNum">333</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Test if a term is greater than other</td></tr>
<tr><td class="LineNum">334</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td>
<td class="LineNum">334</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td></tr>
<tr><td class="LineNum">335</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public boolean isGreater(Term t) {</td>
<td class="LineNum">335</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public boolean isGreater(Term t) {</td></tr>
<tr><td class="LineNum">336</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t = t.getTerm();</td>
<td class="LineNum">336</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t = t.getTerm();</td></tr>
<tr><td class="LineNum">337</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!(t instanceof Struct)) {</td>
<td class="LineNum">337</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!(t instanceof Struct)) {</td></tr>
<tr><td class="LineNum">338</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;</td>
<td class="LineNum">338</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;</td></tr>
<tr><td class="LineNum">339</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {</td>
<td class="LineNum">339</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {</td></tr>
<tr><td class="LineNum">340</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Struct ts = (Struct) t;</td>
<td class="LineNum">340</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Struct ts = (Struct) t;</td></tr>
<tr><td class="LineNum">341</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int tarity = ts.arity;</td>
<td class="LineNum">341</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int tarity = ts.arity;</td></tr>
<tr><td class="LineNum">342</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (arity &gt; tarity) {</td>
<td class="LineNum">342</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (arity &gt; tarity) {</td></tr>
<tr><td class="LineNum">343</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;</td>
<td class="LineNum">343</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;</td></tr>
<tr><td class="LineNum">344</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else if (arity == tarity) {</td>
<td class="LineNum">344</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else if (arity == tarity) {</td></tr>
<tr><td class="LineNum">345</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (name.compareTo(ts.name) &gt; 0) {</td>
<td class="LineNum">345</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (name.compareTo(ts.name) &gt; 0) {</td></tr>
<tr><td class="LineNum">346</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;</td>
<td class="LineNum">346</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;</td></tr>
<tr><td class="LineNum">347</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else if (name.compareTo(ts.name) == 0) {</td>
<td class="LineNum">347</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else if (name.compareTo(ts.name) == 0) {</td></tr>
<tr><td class="LineNum">348</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (int c = 0;c &lt; arity;c++) {</td>
<td class="LineNum">348</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (int c = 0;c &lt; arity;c++) {</td></tr>
<tr><td class="LineNum">349</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (arg[c].isGreater(ts.arg[c])) {</td>
<td class="LineNum">349</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (arg[c].isGreater(ts.arg[c])) {</td></tr>
<tr><td class="LineNum">350</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;</td>
<td class="LineNum">350</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;</td></tr>
<tr><td class="LineNum">351</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else if (!arg[c].isEqual(ts.arg[c])) {</td>
<td class="LineNum">351</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else if (!arg[c].isEqual(ts.arg[c])) {</td></tr>
<tr><td class="LineNum">352</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;</td>
<td class="LineNum">352</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;</td></tr>
<tr><td class="LineNum">353</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">353</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">354</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">354</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">355</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">355</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">356</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">356</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">357</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">357</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">358</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;</td>
<td class="LineNum">358</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;</td></tr>
<tr><td class="LineNum">359</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">359</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">360</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">360</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">361</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">361</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">362</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td>
<td class="LineNum">362</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td></tr>
<tr><td class="LineNum">363</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Test if a term is equal to other</td>
<td class="LineNum">363</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Test if a term is equal to other</td></tr>
<tr><td class="LineNum">364</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td>
<td class="LineNum">364</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td></tr>
<tr><td class="LineNum">365</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public boolean isEqual(Term t) {</td>
<td class="LineNum">365</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public boolean isEqual(Term t) {</td></tr>
<tr><td class="LineNum">366</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t = t.getTerm();</td>
<td class="LineNum">366</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t = t.getTerm();</td></tr>
<tr><td class="LineNum">367</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (t instanceof Struct) {</td>
<td class="LineNum">367</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (t instanceof Struct) {</td></tr>
<tr><td class="LineNum">368</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Struct ts = (Struct) t;</td>
<td class="LineNum">368</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Struct ts = (Struct) t;</td></tr>
<tr><td class="LineNum">369</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (arity == ts.arity && name.equals(ts.name)) {</td>
<td class="LineNum">369</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (arity == ts.arity && name.equals(ts.name)) {</td></tr>
<tr><td class="LineNum">370</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (int c = 0;c &lt; arity;c++) {</td>
<td class="LineNum">370</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (int c = 0;c &lt; arity;c++) {</td></tr>
<tr><td class="LineNum">371</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!arg[c].isEqual(ts.arg[c])) {</td>
<td class="LineNum">371</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!arg[c].isEqual(ts.arg[c])) {</td></tr>
<tr><td class="LineNum">372</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;</td>
<td class="LineNum">372</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;</td></tr>
<tr><td class="LineNum">373</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">373</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">374</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">374</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">375</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;</td>
<td class="LineNum">375</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;</td></tr>
<tr><td class="LineNum">376</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {</td>
<td class="LineNum">376</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {</td></tr>
<tr><td class="LineNum">377</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;</td>
<td class="LineNum">377</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;</td></tr>
<tr><td class="LineNum">378</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">378</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">379</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {</td>
<td class="LineNum">379</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {</td></tr>
<tr><td class="LineNum">380</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;</td>
<td class="LineNum">380</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;</td></tr>
<tr><td class="LineNum">381</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">381</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">382</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">382</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">383</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">383</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">384</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;//</td>
<td class="LineNum">384</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;//</td></tr>
<tr><td class="LineNum">385</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">385</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">386</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">386</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">387</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td>
<td class="LineNum">387</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td></tr>
<tr><td class="LineNum">388</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Gets a copy of this structure</td>
<td class="LineNum">388</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Gets a copy of this structure</td></tr>
<tr><td class="LineNum">389</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @param vMap is needed for register occurence of same variables</td>
<td class="LineNum">389</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @param vMap is needed for register occurence of same variables</td></tr>
<tr><td class="LineNum">390</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td>
<td class="LineNum">390</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td></tr>
<tr><td class="LineNum">391</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;Term copy(AbstractMap vMap, int idExecCtx) {</td>
<td class="LineNum">391</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;Term copy(AbstractMap vMap, int idExecCtx) {</td></tr>
<tr><td class="LineNum">392</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Struct t = new Struct(arity);</td>
<td class="LineNum">392</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Struct t = new Struct(arity);</td></tr>
<tr><td class="LineNum">393</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.resolved  = resolved;</td>
<td class="LineNum">393</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.resolved  = resolved;</td></tr>
<tr><td class="LineNum">394</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.name      = name;</td>
<td class="LineNum">394</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.name      = name;</td></tr>
<tr><td class="LineNum">395</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.predicateIndicator   = predicateIndicator;</td>
<td class="LineNum">395</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.predicateIndicator   = predicateIndicator;</td></tr>
<tr><td class="LineNum">396</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.primitive = primitive;</td>
<td class="LineNum">396</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.primitive = primitive;</td></tr>
<tr><td class="LineNum">397</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (int c = 0;c &lt; arity;c++) {</td>
<td class="LineNum">397</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (int c = 0;c &lt; arity;c++) {</td></tr>
<tr><td class="LineNum">398</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.arg[c] = arg[c].copy(vMap, idExecCtx);</td>
<td class="LineNum">398</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.arg[c] = arg[c].copy(vMap, idExecCtx);</td></tr>
<tr><td class="LineNum">399</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">399</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">400</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return t;</td>
<td class="LineNum">400</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return t;</td></tr>
<tr><td class="LineNum">401</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">401</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">402</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">402</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">403</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">403</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">404</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td>
<td class="LineNum">404</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td></tr>
<tr><td class="LineNum">405</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Gets a copy of this structure</td>
<td class="LineNum">405</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Gets a copy of this structure</td></tr>
<tr><td class="LineNum">406</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @param vMap is needed for register occurence of same variables</td>
<td class="LineNum">406</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @param vMap is needed for register occurence of same variables</td></tr>
<tr><td class="LineNum">407</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td>
<td class="LineNum">407</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td></tr>
<tr><td class="LineNum">408</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;Term copy(AbstractMap vMap, AbstractMap substMap) {</td>
<td class="LineNum">408</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;Term copy(AbstractMap vMap, AbstractMap substMap) {</td></tr>
<tr><td class="LineNum">409</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Struct t = new Struct(arity);</td>
<td class="LineNum">409</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Struct t = new Struct(arity);</td></tr>
<tr><td class="LineNum">410</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.resolved  = false;</td>
<td class="LineNum">410</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.resolved  = false;</td></tr>
<tr><td class="LineNum">411</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.name      = name;</td>
<td class="LineNum">411</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.name      = name;</td></tr>
<tr><td class="LineNum">412</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.predicateIndicator   = predicateIndicator;</td>
<td class="LineNum">412</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.predicateIndicator   = predicateIndicator;</td></tr>
<tr><td class="LineNum">413</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.primitive = null;</td>
<td class="LineNum">413</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.primitive = null;</td></tr>
<tr><td class="LineNum">414</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (int c = 0;c &lt; arity;c++) {</td>
<td class="LineNum">414</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (int c = 0;c &lt; arity;c++) {</td></tr>
<tr><td class="LineNum">415</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.arg[c] = arg[c].copy(vMap, substMap);</td>
<td class="LineNum">415</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.arg[c] = arg[c].copy(vMap, substMap);</td></tr>
<tr><td class="LineNum">416</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">416</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">417</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return t;</td>
<td class="LineNum">417</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return t;</td></tr>
<tr><td class="LineNum">418</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">418</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">419</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">419</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">420</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">420</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">421</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td>
<td class="LineNum">421</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td></tr>
<tr><td class="LineNum">422</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* resolve term</td>
<td class="LineNum">422</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* resolve term</td></tr>
<tr><td class="LineNum">423</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td>
<td class="LineNum">423</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td></tr>
<tr><td class="LineNum">424</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;long resolveTerm(long count) {</td>
<td class="LineNum">424</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;long resolveTerm(long count) {</td></tr>
<tr><td class="LineNum">425</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (resolved) {</td>
<td class="LineNum">425</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (resolved) {</td></tr>
<tr><td class="LineNum">426</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return count;</td>
<td class="LineNum">426</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return count;</td></tr>
<tr><td class="LineNum">427</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {</td>
<td class="LineNum">427</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {</td></tr>
<tr><td class="LineNum">428</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LinkedList vars = new LinkedList();</td>
<td class="LineNum">428</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LinkedList vars = new LinkedList();</td></tr>
<tr><td class="LineNum">429</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return resolveTerm(vars,count);</td>
<td class="LineNum">429</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return resolveTerm(vars,count);</td></tr>
<tr><td class="LineNum">430</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">430</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">431</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">431</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">432</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">432</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">433</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">433</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">434</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td>
<td class="LineNum">434</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td></tr>
<tr><td class="LineNum">435</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Resolve name of terms</td>
<td class="LineNum">435</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Resolve name of terms</td></tr>
<tr><td class="LineNum">436</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @param vl list of variables resolved</td>
<td class="LineNum">436</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @param vl list of variables resolved</td></tr>
<tr><td class="LineNum">437</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @param count start timestamp for variables of this term</td>
<td class="LineNum">437</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @param count start timestamp for variables of this term</td></tr>
<tr><td class="LineNum">438</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @return next timestamp for other terms</td>
<td class="LineNum">438</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @return next timestamp for other terms</td></tr>
<tr><td class="LineNum">439</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td>
<td class="LineNum">439</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td></tr>
<tr><td class="LineNum">440</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;long resolveTerm(LinkedList vl,long count) {</td>
<td class="LineNum">440</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;long resolveTerm(LinkedList vl,long count) {</td></tr>
<tr><td class="LineNum">441</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;long newcount=count;</td>
<td class="LineNum">441</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;long newcount=count;</td></tr>
<tr><td class="LineNum">442</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (int c = 0;c &lt; arity;c++) {</td>
<td class="LineNum">442</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (int c = 0;c &lt; arity;c++) {</td></tr>
<tr><td class="LineNum">443</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Term term=arg[c];</td>
<td class="LineNum">443</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Term term=arg[c];</td></tr>
<tr><td class="LineNum">444</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (term!=null) {</td>
<td class="LineNum">444</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (term!=null) {</td></tr>
<tr><td class="LineNum">445</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//--------------------------------</td>
<td class="LineNum">445</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//--------------------------------</td></tr>
<tr><td class="LineNum">446</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// we want to resolve only not linked variables:</td>
<td class="LineNum">446</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// we want to resolve only not linked variables:</td></tr>
<tr><td class="LineNum">447</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// so linked variables must get the linked term</td>
<td class="LineNum">447</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// so linked variables must get the linked term</td></tr>
<tr><td class="LineNum">448</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;term=term.getTerm();</td>
<td class="LineNum">448</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;term=term.getTerm();</td></tr>
<tr><td class="LineNum">449</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//--------------------------------</td>
<td class="LineNum">449</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//--------------------------------</td></tr>
<tr><td class="LineNum">450</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (term instanceof Var) {</td>
<td class="LineNum">450</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (term instanceof Var) {</td></tr>
<tr><td class="LineNum">451</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Var t = (Var) term;</td>
<td class="LineNum">451</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Var t = (Var) term;</td></tr>
<tr><td class="LineNum">452</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.setTimestamp(newcount++);</td>
<td class="LineNum">452</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.setTimestamp(newcount++);</td></tr>
<tr><td class="LineNum">453</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!t.isAnonymous()) {</td>
<td class="LineNum">453</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!t.isAnonymous()) {</td></tr>
<tr><td class="LineNum">454</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// searching a variable with the same name in the list</td>
<td class="LineNum">454</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// searching a variable with the same name in the list</td></tr>
<tr><td class="LineNum">455</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String name= t.getName();</td>
<td class="LineNum">455</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String name= t.getName();</td></tr>
<tr><td class="LineNum">456</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Iterator it = vl.iterator();</td>
<td class="LineNum">456</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Iterator it = vl.iterator();</td></tr>
<tr><td class="LineNum">457</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Var found = null;</td>
<td class="LineNum">457</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Var found = null;</td></tr>
<tr><td class="LineNum">458</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (it.hasNext()) {</td>
<td class="LineNum">458</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (it.hasNext()) {</td></tr>
<tr><td class="LineNum">459</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Var vn = (Var) it.next();</td>
<td class="LineNum">459</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Var vn = (Var) it.next();</td></tr>
<tr><td class="LineNum">460</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (name.equals(vn.getName())) {</td>
<td class="LineNum">460</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (name.equals(vn.getName())) {</td></tr>
<tr><td class="LineNum">461</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;found=vn;</td>
<td class="LineNum">461</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;found=vn;</td></tr>
<tr><td class="LineNum">462</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;</td>
<td class="LineNum">462</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;</td></tr>
<tr><td class="LineNum">463</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">463</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">464</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">464</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">465</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (found != null) {</td>
<td class="LineNum">465</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (found != null) {</td></tr>
<tr><td class="LineNum">466</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arg[c] = found;</td>
<td class="LineNum">466</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arg[c] = found;</td></tr>
<tr><td class="LineNum">467</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {</td>
<td class="LineNum">467</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {</td></tr>
<tr><td class="LineNum">468</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vl.add(t);</td>
<td class="LineNum">468</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;vl.add(t);</td></tr>
<tr><td class="LineNum">469</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">469</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">470</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">470</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">471</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else if (term instanceof Struct) {</td>
<td class="LineNum">471</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else if (term instanceof Struct) {</td></tr>
<tr><td class="LineNum">472</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newcount = ( (Struct) term ).resolveTerm(vl,newcount);</td>
<td class="LineNum">472</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;newcount = ( (Struct) term ).resolveTerm(vl,newcount);</td></tr>
<tr><td class="LineNum">473</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">473</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">474</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">474</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">475</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">475</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">476</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resolved = true;</td>
<td class="LineNum">476</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resolved = true;</td></tr>
<tr><td class="LineNum">477</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return newcount;</td>
<td class="LineNum">477</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return newcount;</td></tr>
<tr><td class="LineNum">478</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">478</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">479</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">479</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">480</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;// services for list structures</td>
<td class="LineNum">480</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;// services for list structures</td></tr>
<tr><td class="LineNum">481</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">481</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">482</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td>
<td class="LineNum">482</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td></tr>
<tr><td class="LineNum">483</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Is this structure an empty list?</td>
<td class="LineNum">483</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Is this structure an empty list?</td></tr>
<tr><td class="LineNum">484</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td>
<td class="LineNum">484</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td></tr>
<tr><td class="LineNum">485</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public boolean isEmptyList() {</td>
<td class="LineNum">485</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public boolean isEmptyList() {</td></tr>
<tr><td class="LineNum">486</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return name.equals("[]") && arity == 0;</td>
<td class="LineNum">486</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return name.equals("[]") && arity == 0;</td></tr>
<tr><td class="LineNum">487</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">487</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">488</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">488</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">489</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td>
<td class="LineNum">489</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td></tr>
<tr><td class="LineNum">490</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Gets the head of this structure, which is supposed to be a list.</td>
<td class="LineNum">490</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Gets the head of this structure, which is supposed to be a list.</td></tr>
<tr><td class="LineNum">491</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* </td>
<td class="LineNum">491</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* </td></tr>
<tr><td class="LineNum">492</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* &lt;p&gt;</td>
<td class="LineNum">492</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* &lt;p&gt;</td></tr>
<tr><td class="LineNum">493</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Gets the head of this structure, which is supposed to be a list.</td>
<td class="LineNum">493</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Gets the head of this structure, which is supposed to be a list.</td></tr>
<tr><td class="LineNum">494</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* If the callee structure is not a list, throws an &lt;code&gt;UnsupportedOperationException&lt;/code&gt;</td>
<td class="LineNum">494</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* If the callee structure is not a list, throws an &lt;code&gt;UnsupportedOperationException&lt;/code&gt;</td></tr>
<tr><td class="LineNum">495</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* &lt;/p&gt;</td>
<td class="LineNum">495</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* &lt;/p&gt;</td></tr>
<tr><td class="LineNum">496</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td>
<td class="LineNum">496</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td></tr>
<tr><td class="LineNum">497</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public Term listHead() {</td>
<td class="LineNum">497</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public Term listHead() {</td></tr>
<tr><td class="LineNum">498</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!isList())</td>
<td class="LineNum">498</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!isList())</td></tr>
<tr><td class="LineNum">499</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new UnsupportedOperationException("The structure " + this + " is not a list.");</td>
<td class="LineNum">499</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new UnsupportedOperationException("The structure " + this + " is not a list.");</td></tr>
<tr><td class="LineNum">500</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return arg[0].getTerm();</td>
<td class="LineNum">500</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return arg[0].getTerm();</td></tr>
<tr><td class="LineNum">501</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">501</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">502</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">502</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">503</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td>
<td class="LineNum">503</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td></tr>
<tr><td class="LineNum">504</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Gets the tail of this structure, which is supposed to be a list.</td>
<td class="LineNum">504</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Gets the tail of this structure, which is supposed to be a list.</td></tr>
<tr><td class="LineNum">505</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* </td>
<td class="LineNum">505</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* </td></tr>
<tr><td class="LineNum">506</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* &lt;p&gt;</td>
<td class="LineNum">506</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* &lt;p&gt;</td></tr>
<tr><td class="LineNum">507</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Gets the tail of this structure, which is supposed to be a list.</td>
<td class="LineNum">507</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Gets the tail of this structure, which is supposed to be a list.</td></tr>
<tr><td class="LineNum">508</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* If the callee structure is not a list, throws an &lt;code&gt;UnsupportedOperationException&lt;/code&gt;</td>
<td class="LineNum">508</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* If the callee structure is not a list, throws an &lt;code&gt;UnsupportedOperationException&lt;/code&gt;</td></tr>
<tr><td class="LineNum">509</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* &lt;/p&gt;</td>
<td class="LineNum">509</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* &lt;/p&gt;</td></tr>
<tr><td class="LineNum">510</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td>
<td class="LineNum">510</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td></tr>
<tr><td class="LineNum">511</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public Struct listTail() {</td>
<td class="LineNum">511</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public Struct listTail() {</td></tr>
<tr><td class="LineNum">512</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!isList())</td>
<td class="LineNum">512</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!isList())</td></tr>
<tr><td class="LineNum">513</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new UnsupportedOperationException("The structure " + this + " is not a list.");</td>
<td class="LineNum">513</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new UnsupportedOperationException("The structure " + this + " is not a list.");</td></tr>
<tr><td class="LineNum">514</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return (Struct) arg[1].getTerm() ;</td>
<td class="LineNum">514</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return (Struct) arg[1].getTerm() ;</td></tr>
<tr><td class="LineNum">515</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">515</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">516</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">516</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">517</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td>
<td class="LineNum">517</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td></tr>
<tr><td class="LineNum">518</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Gets the number of elements of this structure, which is supposed to be a list.</td>
<td class="LineNum">518</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Gets the number of elements of this structure, which is supposed to be a list.</td></tr>
<tr><td class="LineNum">519</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* </td>
<td class="LineNum">519</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* </td></tr>
<tr><td class="LineNum">520</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* &lt;p&gt;</td>
<td class="LineNum">520</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* &lt;p&gt;</td></tr>
<tr><td class="LineNum">521</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Gets the number of elements of this structure, which is supposed to be a list.</td>
<td class="LineNum">521</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Gets the number of elements of this structure, which is supposed to be a list.</td></tr>
<tr><td class="LineNum">522</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* If the callee structure is not a list, throws an &lt;code&gt;UnsupportedOperationException&lt;/code&gt;</td>
<td class="LineNum">522</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* If the callee structure is not a list, throws an &lt;code&gt;UnsupportedOperationException&lt;/code&gt;</td></tr>
<tr><td class="LineNum">523</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* &lt;/p&gt;</td>
<td class="LineNum">523</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* &lt;/p&gt;</td></tr>
<tr><td class="LineNum">524</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td>
<td class="LineNum">524</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td></tr>
<tr><td class="LineNum">525</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public int listSize() {</td>
<td class="LineNum">525</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public int listSize() {</td></tr>
<tr><td class="LineNum">526</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!isList())</td>
<td class="LineNum">526</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!isList())</td></tr>
<tr><td class="LineNum">527</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new UnsupportedOperationException("The structure " + this + " is not a list.");</td>
<td class="LineNum">527</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new UnsupportedOperationException("The structure " + this + " is not a list.");</td></tr>
<tr><td class="LineNum">528</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Struct t = this;</td>
<td class="LineNum">528</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Struct t = this;</td></tr>
<tr><td class="LineNum">529</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int count = 0;</td>
<td class="LineNum">529</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int count = 0;</td></tr>
<tr><td class="LineNum">530</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (!t.isEmptyList()) {</td>
<td class="LineNum">530</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (!t.isEmptyList()) {</td></tr>
<tr><td class="LineNum">531</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count++;</td>
<td class="LineNum">531</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;count++;</td></tr>
<tr><td class="LineNum">532</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t = (Struct) t.arg[1].getTerm();</td>
<td class="LineNum">532</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t = (Struct) t.arg[1].getTerm();</td></tr>
<tr><td class="LineNum">533</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">533</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">534</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return count;</td>
<td class="LineNum">534</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return count;</td></tr>
<tr><td class="LineNum">535</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">535</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">536</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">536</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">537</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td>
<td class="LineNum">537</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td></tr>
<tr><td class="LineNum">538</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Gets an iterator on the elements of this structure, which is supposed to be a list.</td>
<td class="LineNum">538</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Gets an iterator on the elements of this structure, which is supposed to be a list.</td></tr>
<tr><td class="LineNum">539</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* </td>
<td class="LineNum">539</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* </td></tr>
<tr><td class="LineNum">540</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* &lt;p&gt;</td>
<td class="LineNum">540</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* &lt;p&gt;</td></tr>
<tr><td class="LineNum">541</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Gets an iterator on the elements of this structure, which is supposed to be a list.</td>
<td class="LineNum">541</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Gets an iterator on the elements of this structure, which is supposed to be a list.</td></tr>
<tr><td class="LineNum">542</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* If the callee structure is not a list, throws an &lt;code&gt;UnsupportedOperationException&lt;/code&gt;</td>
<td class="LineNum">542</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* If the callee structure is not a list, throws an &lt;code&gt;UnsupportedOperationException&lt;/code&gt;</td></tr>
<tr><td class="LineNum">543</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* &lt;/p&gt;</td>
<td class="LineNum">543</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* &lt;/p&gt;</td></tr>
<tr><td class="LineNum">544</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td>
<td class="LineNum">544</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td></tr>
<tr><td class="LineNum">545</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public java.util.Iterator listIterator() {</td>
<td class="LineNum">545</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public java.util.Iterator listIterator() {</td></tr>
<tr><td class="LineNum">546</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!isList())</td>
<td class="LineNum">546</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!isList())</td></tr>
<tr><td class="LineNum">547</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new UnsupportedOperationException("The structure " + this + " is not a list.");</td>
<td class="LineNum">547</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new UnsupportedOperationException("The structure " + this + " is not a list.");</td></tr>
<tr><td class="LineNum">548</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return new StructIterator(this);</td>
<td class="LineNum">548</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return new StructIterator(this);</td></tr>
<tr><td class="LineNum">549</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">549</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">550</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">550</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">551</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;// hidden services</td>
<td class="LineNum">551</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;// hidden services</td></tr>
<tr><td class="LineNum">552</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">552</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">553</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td>
<td class="LineNum">553</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td></tr>
<tr><td class="LineNum">554</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Gets a list Struct representation, with the functor as first element.</td>
<td class="LineNum">554</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Gets a list Struct representation, with the functor as first element.</td></tr>
<tr><td class="LineNum">555</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td>
<td class="LineNum">555</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td></tr>
<tr><td class="LineNum">556</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;Struct toList() {</td>
<td class="LineNum">556</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;Struct toList() {</td></tr>
<tr><td class="LineNum">557</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Struct t = new Struct();</td>
<td class="LineNum">557</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Struct t = new Struct();</td></tr>
<tr><td class="LineNum">558</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(int c = arity - 1;c &gt;= 0;c--) {</td>
<td class="LineNum">558</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for(int c = arity - 1;c &gt;= 0;c--) {</td></tr>
<tr><td class="LineNum">559</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t = new Struct(arg[c].getTerm(),t);</td>
<td class="LineNum">559</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t = new Struct(arg[c].getTerm(),t);</td></tr>
<tr><td class="LineNum">560</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">560</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">561</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return new Struct(new Struct(name),t);</td>
<td class="LineNum">561</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return new Struct(new Struct(name),t);</td></tr>
<tr><td class="LineNum">562</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">562</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">563</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">563</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">564</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">564</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">565</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td>
<td class="LineNum">565</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td></tr>
<tr><td class="LineNum">566</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Gets a flat Struct from this structure considered as a List</td>
<td class="LineNum">566</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Gets a flat Struct from this structure considered as a List</td></tr>
<tr><td class="LineNum">567</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*</td>
<td class="LineNum">567</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*</td></tr>
<tr><td class="LineNum">568</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* If this structure is not a list, null object is returned</td>
<td class="LineNum">568</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* If this structure is not a list, null object is returned</td></tr>
<tr><td class="LineNum">569</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td>
<td class="LineNum">569</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td></tr>
<tr><td class="LineNum">570</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;Struct fromList() {</td>
<td class="LineNum">570</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;Struct fromList() {</td></tr>
<tr><td class="LineNum">571</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Term ft = arg[0].getTerm();</td>
<td class="LineNum">571</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Term ft = arg[0].getTerm();</td></tr>
<tr><td class="LineNum">572</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!ft.isAtom()) {</td>
<td class="LineNum">572</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!ft.isAtom()) {</td></tr>
<tr><td class="LineNum">573</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return null;</td>
<td class="LineNum">573</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return null;</td></tr>
<tr><td class="LineNum">574</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">574</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">575</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Struct at = (Struct) arg[1].getTerm();</td>
<td class="LineNum">575</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Struct at = (Struct) arg[1].getTerm();</td></tr>
<tr><td class="LineNum">576</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LinkedList al = new LinkedList();</td>
<td class="LineNum">576</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LinkedList al = new LinkedList();</td></tr>
<tr><td class="LineNum">577</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (!at.isEmptyList()) {</td>
<td class="LineNum">577</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (!at.isEmptyList()) {</td></tr>
<tr><td class="LineNum">578</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!at.isList()) {</td>
<td class="LineNum">578</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!at.isList()) {</td></tr>
<tr><td class="LineNum">579</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return null;</td>
<td class="LineNum">579</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return null;</td></tr>
<tr><td class="LineNum">580</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">580</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">581</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;al.addLast(at.getTerm(0));</td>
<td class="LineNum">581</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;al.addLast(at.getTerm(0));</td></tr>
<tr><td class="LineNum">582</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at = (Struct) at.getTerm(1);</td>
<td class="LineNum">582</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;at = (Struct) at.getTerm(1);</td></tr>
<tr><td class="LineNum">583</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">583</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">584</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return new Struct(((Struct) ft).name, al);</td>
<td class="LineNum">584</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return new Struct(((Struct) ft).name, al);</td></tr>
<tr><td class="LineNum">585</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">585</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">586</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">586</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">587</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">587</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">588</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td>
<td class="LineNum">588</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td></tr>
<tr><td class="LineNum">589</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Appends an element to this structure supposed to be a list</td>
<td class="LineNum">589</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Appends an element to this structure supposed to be a list</td></tr>
<tr><td class="LineNum">590</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td>
<td class="LineNum">590</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td></tr>
<tr><td class="LineNum">591</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public void append(Term t) {</td>
<td class="LineNum">591</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public void append(Term t) {</td></tr>
<tr><td class="LineNum">592</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (isEmptyList()) {</td>
<td class="LineNum">592</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (isEmptyList()) {</td></tr>
<tr><td class="LineNum">593</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name = ".";</td>
<td class="LineNum">593</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name = ".";</td></tr>
<tr><td class="LineNum">594</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arity = 2;</td>
<td class="LineNum">594</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arity = 2;</td></tr>
<tr><td class="LineNum">595</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;predicateIndicator = name + "/" + arity; /* Added by Paolo Contessi */</td>
<td class="LineNum">595</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;predicateIndicator = name + "/" + arity; /* Added by Paolo Contessi */</td></tr>
<tr><td class="LineNum">596</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arg = new Term[arity];</td>
<td class="LineNum">596</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arg = new Term[arity];</td></tr>
<tr><td class="LineNum">597</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arg[0] = t; arg[1] = new Struct();</td>
<td class="LineNum">597</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arg[0] = t; arg[1] = new Struct();</td></tr>
<tr><td class="LineNum">598</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else if (arg[1].isList()) {</td>
<td class="LineNum">598</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else if (arg[1].isList()) {</td></tr>
<tr><td class="LineNum">599</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((Struct) arg[1]).append(t);</td>
<td class="LineNum">599</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((Struct) arg[1]).append(t);</td></tr>
<tr><td class="LineNum">600</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {</td>
<td class="LineNum">600</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {</td></tr>
<tr><td class="LineNum">601</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arg[1] = t;</td>
<td class="LineNum">601</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arg[1] = t;</td></tr>
<tr><td class="LineNum">602</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">602</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">603</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">603</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">604</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">604</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">605</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">605</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">606</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td>
<td class="LineNum">606</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td></tr>
<tr><td class="LineNum">607</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Inserts (at the head) an element to this structure supposed to be a list</td>
<td class="LineNum">607</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Inserts (at the head) an element to this structure supposed to be a list</td></tr>
<tr><td class="LineNum">608</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td>
<td class="LineNum">608</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td></tr>
<tr><td class="LineNum">609</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;void insert(Term t) {</td>
<td class="LineNum">609</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;void insert(Term t) {</td></tr>
<tr><td class="LineNum">610</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Struct co=new Struct();</td>
<td class="LineNum">610</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Struct co=new Struct();</td></tr>
<tr><td class="LineNum">611</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;co.arg[0]=arg[0];</td>
<td class="LineNum">611</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;co.arg[0]=arg[0];</td></tr>
<tr><td class="LineNum">612</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;co.arg[1]=arg[1];</td>
<td class="LineNum">612</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;co.arg[1]=arg[1];</td></tr>
<tr><td class="LineNum">613</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arg[0] = t;</td>
<td class="LineNum">613</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arg[0] = t;</td></tr>
<tr><td class="LineNum">614</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arg[1] = co;</td>
<td class="LineNum">614</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arg[1] = co;</td></tr>
<tr><td class="LineNum">615</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">615</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">616</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">616</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">617</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;//</td>
<td class="LineNum">617</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;//</td></tr>
<tr><td class="LineNum">618</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">618</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">619</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td>
<td class="LineNum">619</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td></tr>
<tr><td class="LineNum">620</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Try to unify two terms</td>
<td class="LineNum">620</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Try to unify two terms</td></tr>
<tr><td class="LineNum">621</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @param t the term to unify</td>
<td class="LineNum">621</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @param t the term to unify</td></tr>
<tr><td class="LineNum">622</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @param vl1 list of variables unified</td>
<td class="LineNum">622</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @param vl1 list of variables unified</td></tr>
<tr><td class="LineNum">623</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @param vl2 list of variables unified</td>
<td class="LineNum">623</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @param vl2 list of variables unified</td></tr>
<tr><td class="LineNum">624</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @return true if the term is unifiable with this one</td>
<td class="LineNum">624</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @return true if the term is unifiable with this one</td></tr>
<tr><td class="LineNum">625</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td>
<td class="LineNum">625</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td></tr>
<tr><td class="LineNum">626</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;boolean unify(List vl1,List vl2,Term t) {</td>
<td class="LineNum">626</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;boolean unify(List vl1,List vl2,Term t) {</td></tr>
<tr><td class="LineNum">627</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// In fase di unificazione bisogna annotare tutte le variabili della struct completa.</td>
<td class="LineNum">627</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// In fase di unificazione bisogna annotare tutte le variabili della struct completa.</td></tr>
<tr><td class="LineNum">628</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t = t.getTerm();</td>
<td class="LineNum">628</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t = t.getTerm();</td></tr>
<tr><td class="LineNum">629</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (t instanceof Struct) {</td>
<td class="LineNum">629</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (t instanceof Struct) {</td></tr>
<tr><td class="LineNum">630</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Struct ts = (Struct) t;</td>
<td class="LineNum">630</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Struct ts = (Struct) t;</td></tr>
<tr><td class="LineNum">631</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ( arity == ts.arity && name.equals(ts.name)) {</td>
<td class="LineNum">631</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ( arity == ts.arity && name.equals(ts.name)) {</td></tr>
<tr><td class="LineNum">632</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (int c = 0;c &lt; arity;c++) {</td>
<td class="LineNum">632</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (int c = 0;c &lt; arity;c++) {</td></tr>
<tr><td class="LineNum">633</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!arg[c].unify(vl1,vl2,ts.arg[c])) {</td>
<td class="LineNum">633</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!arg[c].unify(vl1,vl2,ts.arg[c])) {</td></tr>
<tr><td class="LineNum">634</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;</td>
<td class="LineNum">634</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;</td></tr>
<tr><td class="LineNum">635</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">635</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">636</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">636</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">637</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;</td>
<td class="LineNum">637</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;</td></tr>
<tr><td class="LineNum">638</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">638</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">639</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else if (t instanceof Var) {</td>
<td class="LineNum">639</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else if (t instanceof Var) {</td></tr>
<tr><td class="LineNum">640</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return t.unify(vl2, vl1, this);</td>
<td class="LineNum">640</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return t.unify(vl2, vl1, this);</td></tr>
<tr><td class="LineNum">641</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">641</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">642</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;</td>
<td class="LineNum">642</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;</td></tr>
<tr><td class="LineNum">643</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">643</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">644</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">644</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">645</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">645</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">646</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/** dummy method */</td>
<td class="LineNum">646</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/** dummy method */</td></tr>
<tr><td class="LineNum">647</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public void free() {}</td>
<td class="LineNum">647</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public void free() {}</td></tr>
<tr><td class="LineNum">648</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">648</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">649</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;//</td>
<td class="LineNum">649</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;//</td></tr>
<tr><td class="LineNum">650</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">650</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">651</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td>
<td class="LineNum">651</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td></tr>
<tr><td class="LineNum">652</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Set primitive behaviour associated at structure</td>
<td class="LineNum">652</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Set primitive behaviour associated at structure</td></tr>
<tr><td class="LineNum">653</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td>
<td class="LineNum">653</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td></tr>
<tr><td class="LineNum">654</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;void setPrimitive(PrimitiveInfo b) {</td>
<td class="LineNum">654</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;void setPrimitive(PrimitiveInfo b) {</td></tr>
<tr><td class="LineNum">655</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;primitive = b;</td>
<td class="LineNum">655</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;primitive = b;</td></tr>
<tr><td class="LineNum">656</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">656</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">657</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">657</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">658</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td>
<td class="LineNum">658</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td></tr>
<tr><td class="LineNum">659</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Get primitive behaviour associated at structure</td>
<td class="LineNum">659</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Get primitive behaviour associated at structure</td></tr>
<tr><td class="LineNum">660</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td>
<td class="LineNum">660</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td></tr>
<tr><td class="LineNum">661</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public PrimitiveInfo getPrimitive() {</td>
<td class="LineNum">661</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public PrimitiveInfo getPrimitive() {</td></tr>
<tr><td class="LineNum">662</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return primitive;</td>
<td class="LineNum">662</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return primitive;</td></tr>
<tr><td class="LineNum">663</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">663</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">664</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">664</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">665</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td>
<td class="LineNum">665</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td></tr>
<tr><td class="LineNum">666</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Check if this term is a primitive struct</td>
<td class="LineNum">666</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Check if this term is a primitive struct</td></tr>
<tr><td class="LineNum">667</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td>
<td class="LineNum">667</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td></tr>
<tr><td class="LineNum">668</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public boolean isPrimitive() {</td>
<td class="LineNum">668</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public boolean isPrimitive() {</td></tr>
<tr><td class="LineNum">669</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return primitive != null;</td>
<td class="LineNum">669</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return primitive != null;</td></tr>
<tr><td class="LineNum">670</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">670</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">671</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">671</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">672</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;//</td>
<td class="LineNum">672</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;//</td></tr>
<tr><td class="LineNum">673</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">673</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">674</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td>
<td class="LineNum">674</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td></tr>
<tr><td class="LineNum">675</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Gets the string representation of this structure</td>
<td class="LineNum">675</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Gets the string representation of this structure</td></tr>
<tr><td class="LineNum">676</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*</td>
<td class="LineNum">676</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*</td></tr>
<tr><td class="LineNum">677</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Specific representations are provided for lists and atoms.</td>
<td class="LineNum">677</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Specific representations are provided for lists and atoms.</td></tr>
<tr><td class="LineNum">678</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Names starting with upper case letter are enclosed in apices.</td>
<td class="LineNum">678</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Names starting with upper case letter are enclosed in apices.</td></tr>
<tr><td class="LineNum">679</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td>
<td class="LineNum">679</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td></tr>
<tr><td class="LineNum">680</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public String toString() {</td>
<td class="LineNum">680</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public String toString() {</td></tr>
<tr><td class="LineNum">681</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// empty list case</td>
<td class="LineNum">681</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// empty list case</td></tr>
<tr><td class="LineNum">682</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (isEmptyList()) return "[]";</td>
<td class="LineNum">682</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (isEmptyList()) return "[]";</td></tr>
<tr><td class="LineNum">683</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// list case</td>
<td class="LineNum">683</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// list case</td></tr>
<tr><td class="LineNum">684</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (name.equals(".") && arity == 2) {</td>
<td class="LineNum">684</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (name.equals(".") && arity == 2) {</td></tr>
<tr><td class="LineNum">685</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ("[" + toString0() + "]");</td>
<td class="LineNum">685</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ("[" + toString0() + "]");</td></tr>
<tr><td class="LineNum">686</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else if (name.equals("{}")) {</td>
<td class="LineNum">686</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else if (name.equals("{}")) {</td></tr>
<tr><td class="LineNum">687</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ("{" + toString0_bracket() + "}");</td>
<td class="LineNum">687</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ("{" + toString0_bracket() + "}");</td></tr>
<tr><td class="LineNum">688</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {</td>
<td class="LineNum">688</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {</td></tr>
<tr><td class="LineNum">689</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String s = (Parser.isAtom(name) ? name : "'" + name + "'");</td>
<td class="LineNum">689</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String s = (Parser.isAtom(name) ? name : "'" + name + "'");</td></tr>
<tr><td class="LineNum">690</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (arity &gt; 0) {</td>
<td class="LineNum">690</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (arity &gt; 0) {</td></tr>
<tr><td class="LineNum">691</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s = s + "(";</td>
<td class="LineNum">691</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s = s + "(";</td></tr>
<tr><td class="LineNum">692</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (int c = 1;c &lt; arity;c++) {</td>
<td class="LineNum">692</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (int c = 1;c &lt; arity;c++) {</td></tr>
<tr><td class="LineNum">693</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!(arg[c - 1] instanceof Var)) {</td>
<td class="LineNum">693</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!(arg[c - 1] instanceof Var)) {</td></tr>
<tr><td class="LineNum">694</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s = s + arg[c - 1].toString() + ",";</td>
<td class="LineNum">694</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s = s + arg[c - 1].toString() + ",";</td></tr>
<tr><td class="LineNum">695</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {</td>
<td class="LineNum">695</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {</td></tr>
<tr><td class="LineNum">696</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s = s + ((Var)arg[c - 1]).toStringFlattened() + ",";</td>
<td class="LineNum">696</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s = s + ((Var)arg[c - 1]).toStringFlattened() + ",";</td></tr>
<tr><td class="LineNum">697</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">697</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">698</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">698</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">699</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!(arg[arity - 1] instanceof Var)) {</td>
<td class="LineNum">699</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!(arg[arity - 1] instanceof Var)) {</td></tr>
<tr><td class="LineNum">700</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s = s + arg[arity - 1].toString() + ")";</td>
<td class="LineNum">700</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s = s + arg[arity - 1].toString() + ")";</td></tr>
<tr><td class="LineNum">701</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {</td>
<td class="LineNum">701</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {</td></tr>
<tr><td class="LineNum">702</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s = s + ((Var)arg[arity - 1]).toStringFlattened() + ")";</td>
<td class="LineNum">702</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s = s + ((Var)arg[arity - 1]).toStringFlattened() + ")";</td></tr>
<tr><td class="LineNum">703</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">703</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">704</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">704</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">705</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return s;</td>
<td class="LineNum">705</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return s;</td></tr>
<tr><td class="LineNum">706</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">706</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">707</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">707</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">708</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">708</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">709</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;private String toString0() {</td>
<td class="LineNum">709</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;private String toString0() {</td></tr>
<tr><td class="LineNum">710</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Term h = arg[0].getTerm();</td>
<td class="LineNum">710</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Term h = arg[0].getTerm();</td></tr>
<tr><td class="LineNum">711</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Term t = arg[1].getTerm();</td>
<td class="LineNum">711</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Term t = arg[1].getTerm();</td></tr>
<tr><td class="LineNum">712</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (t.isList()) {</td>
<td class="LineNum">712</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (t.isList()) {</td></tr>
<tr><td class="LineNum">713</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Struct tl = (Struct) t;</td>
<td class="LineNum">713</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Struct tl = (Struct) t;</td></tr>
<tr><td class="LineNum">714</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (tl.isEmptyList()) {</td>
<td class="LineNum">714</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (tl.isEmptyList()) {</td></tr>
<tr><td class="LineNum">715</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return h.toString();</td>
<td class="LineNum">715</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return h.toString();</td></tr>
<tr><td class="LineNum">716</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">716</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">717</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (h instanceof Var) {</td>
<td class="LineNum">717</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (h instanceof Var) {</td></tr>
<tr><td class="LineNum">718</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return (((Var)h).toStringFlattened() + "," + tl.toString0());</td>
<td class="LineNum">718</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return (((Var)h).toStringFlattened() + "," + tl.toString0());</td></tr>
<tr><td class="LineNum">719</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {</td>
<td class="LineNum">719</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {</td></tr>
<tr><td class="LineNum">720</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return (h.toString() + "," + tl.toString0());</td>
<td class="LineNum">720</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return (h.toString() + "," + tl.toString0());</td></tr>
<tr><td class="LineNum">721</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">721</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">722</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {</td>
<td class="LineNum">722</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {</td></tr>
<tr><td class="LineNum">723</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String h0;</td>
<td class="LineNum">723</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String h0;</td></tr>
<tr><td class="LineNum">724</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String t0;</td>
<td class="LineNum">724</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String t0;</td></tr>
<tr><td class="LineNum">725</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (h instanceof Var) {</td>
<td class="LineNum">725</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (h instanceof Var) {</td></tr>
<tr><td class="LineNum">726</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;h0 = ((Var)h).toStringFlattened();</td>
<td class="LineNum">726</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;h0 = ((Var)h).toStringFlattened();</td></tr>
<tr><td class="LineNum">727</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {</td>
<td class="LineNum">727</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {</td></tr>
<tr><td class="LineNum">728</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;h0 = h.toString();</td>
<td class="LineNum">728</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;h0 = h.toString();</td></tr>
<tr><td class="LineNum">729</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">729</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">730</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (t instanceof Var) {</td>
<td class="LineNum">730</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (t instanceof Var) {</td></tr>
<tr><td class="LineNum">731</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t0 = ((Var)t).toStringFlattened();</td>
<td class="LineNum">731</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t0 = ((Var)t).toStringFlattened();</td></tr>
<tr><td class="LineNum">732</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {</td>
<td class="LineNum">732</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {</td></tr>
<tr><td class="LineNum">733</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t0 = t.toString();</td>
<td class="LineNum">733</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t0 = t.toString();</td></tr>
<tr><td class="LineNum">734</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">734</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">735</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return (h0 + "|" + t0);</td>
<td class="LineNum">735</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return (h0 + "|" + t0);</td></tr>
<tr><td class="LineNum">736</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">736</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">737</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">737</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">738</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">738</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">739</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;private String toString0_bracket() {</td>
<td class="LineNum">739</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;private String toString0_bracket() {</td></tr>
<tr><td class="LineNum">740</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (arity == 0) {</td>
<td class="LineNum">740</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (arity == 0) {</td></tr>
<tr><td class="LineNum">741</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return "";</td>
<td class="LineNum">741</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return "";</td></tr>
<tr><td class="LineNum">742</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else if (arity==1 && !((arg[0] instanceof Struct) && ((Struct)arg[0]).getName().equals(","))){</td>
<td class="LineNum">742</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else if (arity==1 && !((arg[0] instanceof Struct) && ((Struct)arg[0]).getName().equals(","))){</td></tr>
<tr><td class="LineNum">743</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return arg[0].getTerm().toString();</td>
<td class="LineNum">743</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return arg[0].getTerm().toString();</td></tr>
<tr><td class="LineNum">744</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {</td>
<td class="LineNum">744</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {</td></tr>
<tr><td class="LineNum">745</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// comma case </td>
<td class="LineNum">745</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// comma case </td></tr>
<tr><td class="LineNum">746</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Term head = ((Struct)arg[0]).getTerm(0);</td>
<td class="LineNum">746</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Term head = ((Struct)arg[0]).getTerm(0);</td></tr>
<tr><td class="LineNum">747</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Term tail = ((Struct)arg[0]).getTerm(1);</td>
<td class="LineNum">747</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Term tail = ((Struct)arg[0]).getTerm(1);</td></tr>
<tr><td class="LineNum">748</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;StringBuffer buf = new StringBuffer(head.toString());</td>
<td class="LineNum">748</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;StringBuffer buf = new StringBuffer(head.toString());</td></tr>
<tr><td class="LineNum">749</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (tail instanceof Struct && ((Struct)tail).getName().equals(",")){</td>
<td class="LineNum">749</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (tail instanceof Struct && ((Struct)tail).getName().equals(",")){</td></tr>
<tr><td class="LineNum">750</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;head = ((Struct)tail).getTerm(0);</td>
<td class="LineNum">750</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;head = ((Struct)tail).getTerm(0);</td></tr>
<tr><td class="LineNum">751</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(","+head.toString());</td>
<td class="LineNum">751</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(","+head.toString());</td></tr>
<tr><td class="LineNum">752</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tail = ((Struct)tail).getTerm(1);</td>
<td class="LineNum">752</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tail = ((Struct)tail).getTerm(1);</td></tr>
<tr><td class="LineNum">753</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">753</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">754</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(","+tail.toString());</td>
<td class="LineNum">754</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;buf.append(","+tail.toString());</td></tr>
<tr><td class="LineNum">755</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return buf.toString();</td>
<td class="LineNum">755</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return buf.toString();</td></tr>
<tr><td class="LineNum">756</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//  return arg[0]+","+((Struct)arg[1]).toString0_bracket();</td>
<td class="LineNum">756</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//  return arg[0]+","+((Struct)arg[1]).toString0_bracket();</td></tr>
<tr><td class="LineNum">757</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">757</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">758</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">758</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">759</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">759</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">760</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;private String toStringAsList(OperatorManager op) {</td>
<td class="LineNum">760</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;private String toStringAsList(OperatorManager op) {</td></tr>
<tr><td class="LineNum">761</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Term h = arg[0];</td>
<td class="LineNum">761</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Term h = arg[0];</td></tr>
<tr><td class="LineNum">762</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Term t = arg[1].getTerm();</td>
<td class="LineNum">762</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Term t = arg[1].getTerm();</td></tr>
<tr><td class="LineNum">763</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (t.isList()) {</td>
<td class="LineNum">763</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (t.isList()) {</td></tr>
<tr><td class="LineNum">764</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Struct tl = (Struct)t;</td>
<td class="LineNum">764</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Struct tl = (Struct)t;</td></tr>
<tr><td class="LineNum">765</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (tl.isEmptyList()){</td>
<td class="LineNum">765</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (tl.isEmptyList()){</td></tr>
<tr><td class="LineNum">766</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return h.toStringAsArgY(op,0);</td>
<td class="LineNum">766</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return h.toStringAsArgY(op,0);</td></tr>
<tr><td class="LineNum">767</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">767</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">768</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return (h.toStringAsArgY(op,0) + "," + tl.toStringAsList(op));</td>
<td class="LineNum">768</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return (h.toStringAsArgY(op,0) + "," + tl.toStringAsList(op));</td></tr>
<tr><td class="LineNum">769</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {</td>
<td class="LineNum">769</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {</td></tr>
<tr><td class="LineNum">770</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return (h.toStringAsArgY(op,0) + "|" + t.toStringAsArgY(op,0));</td>
<td class="LineNum">770</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return (h.toStringAsArgY(op,0) + "|" + t.toStringAsArgY(op,0));</td></tr>
<tr><td class="LineNum">771</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">771</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">772</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">772</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">773</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">773</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">774</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;String toStringAsArg(OperatorManager op,int prio,boolean x) {</td>
<td class="LineNum">774</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;String toStringAsArg(OperatorManager op,int prio,boolean x) {</td></tr>
<tr><td class="LineNum">775</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int      p = 0;</td>
<td class="LineNum">775</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int      p = 0;</td></tr>
<tr><td class="LineNum">776</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String   v = "";</td>
<td class="LineNum">776</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String   v = "";</td></tr>
<tr><td class="LineNum">777</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">777</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">778</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (name.equals(".") && arity == 2) {</td>
<td class="LineNum">778</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (name.equals(".") && arity == 2) {</td></tr>
<tr><td class="LineNum">779</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (arg[0].isEmptyList()) {</td>
<td class="LineNum">779</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (arg[0].isEmptyList()) {</td></tr>
<tr><td class="LineNum">780</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return("[]");</td>
<td class="LineNum">780</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return("[]");</td></tr>
<tr><td class="LineNum">781</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {</td>
<td class="LineNum">781</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {</td></tr>
<tr><td class="LineNum">782</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return("[" + toStringAsList(op) + "]");</td>
<td class="LineNum">782</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return("[" + toStringAsList(op) + "]");</td></tr>
<tr><td class="LineNum">783</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">783</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">784</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else if (name.equals("{}")) {</td>
<td class="LineNum">784</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else if (name.equals("{}")) {</td></tr>
<tr><td class="LineNum">785</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return("{" + toString0_bracket() + "}");</td>
<td class="LineNum">785</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return("{" + toString0_bracket() + "}");</td></tr>
<tr><td class="LineNum">786</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">786</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">787</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">787</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">788</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (arity == 2) {</td>
<td class="LineNum">788</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (arity == 2) {</td></tr>
<tr><td class="LineNum">789</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ((p = op.opPrio(name,"xfx")) &gt;= OperatorManager.OP_LOW) {</td>
<td class="LineNum">789</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ((p = op.opPrio(name,"xfx")) &gt;= OperatorManager.OP_LOW) {</td></tr>
<tr><td class="LineNum">790</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(</td>
<td class="LineNum">790</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(</td></tr>
<tr><td class="LineNum">791</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(((x && p &gt;= prio) || (!x && p &gt; prio)) ? "(" : "") +</td>
<td class="LineNum">791</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(((x && p &gt;= prio) || (!x && p &gt; prio)) ? "(" : "") +</td></tr>
<tr><td class="LineNum">792</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arg[0].toStringAsArgX(op,p) +</td>
<td class="LineNum">792</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arg[0].toStringAsArgX(op,p) +</td></tr>
<tr><td class="LineNum">793</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" " + name + " "      +</td>
<td class="LineNum">793</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" " + name + " "      +</td></tr>
<tr><td class="LineNum">794</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arg[1].toStringAsArgX(op,p) +</td>
<td class="LineNum">794</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arg[1].toStringAsArgX(op,p) +</td></tr>
<tr><td class="LineNum">795</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(((x && p &gt;= prio) || (!x && p &gt; prio)) ? ")" : ""));</td>
<td class="LineNum">795</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(((x && p &gt;= prio) || (!x && p &gt; prio)) ? ")" : ""));</td></tr>
<tr><td class="LineNum">796</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">796</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">797</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ((p = op.opPrio(name,"yfx")) &gt;= OperatorManager.OP_LOW) {</td>
<td class="LineNum">797</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ((p = op.opPrio(name,"yfx")) &gt;= OperatorManager.OP_LOW) {</td></tr>
<tr><td class="LineNum">798</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(</td>
<td class="LineNum">798</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(</td></tr>
<tr><td class="LineNum">799</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(((x && p &gt;= prio) || (!x && p &gt; prio)) ? "(" : "") +</td>
<td class="LineNum">799</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(((x && p &gt;= prio) || (!x && p &gt; prio)) ? "(" : "") +</td></tr>
<tr><td class="LineNum">800</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arg[0].toStringAsArgY(op,p) +</td>
<td class="LineNum">800</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arg[0].toStringAsArgY(op,p) +</td></tr>
<tr><td class="LineNum">801</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" " + name + " "      +</td>
<td class="LineNum">801</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" " + name + " "      +</td></tr>
<tr><td class="LineNum">802</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arg[1].toStringAsArgX(op,p) +</td>
<td class="LineNum">802</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arg[1].toStringAsArgX(op,p) +</td></tr>
<tr><td class="LineNum">803</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(((x && p &gt;= prio) || (!x && p &gt; prio)) ? ")" : ""));</td>
<td class="LineNum">803</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(((x && p &gt;= prio) || (!x && p &gt; prio)) ? ")" : ""));</td></tr>
<tr><td class="LineNum">804</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">804</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">805</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ((p = op.opPrio(name,"xfy")) &gt;= OperatorManager.OP_LOW) {</td>
<td class="LineNum">805</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ((p = op.opPrio(name,"xfy")) &gt;= OperatorManager.OP_LOW) {</td></tr>
<tr><td class="LineNum">806</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!name.equals(",")) {</td>
<td class="LineNum">806</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!name.equals(",")) {</td></tr>
<tr><td class="LineNum">807</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(</td>
<td class="LineNum">807</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(</td></tr>
<tr><td class="LineNum">808</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(((x && p &gt;= prio) || (!x && p &gt; prio)) ? "(" : "") +</td>
<td class="LineNum">808</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(((x && p &gt;= prio) || (!x && p &gt; prio)) ? "(" : "") +</td></tr>
<tr><td class="LineNum">809</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arg[0].toStringAsArgX(op,p) +</td>
<td class="LineNum">809</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arg[0].toStringAsArgX(op,p) +</td></tr>
<tr><td class="LineNum">810</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" " + name + " "      +</td>
<td class="LineNum">810</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" " + name + " "      +</td></tr>
<tr><td class="LineNum">811</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arg[1].toStringAsArgY(op,p) +</td>
<td class="LineNum">811</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arg[1].toStringAsArgY(op,p) +</td></tr>
<tr><td class="LineNum">812</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(((x && p &gt;= prio) || (!x && p &gt; prio)) ? ")" : ""));</td>
<td class="LineNum">812</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(((x && p &gt;= prio) || (!x && p &gt; prio)) ? ")" : ""));</td></tr>
<tr><td class="LineNum">813</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {</td>
<td class="LineNum">813</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {</td></tr>
<tr><td class="LineNum">814</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(</td>
<td class="LineNum">814</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(</td></tr>
<tr><td class="LineNum">815</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(((x && p &gt;= prio) || (!x && p &gt; prio)) ? "(" : "") +</td>
<td class="LineNum">815</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(((x && p &gt;= prio) || (!x && p &gt; prio)) ? "(" : "") +</td></tr>
<tr><td class="LineNum">816</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arg[0].toStringAsArgX(op,p) +</td>
<td class="LineNum">816</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arg[0].toStringAsArgX(op,p) +</td></tr>
<tr><td class="LineNum">817</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//",\n\t"+</td>
<td class="LineNum">817</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//",\n\t"+</td></tr>
<tr><td class="LineNum">818</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;","+</td>
<td class="LineNum">818</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;","+</td></tr>
<tr><td class="LineNum">819</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arg[1].toStringAsArgY(op,p) +</td>
<td class="LineNum">819</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arg[1].toStringAsArgY(op,p) +</td></tr>
<tr><td class="LineNum">820</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(((x && p &gt;= prio) || (!x && p &gt; prio)) ? ")" : ""));</td>
<td class="LineNum">820</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(((x && p &gt;= prio) || (!x && p &gt; prio)) ? ")" : ""));</td></tr>
<tr><td class="LineNum">821</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">821</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">822</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">822</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">823</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">823</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">824</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (arity == 1) {</td>
<td class="LineNum">824</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (arity == 1) {</td></tr>
<tr><td class="LineNum">825</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ((p = op.opPrio(name,"fx")) &gt;= OperatorManager.OP_LOW) {</td>
<td class="LineNum">825</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ((p = op.opPrio(name,"fx")) &gt;= OperatorManager.OP_LOW) {</td></tr>
<tr><td class="LineNum">826</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(</td>
<td class="LineNum">826</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(</td></tr>
<tr><td class="LineNum">827</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(((x && p &gt;= prio) || (!x && p &gt; prio)) ? "(" : "") +</td>
<td class="LineNum">827</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(((x && p &gt;= prio) || (!x && p &gt; prio)) ? "(" : "") +</td></tr>
<tr><td class="LineNum">828</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name + " "            +</td>
<td class="LineNum">828</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name + " "            +</td></tr>
<tr><td class="LineNum">829</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arg[0].toStringAsArgX(op,p) +</td>
<td class="LineNum">829</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arg[0].toStringAsArgX(op,p) +</td></tr>
<tr><td class="LineNum">830</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(((x && p &gt;= prio) || (!x && p &gt; prio)) ? ")" : ""));</td>
<td class="LineNum">830</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(((x && p &gt;= prio) || (!x && p &gt; prio)) ? ")" : ""));</td></tr>
<tr><td class="LineNum">831</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">831</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">832</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ((p = op.opPrio(name,"fy")) &gt;= OperatorManager.OP_LOW) {</td>
<td class="LineNum">832</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ((p = op.opPrio(name,"fy")) &gt;= OperatorManager.OP_LOW) {</td></tr>
<tr><td class="LineNum">833</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(</td>
<td class="LineNum">833</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(</td></tr>
<tr><td class="LineNum">834</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(((x && p &gt;= prio) || (!x && p &gt; prio)) ? "(" : "") +</td>
<td class="LineNum">834</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(((x && p &gt;= prio) || (!x && p &gt; prio)) ? "(" : "") +</td></tr>
<tr><td class="LineNum">835</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name + " "            +</td>
<td class="LineNum">835</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;name + " "            +</td></tr>
<tr><td class="LineNum">836</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arg[0].toStringAsArgY(op,p) +</td>
<td class="LineNum">836</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arg[0].toStringAsArgY(op,p) +</td></tr>
<tr><td class="LineNum">837</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(((x && p &gt;= prio) || (!x && p &gt; prio)) ? ")" : ""));</td>
<td class="LineNum">837</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(((x && p &gt;= prio) || (!x && p &gt; prio)) ? ")" : ""));</td></tr>
<tr><td class="LineNum">838</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">838</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">839</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ((p = op.opPrio(name,"xf")) &gt;= OperatorManager.OP_LOW) {</td>
<td class="LineNum">839</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ((p = op.opPrio(name,"xf")) &gt;= OperatorManager.OP_LOW) {</td></tr>
<tr><td class="LineNum">840</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(</td>
<td class="LineNum">840</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(</td></tr>
<tr><td class="LineNum">841</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(((x && p &gt;= prio) || (!x && p &gt; prio)) ? "(" : "") +</td>
<td class="LineNum">841</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(((x && p &gt;= prio) || (!x && p &gt; prio)) ? "(" : "") +</td></tr>
<tr><td class="LineNum">842</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arg[0].toStringAsArgX(op,p) +</td>
<td class="LineNum">842</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arg[0].toStringAsArgX(op,p) +</td></tr>
<tr><td class="LineNum">843</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" " + name + " "      +</td>
<td class="LineNum">843</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" " + name + " "      +</td></tr>
<tr><td class="LineNum">844</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(((x && p &gt;= prio) || (!x && p &gt; prio)) ? ")" : ""));</td>
<td class="LineNum">844</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(((x && p &gt;= prio) || (!x && p &gt; prio)) ? ")" : ""));</td></tr>
<tr><td class="LineNum">845</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">845</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">846</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ((p = op.opPrio(name,"yf")) &gt;= OperatorManager.OP_LOW) {</td>
<td class="LineNum">846</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ((p = op.opPrio(name,"yf")) &gt;= OperatorManager.OP_LOW) {</td></tr>
<tr><td class="LineNum">847</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(</td>
<td class="LineNum">847</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return(</td></tr>
<tr><td class="LineNum">848</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(((x && p &gt;= prio) || (!x && p &gt; prio)) ? "(" : "") +</td>
<td class="LineNum">848</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(((x && p &gt;= prio) || (!x && p &gt; prio)) ? "(" : "") +</td></tr>
<tr><td class="LineNum">849</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arg[0].toStringAsArgY(op,p) +</td>
<td class="LineNum">849</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;arg[0].toStringAsArgY(op,p) +</td></tr>
<tr><td class="LineNum">850</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" " + name + " "      +</td>
<td class="LineNum">850</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;" " + name + " "      +</td></tr>
<tr><td class="LineNum">851</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(((x && p &gt;= prio) || (!x && p &gt; prio)) ? ")" : ""));</td>
<td class="LineNum">851</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(((x && p &gt;= prio) || (!x && p &gt; prio)) ? ")" : ""));</td></tr>
<tr><td class="LineNum">852</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">852</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">853</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">853</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">854</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v = (Parser.isAtom(name) ? name : "'" + name + "'");</td>
<td class="LineNum">854</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v = (Parser.isAtom(name) ? name : "'" + name + "'");</td></tr>
<tr><td class="LineNum">855</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (arity == 0) {</td>
<td class="LineNum">855</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (arity == 0) {</td></tr>
<tr><td class="LineNum">856</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return v;</td>
<td class="LineNum">856</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return v;</td></tr>
<tr><td class="LineNum">857</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">857</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">858</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v = v + "(";</td>
<td class="LineNum">858</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v = v + "(";</td></tr>
<tr><td class="LineNum">859</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (p = 1;p &lt; arity;p++) {</td>
<td class="LineNum">859</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (p = 1;p &lt; arity;p++) {</td></tr>
<tr><td class="LineNum">860</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v = v + arg[p - 1].toStringAsArgY(op,0) + ",";</td>
<td class="LineNum">860</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v = v + arg[p - 1].toStringAsArgY(op,0) + ",";</td></tr>
<tr><td class="LineNum">861</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">861</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">862</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v = v + arg[arity - 1].toStringAsArgY(op,0);</td>
<td class="LineNum">862</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v = v + arg[arity - 1].toStringAsArgY(op,0);</td></tr>
<tr><td class="LineNum">863</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v = v + ")";</td>
<td class="LineNum">863</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;v = v + ")";</td></tr>
<tr><td class="LineNum">864</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return v;</td>
<td class="LineNum">864</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return v;</td></tr>
<tr><td class="LineNum">865</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">865</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">866</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">866</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">867</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public Term iteratedGoalTerm() {</td>
<td class="LineNum">867</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public Term iteratedGoalTerm() {</td></tr>
<tr><td class="LineNum">868</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (name.equals("^") && arity == 2) {</td>
<td class="LineNum">868</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (name.equals("^") && arity == 2) {</td></tr>
<tr><td class="LineNum">869</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Term goal = getTerm(1);</td>
<td class="LineNum">869</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Term goal = getTerm(1);</td></tr>
<tr><td class="LineNum">870</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return goal.iteratedGoalTerm();</td>
<td class="LineNum">870</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return goal.iteratedGoalTerm();</td></tr>
<tr><td class="LineNum">871</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else</td>
<td class="LineNum">871</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else</td></tr>
<tr><td class="LineNum">872</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return super.iteratedGoalTerm();</td>
<td class="LineNum">872</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return super.iteratedGoalTerm();</td></tr>
<tr><td class="LineNum">873</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">873</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">874</td><td class="Same">&nbsp;</td>
<td class="LineNum">874</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">875</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;@Override</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">876</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;public void accept(TermVisitor tv) {</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">877</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tv.visit(this);</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">878</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;}   </td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">879</td><td class="Same">}</td>
<td class="LineNum">875</td><td class="Same">}</td></tr>

</table>


</body></html>
