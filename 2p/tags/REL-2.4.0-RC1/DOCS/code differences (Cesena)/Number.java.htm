<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- Generated by Compare It! (c) Grig Software -->
<HTML>
<HEAD>
<TITLE>Number.java Diff Report</TITLE>
<style type="text/css">
<!--
body { font-family: Verdana,Arial,Helvetica; background-color: #FFFFFF; }
td   { border:0; font-family: Arial, Helvetica; font-size: xx-small;}
table { border:0; width:100%; color: #666666;}
thead  { background-color: #343434; color: #FFFFFF; font-family: Verdana, Arial, Helvetica; height: 30px; vertical-align: middle; text-align: center; font-weight: bold; }
.Same { width:48%; }
.SrcOnly { background-color: #C0DCC0; color:#008000; width:48%; }
.DstOnly { background-color: #C0DCC0; color:#C80000; width:48%; }
.Virtual { background-color: #EEEEEE; width:48%; }
.Changed { background-color: #C0DCC0; color:#0000FF; width:48%; }
.InSame{ color:#0000FF; }
.InDiff { color:#C80000; font-weight:bold; }
.LineNum { background-color: #EEEEEE; width:2%; }
.Stats { background-color: #EEEEEE; color:black; }
.StatsA { background-color: #EEEEEE; color:black; }
a { font-family: Arial, Helvetica; font-size: xx-small;background-color: #EEEEEE; color:blue;}
-->
</STYLE>
</HEAD>
<BODY>
<table><tr><td align=right>Tuesday, May 17, 2011 10:17:41</td></tr></table>
<table>
<thead><tr><td width=50%>[NEW] alice/tuprolog/Number.java</td><td width=50%>[OLD] alice/tuprolog/Number.java</td></tr></thead></table>

<table cellspacing=1 cellpadding=0>
<tr><td class="LineNum">1</td><td class="Same">/*</td>
<td class="LineNum">1</td><td class="Same">/*</td></tr>
<tr><td class="LineNum">2</td><td class="Same">&nbsp;* tuProlog - Copyright (C) 2001-2002  aliCE team at deis.unibo.it</td>
<td class="LineNum">2</td><td class="Same">&nbsp;* tuProlog - Copyright (C) 2001-2002  aliCE team at deis.unibo.it</td></tr>
<tr><td class="LineNum">3</td><td class="Same">&nbsp;*</td>
<td class="LineNum">3</td><td class="Same">&nbsp;*</td></tr>
<tr><td class="LineNum">4</td><td class="Same">&nbsp;* This library is free software; you can redistribute it and/or</td>
<td class="LineNum">4</td><td class="Same">&nbsp;* This library is free software; you can redistribute it and/or</td></tr>
<tr><td class="LineNum">5</td><td class="Same">&nbsp;* modify it under the terms of the GNU Lesser General Public</td>
<td class="LineNum">5</td><td class="Same">&nbsp;* modify it under the terms of the GNU Lesser General Public</td></tr>
<tr><td class="LineNum">6</td><td class="Same">&nbsp;* License as published by the Free Software Foundation; either</td>
<td class="LineNum">6</td><td class="Same">&nbsp;* License as published by the Free Software Foundation; either</td></tr>
<tr><td class="LineNum">7</td><td class="Same">&nbsp;* version 2.1 of the License, or (at your option) any later version.</td>
<td class="LineNum">7</td><td class="Same">&nbsp;* version 2.1 of the License, or (at your option) any later version.</td></tr>
<tr><td class="LineNum">8</td><td class="Same">&nbsp;*</td>
<td class="LineNum">8</td><td class="Same">&nbsp;*</td></tr>
<tr><td class="LineNum">9</td><td class="Same">&nbsp;* This library is distributed in the hope that it will be useful,</td>
<td class="LineNum">9</td><td class="Same">&nbsp;* This library is distributed in the hope that it will be useful,</td></tr>
<tr><td class="LineNum">10</td><td class="Same">&nbsp;* but WITHOUT ANY WARRANTY; without even the implied warranty of</td>
<td class="LineNum">10</td><td class="Same">&nbsp;* but WITHOUT ANY WARRANTY; without even the implied warranty of</td></tr>
<tr><td class="LineNum">11</td><td class="Same">&nbsp;* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</td>
<td class="LineNum">11</td><td class="Same">&nbsp;* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</td></tr>
<tr><td class="LineNum">12</td><td class="Same">&nbsp;* Lesser General Public License for more details.</td>
<td class="LineNum">12</td><td class="Same">&nbsp;* Lesser General Public License for more details.</td></tr>
<tr><td class="LineNum">13</td><td class="Same">&nbsp;*</td>
<td class="LineNum">13</td><td class="Same">&nbsp;*</td></tr>
<tr><td class="LineNum">14</td><td class="Same">&nbsp;* You should have received a copy of the GNU Lesser General Public</td>
<td class="LineNum">14</td><td class="Same">&nbsp;* You should have received a copy of the GNU Lesser General Public</td></tr>
<tr><td class="LineNum">15</td><td class="Same">&nbsp;* License along with this library; if not, write to the Free Software</td>
<td class="LineNum">15</td><td class="Same">&nbsp;* License along with this library; if not, write to the Free Software</td></tr>
<tr><td class="LineNum">16</td><td class="Same">&nbsp;* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</td>
<td class="LineNum">16</td><td class="Same">&nbsp;* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</td></tr>
<tr><td class="LineNum">17</td><td class="Same">&nbsp;*/</td>
<td class="LineNum">17</td><td class="Same">&nbsp;*/</td></tr>
<tr><td class="LineNum">18</td><td class="Same">package alice.tuprolog;</td>
<td class="LineNum">18</td><td class="Same">package alice.tuprolog;</td></tr>
<tr><td class="LineNum">19</td><td class="Same">&nbsp;</td>
<td class="LineNum">19</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">20</td><td class="Same">import java.util.*;</td>
<td class="LineNum">20</td><td class="Same">import java.util.*;</td></tr>
<tr><td class="LineNum">21</td><td class="Same">&nbsp;</td>
<td class="LineNum">21</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">22</td><td class="Same">/**</td>
<td class="LineNum">22</td><td class="Same">/**</td></tr>
<tr><td class="LineNum">23</td><td class="Same">&nbsp;*</td>
<td class="LineNum">23</td><td class="Same">&nbsp;*</td></tr>
<tr><td class="LineNum">24</td><td class="Same">&nbsp;* Number abstract class represents numbers prolog data type</td>
<td class="LineNum">24</td><td class="Same">&nbsp;* Number abstract class represents numbers prolog data type</td></tr>
<tr><td class="LineNum">25</td><td class="Same">&nbsp;*</td>
<td class="LineNum">25</td><td class="Same">&nbsp;*</td></tr>
<tr><td class="LineNum">26</td><td class="Same">&nbsp;* @see Int</td>
<td class="LineNum">26</td><td class="Same">&nbsp;* @see Int</td></tr>
<tr><td class="LineNum">27</td><td class="Same">&nbsp;* @see Long</td>
<td class="LineNum">27</td><td class="Same">&nbsp;* @see Long</td></tr>
<tr><td class="LineNum">28</td><td class="Same">&nbsp;* @see Float</td>
<td class="LineNum">28</td><td class="Same">&nbsp;* @see Float</td></tr>
<tr><td class="LineNum">29</td><td class="Same">&nbsp;* @see Double</td>
<td class="LineNum">29</td><td class="Same">&nbsp;* @see Double</td></tr>
<tr><td class="LineNum">30</td><td class="Same">&nbsp;*</td>
<td class="LineNum">30</td><td class="Same">&nbsp;*</td></tr>
<tr><td class="LineNum">31</td><td class="Same">&nbsp;* Reviewed by Paolo Contessi: implements Comparable&lt;Number&gt;</td>
<td class="LineNum">31</td><td class="Same">&nbsp;* Reviewed by Paolo Contessi: implements Comparable&lt;Number&gt;</td></tr>
<tr><td class="LineNum">32</td><td class="Same">&nbsp;*/</td>
<td class="LineNum">32</td><td class="Same">&nbsp;*/</td></tr>
<tr><td class="LineNum">33</td><td class="Same">public abstract class Number extends Term implements Comparable&lt;Number&gt; {</td>
<td class="LineNum">33</td><td class="Same">public abstract class Number extends Term implements Comparable&lt;Number&gt; {</td></tr>
<tr><td class="LineNum">34</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">34</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">35</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td>
<td class="LineNum">35</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td></tr>
<tr><td class="LineNum">36</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*  Returns the value of the number as int</td>
<td class="LineNum">36</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*  Returns the value of the number as int</td></tr>
<tr><td class="LineNum">37</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td>
<td class="LineNum">37</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td></tr>
<tr><td class="LineNum">38</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public abstract int intValue();</td>
<td class="LineNum">38</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public abstract int intValue();</td></tr>
<tr><td class="LineNum">39</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">39</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">40</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td>
<td class="LineNum">40</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td></tr>
<tr><td class="LineNum">41</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*  Returns the value of the number as float</td>
<td class="LineNum">41</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*  Returns the value of the number as float</td></tr>
<tr><td class="LineNum">42</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td>
<td class="LineNum">42</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td></tr>
<tr><td class="LineNum">43</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public abstract float floatValue();</td>
<td class="LineNum">43</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public abstract float floatValue();</td></tr>
<tr><td class="LineNum">44</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">44</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">45</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td>
<td class="LineNum">45</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td></tr>
<tr><td class="LineNum">46</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*  Returns the value of the number as long</td>
<td class="LineNum">46</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*  Returns the value of the number as long</td></tr>
<tr><td class="LineNum">47</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td>
<td class="LineNum">47</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td></tr>
<tr><td class="LineNum">48</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public abstract long longValue();</td>
<td class="LineNum">48</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public abstract long longValue();</td></tr>
<tr><td class="LineNum">49</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">49</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">50</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td>
<td class="LineNum">50</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td></tr>
<tr><td class="LineNum">51</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*  Returns the value of the number as double</td>
<td class="LineNum">51</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*  Returns the value of the number as double</td></tr>
<tr><td class="LineNum">52</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td>
<td class="LineNum">52</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td></tr>
<tr><td class="LineNum">53</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public abstract double doubleValue();</td>
<td class="LineNum">53</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public abstract double doubleValue();</td></tr>
<tr><td class="LineNum">54</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">54</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">55</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">55</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">56</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/** is this term a prolog integer term? */</td>
<td class="LineNum">56</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/** is this term a prolog integer term? */</td></tr>
<tr><td class="LineNum">57</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public abstract boolean isInteger();</td>
<td class="LineNum">57</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public abstract boolean isInteger();</td></tr>
<tr><td class="LineNum">58</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">58</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">59</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/** is this term a prolog real term? */</td>
<td class="LineNum">59</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/** is this term a prolog real term? */</td></tr>
<tr><td class="LineNum">60</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public abstract boolean isReal();</td>
<td class="LineNum">60</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public abstract boolean isReal();</td></tr>
<tr><td class="LineNum">61</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">61</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">62</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;//</td>
<td class="LineNum">62</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;//</td></tr>
<tr><td class="LineNum">63</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">63</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">64</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/** is an int Integer number? </td>
<td class="LineNum">64</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/** is an int Integer number? </td></tr>
<tr><td class="LineNum">65</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @deprecated Use &lt;tt&gt;instanceof Int&lt;/tt&gt; instead. */</td>
<td class="LineNum">65</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @deprecated Use &lt;tt&gt;instanceof Int&lt;/tt&gt; instead. */</td></tr>
<tr><td class="LineNum">66</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public abstract boolean isTypeInt();</td>
<td class="LineNum">66</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public abstract boolean isTypeInt();</td></tr>
<tr><td class="LineNum">67</td><td class="Same">&nbsp;</td>
<td class="LineNum">67</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">68</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/** is an int Integer number?</td>
<td class="LineNum">68</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/** is an int Integer number?</td></tr>
<tr><td class="LineNum">69</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @deprecated Use &lt;tt&gt;instanceof Int&lt;/tt&gt; instead. */</td>
<td class="LineNum">69</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @deprecated Use &lt;tt&gt;instanceof Int&lt;/tt&gt; instead. */</td></tr>
<tr><td class="LineNum">70</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public abstract boolean isInt();</td>
<td class="LineNum">70</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public abstract boolean isInt();</td></tr>
<tr><td class="LineNum">71</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">71</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">72</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/** is a float Real number? </td>
<td class="LineNum">72</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/** is a float Real number? </td></tr>
<tr><td class="LineNum">73</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @deprecated Use &lt;tt&gt;instanceof alice.tuprolog.Float&lt;/tt&gt; instead. */</td>
<td class="LineNum">73</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @deprecated Use &lt;tt&gt;instanceof alice.tuprolog.Float&lt;/tt&gt; instead. */</td></tr>
<tr><td class="LineNum">74</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public abstract boolean isTypeFloat();</td>
<td class="LineNum">74</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public abstract boolean isTypeFloat();</td></tr>
<tr><td class="LineNum">75</td><td class="Same">&nbsp;</td>
<td class="LineNum">75</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">76</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/** is a float Real number?</td>
<td class="LineNum">76</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/** is a float Real number?</td></tr>
<tr><td class="LineNum">77</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @deprecated Use &lt;tt&gt;instanceof alice.tuprolog.Float&lt;/tt&gt; instead. */</td>
<td class="LineNum">77</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @deprecated Use &lt;tt&gt;instanceof alice.tuprolog.Float&lt;/tt&gt; instead. */</td></tr>
<tr><td class="LineNum">78</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public abstract boolean isFloat();</td>
<td class="LineNum">78</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public abstract boolean isFloat();</td></tr>
<tr><td class="LineNum">79</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">79</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">80</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/** is a double Real number? </td>
<td class="LineNum">80</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/** is a double Real number? </td></tr>
<tr><td class="LineNum">81</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @deprecated Use &lt;tt&gt;instanceof alice.tuprolog.Double&lt;/tt&gt; instead.*/</td>
<td class="LineNum">81</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @deprecated Use &lt;tt&gt;instanceof alice.tuprolog.Double&lt;/tt&gt; instead.*/</td></tr>
<tr><td class="LineNum">82</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public abstract boolean isTypeDouble();</td>
<td class="LineNum">82</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public abstract boolean isTypeDouble();</td></tr>
<tr><td class="LineNum">83</td><td class="Same">&nbsp;</td>
<td class="LineNum">83</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">84</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/** is a double Real number?</td>
<td class="LineNum">84</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/** is a double Real number?</td></tr>
<tr><td class="LineNum">85</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @deprecated Use &lt;tt&gt;instanceof alice.tuprolog.Double&lt;/tt&gt; instead. */</td>
<td class="LineNum">85</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @deprecated Use &lt;tt&gt;instanceof alice.tuprolog.Double&lt;/tt&gt; instead. */</td></tr>
<tr><td class="LineNum">86</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public abstract boolean isDouble();</td>
<td class="LineNum">86</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public abstract boolean isDouble();</td></tr>
<tr><td class="LineNum">87</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">87</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">88</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/** is a long Integer number? </td>
<td class="LineNum">88</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/** is a long Integer number? </td></tr>
<tr><td class="LineNum">89</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @deprecated Use &lt;tt&gt;instanceof alice.tuprolog.Long&lt;/tt&gt; instead. */</td>
<td class="LineNum">89</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @deprecated Use &lt;tt&gt;instanceof alice.tuprolog.Long&lt;/tt&gt; instead. */</td></tr>
<tr><td class="LineNum">90</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public abstract boolean isTypeLong();</td>
<td class="LineNum">90</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public abstract boolean isTypeLong();</td></tr>
<tr><td class="LineNum">91</td><td class="Same">&nbsp;</td>
<td class="LineNum">91</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">92</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/** is a long Integer number?</td>
<td class="LineNum">92</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/** is a long Integer number?</td></tr>
<tr><td class="LineNum">93</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @deprecated Use &lt;tt&gt;instanceof alice.tuprolog.Long&lt;/tt&gt; instead. */</td>
<td class="LineNum">93</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @deprecated Use &lt;tt&gt;instanceof alice.tuprolog.Long&lt;/tt&gt; instead. */</td></tr>
<tr><td class="LineNum">94</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public abstract boolean isLong();</td>
<td class="LineNum">94</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public abstract boolean isLong();</td></tr>
<tr><td class="LineNum">95</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">95</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">96</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public static Number createNumber(String s) {</td>
<td class="LineNum">96</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public static Number createNumber(String s) {</td></tr>
<tr><td class="LineNum">97</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Term t = Term.createTerm(s);</td>
<td class="LineNum">97</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Term t = Term.createTerm(s);</td></tr>
<tr><td class="LineNum">98</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (t instanceof Number)</td>
<td class="LineNum">98</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (t instanceof Number)</td></tr>
<tr><td class="LineNum">99</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return (Number) t;</td>
<td class="LineNum">99</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return (Number) t;</td></tr>
<tr><td class="LineNum">100</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new InvalidTermException("Term " + t + " is not a number.");</td>
<td class="LineNum">100</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new InvalidTermException("Term " + t + " is not a number.");</td></tr>
<tr><td class="LineNum">101</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">101</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">102</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">102</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">103</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td>
<td class="LineNum">103</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td></tr>
<tr><td class="LineNum">104</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Gets the actual term referred by this Term.</td>
<td class="LineNum">104</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Gets the actual term referred by this Term.</td></tr>
<tr><td class="LineNum">105</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td>
<td class="LineNum">105</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td></tr>
<tr><td class="LineNum">106</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public Term getTerm() {</td>
<td class="LineNum">106</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public Term getTerm() {</td></tr>
<tr><td class="LineNum">107</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return this;</td>
<td class="LineNum">107</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return this;</td></tr>
<tr><td class="LineNum">108</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">108</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">109</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">109</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">110</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;// checking type and properties of the Term</td>
<td class="LineNum">110</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;// checking type and properties of the Term</td></tr>
<tr><td class="LineNum">111</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">111</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">112</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/** is this term a prolog numeric term? */</td>
<td class="LineNum">112</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/** is this term a prolog numeric term? */</td></tr>
<tr><td class="LineNum">113</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;final public boolean isNumber() {</td>
<td class="LineNum">113</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;final public boolean isNumber() {</td></tr>
<tr><td class="LineNum">114</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;</td>
<td class="LineNum">114</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;</td></tr>
<tr><td class="LineNum">115</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">115</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">116</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">116</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">117</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/** is this term a struct  */</td>
<td class="LineNum">117</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/** is this term a struct  */</td></tr>
<tr><td class="LineNum">118</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;final public boolean isStruct() {</td>
<td class="LineNum">118</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;final public boolean isStruct() {</td></tr>
<tr><td class="LineNum">119</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;</td>
<td class="LineNum">119</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;</td></tr>
<tr><td class="LineNum">120</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">120</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">121</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">121</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">122</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/** is this term a variable  */</td>
<td class="LineNum">122</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/** is this term a variable  */</td></tr>
<tr><td class="LineNum">123</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;final public boolean isVar() {</td>
<td class="LineNum">123</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;final public boolean isVar() {</td></tr>
<tr><td class="LineNum">124</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;</td>
<td class="LineNum">124</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;</td></tr>
<tr><td class="LineNum">125</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">125</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">126</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">126</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">127</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;final public boolean isEmptyList() {</td>
<td class="LineNum">127</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;final public boolean isEmptyList() {</td></tr>
<tr><td class="LineNum">128</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;</td>
<td class="LineNum">128</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;</td></tr>
<tr><td class="LineNum">129</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">129</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">130</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">130</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">131</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;//</td>
<td class="LineNum">131</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;//</td></tr>
<tr><td class="LineNum">132</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">132</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">133</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/** is this term a constant prolog term? */</td>
<td class="LineNum">133</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/** is this term a constant prolog term? */</td></tr>
<tr><td class="LineNum">134</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;final public boolean isAtomic() {</td>
<td class="LineNum">134</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;final public boolean isAtomic() {</td></tr>
<tr><td class="LineNum">135</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;</td>
<td class="LineNum">135</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;</td></tr>
<tr><td class="LineNum">136</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">136</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">137</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">137</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">138</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/** is this term a prolog compound term? */</td>
<td class="LineNum">138</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/** is this term a prolog compound term? */</td></tr>
<tr><td class="LineNum">139</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;final public boolean isCompound() {</td>
<td class="LineNum">139</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;final public boolean isCompound() {</td></tr>
<tr><td class="LineNum">140</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;</td>
<td class="LineNum">140</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;</td></tr>
<tr><td class="LineNum">141</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">141</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">142</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">142</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">143</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/** is this term a prolog (alphanumeric) atom? */</td>
<td class="LineNum">143</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/** is this term a prolog (alphanumeric) atom? */</td></tr>
<tr><td class="LineNum">144</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;final public boolean isAtom() {</td>
<td class="LineNum">144</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;final public boolean isAtom() {</td></tr>
<tr><td class="LineNum">145</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;</td>
<td class="LineNum">145</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;</td></tr>
<tr><td class="LineNum">146</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">146</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">147</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">147</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">148</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/** is this term a prolog list? */</td>
<td class="LineNum">148</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/** is this term a prolog list? */</td></tr>
<tr><td class="LineNum">149</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;final public boolean isList() {</td>
<td class="LineNum">149</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;final public boolean isList() {</td></tr>
<tr><td class="LineNum">150</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;</td>
<td class="LineNum">150</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;</td></tr>
<tr><td class="LineNum">151</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">151</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">152</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">152</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">153</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/** is this term a ground term? */</td>
<td class="LineNum">153</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/** is this term a ground term? */</td></tr>
<tr><td class="LineNum">154</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;final public boolean isGround() {</td>
<td class="LineNum">154</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;final public boolean isGround() {</td></tr>
<tr><td class="LineNum">155</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;</td>
<td class="LineNum">155</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;</td></tr>
<tr><td class="LineNum">156</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">156</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">157</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">157</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">158</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">158</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">159</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;//</td>
<td class="LineNum">159</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;//</td></tr>
<tr><td class="LineNum">160</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">160</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">161</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td>
<td class="LineNum">161</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td></tr>
<tr><td class="LineNum">162</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* gets a copy of this term.</td>
<td class="LineNum">162</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* gets a copy of this term.</td></tr>
<tr><td class="LineNum">163</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td>
<td class="LineNum">163</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td></tr>
<tr><td class="LineNum">164</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public Term copy(int idExecCtx) {</td>
<td class="LineNum">164</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public Term copy(int idExecCtx) {</td></tr>
<tr><td class="LineNum">165</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return this;</td>
<td class="LineNum">165</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return this;</td></tr>
<tr><td class="LineNum">166</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">166</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">167</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">167</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">168</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td>
<td class="LineNum">168</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td></tr>
<tr><td class="LineNum">169</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* gets a copy (with renamed variables) of the term.</td>
<td class="LineNum">169</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* gets a copy (with renamed variables) of the term.</td></tr>
<tr><td class="LineNum">170</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* &lt;p&gt;</td>
<td class="LineNum">170</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* &lt;p&gt;</td></tr>
<tr><td class="LineNum">171</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* the list argument passed contains the list of variables to be renamed</td>
<td class="LineNum">171</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* the list argument passed contains the list of variables to be renamed</td></tr>
<tr><td class="LineNum">172</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* (if empty list then no renaming)</td>
<td class="LineNum">172</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* (if empty list then no renaming)</td></tr>
<tr><td class="LineNum">173</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td>
<td class="LineNum">173</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td></tr>
<tr><td class="LineNum">174</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;Term copy(AbstractMap vMap, int idExecCtx) {</td>
<td class="LineNum">174</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;Term copy(AbstractMap vMap, int idExecCtx) {</td></tr>
<tr><td class="LineNum">175</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return this;</td>
<td class="LineNum">175</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return this;</td></tr>
<tr><td class="LineNum">176</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">176</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">177</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">177</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">178</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td>
<td class="LineNum">178</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td></tr>
<tr><td class="LineNum">179</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* gets a copy of the term.</td>
<td class="LineNum">179</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* gets a copy of the term.</td></tr>
<tr><td class="LineNum">180</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td>
<td class="LineNum">180</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td></tr>
<tr><td class="LineNum">181</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;Term copy(AbstractMap vMap, AbstractMap substMap) {</td>
<td class="LineNum">181</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;Term copy(AbstractMap vMap, AbstractMap substMap) {</td></tr>
<tr><td class="LineNum">182</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return this;</td>
<td class="LineNum">182</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return this;</td></tr>
<tr><td class="LineNum">183</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">183</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">184</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">184</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">185</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">185</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">186</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;long resolveTerm(long count) {</td>
<td class="LineNum">186</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;long resolveTerm(long count) {</td></tr>
<tr><td class="LineNum">187</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return count;</td>
<td class="LineNum">187</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return count;</td></tr>
<tr><td class="LineNum">188</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">188</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">189</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">189</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">190</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td>
<td class="LineNum">190</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td></tr>
<tr><td class="LineNum">191</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*</td>
<td class="LineNum">191</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*</td></tr>
<tr><td class="LineNum">192</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td>
<td class="LineNum">192</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td></tr>
<tr><td class="LineNum">193</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public void free() {}</td>
<td class="LineNum">193</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public void free() {}</td></tr>
<tr><td class="LineNum">194</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">194</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">195</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;void restoreVariables() {}</td>
<td class="LineNum">195</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;void restoreVariables() {}</td></tr>
<tr><td class="LineNum">196</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">196</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">197</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="InDiff">@Override</span></td><td class="LineNum">197</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;</span></td></tr>
<tr><td class="LineNum">198</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;public void accept(TermVisitor tv) {</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">199</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tv.visit(this);</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">200</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;}</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">201</td><td class="Same">}</td>
<td class="LineNum">198</td><td class="Same">}</td></tr>

</table>


</body></html>
