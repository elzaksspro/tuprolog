<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- Generated by Compare It! (c) Grig Software -->
<HTML>
<HEAD>
<TITLE>Parser.java Diff Report</TITLE>
<style type="text/css">
<!--
body { font-family: Verdana,Arial,Helvetica; background-color: #FFFFFF; }
td   { border:0; font-family: Arial, Helvetica; font-size: xx-small;}
table { border:0; width:100%; color: #666666;}
thead  { background-color: #343434; color: #FFFFFF; font-family: Verdana, Arial, Helvetica; height: 30px; vertical-align: middle; text-align: center; font-weight: bold; }
.Same { width:48%; }
.SrcOnly { background-color: #C0DCC0; color:#008000; width:48%; }
.DstOnly { background-color: #C0DCC0; color:#C80000; width:48%; }
.Virtual { background-color: #EEEEEE; width:48%; }
.Changed { background-color: #C0DCC0; color:#0000FF; width:48%; }
.InSame{ color:#0000FF; }
.InDiff { color:#C80000; font-weight:bold; }
.LineNum { background-color: #EEEEEE; width:2%; }
.Stats { background-color: #EEEEEE; color:black; }
.StatsA { background-color: #EEEEEE; color:black; }
a { font-family: Arial, Helvetica; font-size: xx-small;background-color: #EEEEEE; color:blue;}
-->
</STYLE>
</HEAD>
<BODY>
<table><tr><td align=right>Tuesday, May 17, 2011 10:40:08</td></tr></table>
<table>
<thead><tr><td width=50%>[NEW] alice/tuprolog/Parser.java</td><td width=50%>[OLD] alice/tuprolog/Parser.java</td></tr></thead></table>

<table cellspacing=1 cellpadding=0>
<tr><td class="LineNum">1</td><td class="Same">/*</td>
<td class="LineNum">1</td><td class="Same">/*</td></tr>
<tr><td class="LineNum">2</td><td class="Same">&nbsp;* tuProlog - Copyright (C) 2001-2002  aliCE team at deis.unibo.it</td>
<td class="LineNum">2</td><td class="Same">&nbsp;* tuProlog - Copyright (C) 2001-2002  aliCE team at deis.unibo.it</td></tr>
<tr><td class="LineNum">3</td><td class="Same">&nbsp;*</td>
<td class="LineNum">3</td><td class="Same">&nbsp;*</td></tr>
<tr><td class="LineNum">4</td><td class="Same">&nbsp;* This library is free software; you can redistribute it and/or</td>
<td class="LineNum">4</td><td class="Same">&nbsp;* This library is free software; you can redistribute it and/or</td></tr>
<tr><td class="LineNum">5</td><td class="Same">&nbsp;* modify it under the terms of the GNU Lesser General Public</td>
<td class="LineNum">5</td><td class="Same">&nbsp;* modify it under the terms of the GNU Lesser General Public</td></tr>
<tr><td class="LineNum">6</td><td class="Same">&nbsp;* License as published by the Free Software Foundation; either</td>
<td class="LineNum">6</td><td class="Same">&nbsp;* License as published by the Free Software Foundation; either</td></tr>
<tr><td class="LineNum">7</td><td class="Same">&nbsp;* version 2.1 of the License, or (at your option) any later version.</td>
<td class="LineNum">7</td><td class="Same">&nbsp;* version 2.1 of the License, or (at your option) any later version.</td></tr>
<tr><td class="LineNum">8</td><td class="Same">&nbsp;*</td>
<td class="LineNum">8</td><td class="Same">&nbsp;*</td></tr>
<tr><td class="LineNum">9</td><td class="Same">&nbsp;* This library is distributed in the hope that it will be useful,</td>
<td class="LineNum">9</td><td class="Same">&nbsp;* This library is distributed in the hope that it will be useful,</td></tr>
<tr><td class="LineNum">10</td><td class="Same">&nbsp;* but WITHOUT ANY WARRANTY; without even the implied warranty of</td>
<td class="LineNum">10</td><td class="Same">&nbsp;* but WITHOUT ANY WARRANTY; without even the implied warranty of</td></tr>
<tr><td class="LineNum">11</td><td class="Same">&nbsp;* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</td>
<td class="LineNum">11</td><td class="Same">&nbsp;* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</td></tr>
<tr><td class="LineNum">12</td><td class="Same">&nbsp;* Lesser General Public License for more details.</td>
<td class="LineNum">12</td><td class="Same">&nbsp;* Lesser General Public License for more details.</td></tr>
<tr><td class="LineNum">13</td><td class="Same">&nbsp;*</td>
<td class="LineNum">13</td><td class="Same">&nbsp;*</td></tr>
<tr><td class="LineNum">14</td><td class="Same">&nbsp;* You should have received a copy of the GNU Lesser General Public</td>
<td class="LineNum">14</td><td class="Same">&nbsp;* You should have received a copy of the GNU Lesser General Public</td></tr>
<tr><td class="LineNum">15</td><td class="Same">&nbsp;* License along with this library; if not, write to the Free Software</td>
<td class="LineNum">15</td><td class="Same">&nbsp;* License along with this library; if not, write to the Free Software</td></tr>
<tr><td class="LineNum">16</td><td class="Same">&nbsp;* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</td>
<td class="LineNum">16</td><td class="Same">&nbsp;* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</td></tr>
<tr><td class="LineNum">17</td><td class="Same">&nbsp;*/</td>
<td class="LineNum">17</td><td class="Same">&nbsp;*/</td></tr>
<tr><td class="LineNum">18</td><td class="Same">package alice.tuprolog;</td>
<td class="LineNum">18</td><td class="Same">package alice.tuprolog;</td></tr>
<tr><td class="LineNum">19</td><td class="Same">&nbsp;</td>
<td class="LineNum">19</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">20</td><td class="Same">import java.io.*;</td>
<td class="LineNum">20</td><td class="Same">import java.io.*;</td></tr>
<tr><td class="LineNum">21</td><td class="SrcOnly">import java.util.HashMap;</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">22</td><td class="Same">import java.util.Iterator;</td>
<td class="LineNum">21</td><td class="Same">import java.util.Iterator;</td></tr>
<tr><td class="LineNum">23</td><td class="Same">import java.util.LinkedList;</td>
<td class="LineNum">22</td><td class="Same">import java.util.LinkedList;</td></tr>
<tr><td class="LineNum">24</td><td class="Same">import java.util.regex.Pattern;</td>
<td class="LineNum">23</td><td class="Same">import java.util.regex.Pattern;</td></tr>
<tr><td class="LineNum">25</td><td class="Same">&nbsp;</td>
<td class="LineNum">24</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">26</td><td class="SrcOnly">import alice.tuprolog.interfaces.IParser;</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">27</td><td class="SrcOnly">&nbsp;</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">28</td><td class="Same">/**</td>
<td class="LineNum">25</td><td class="Same">/**</td></tr>
<tr><td class="LineNum">29</td><td class="Same">&nbsp;* This class defines a parser of prolog terms and sentences.</td>
<td class="LineNum">26</td><td class="Same">&nbsp;* This class defines a parser of prolog terms and sentences.</td></tr>
<tr><td class="LineNum">30</td><td class="Same">&nbsp;* &lt;p/&gt;</td>
<td class="LineNum">27</td><td class="Same">&nbsp;* &lt;p/&gt;</td></tr>
<tr><td class="LineNum">31</td><td class="Same">&nbsp;* BNF part 2: Parser</td>
<td class="LineNum">28</td><td class="Same">&nbsp;* BNF part 2: Parser</td></tr>
<tr><td class="LineNum">32</td><td class="Same">&nbsp;* term ::= exprA(1200)</td>
<td class="LineNum">29</td><td class="Same">&nbsp;* term ::= exprA(1200)</td></tr>
<tr><td class="LineNum">33</td><td class="Same">&nbsp;* exprA(n) ::= exprB(n) { op(yfx,n) exprA(n-1) |</td>
<td class="LineNum">30</td><td class="Same">&nbsp;* exprA(n) ::= exprB(n) { op(yfx,n) exprA(n-1) |</td></tr>
<tr><td class="LineNum">34</td><td class="Same">&nbsp;*                         op(yf,n) }*</td>
<td class="LineNum">31</td><td class="Same">&nbsp;*                         op(yf,n) }*</td></tr>
<tr><td class="LineNum">35</td><td class="Same">&nbsp;* exprB(n) ::= exprC(n-1) { op(xfx,n) exprA(n-1) |</td>
<td class="LineNum">32</td><td class="Same">&nbsp;* exprB(n) ::= exprC(n-1) { op(xfx,n) exprA(n-1) |</td></tr>
<tr><td class="LineNum">36</td><td class="Same">&nbsp;*                           op(xfy,n) exprA(n) |</td>
<td class="LineNum">33</td><td class="Same">&nbsp;*                           op(xfy,n) exprA(n) |</td></tr>
<tr><td class="LineNum">37</td><td class="Same">&nbsp;*                           op(xf,n) }*</td>
<td class="LineNum">34</td><td class="Same">&nbsp;*                           op(xf,n) }*</td></tr>
<tr><td class="LineNum">38</td><td class="Same">&nbsp;* // exprC is called parseLeftSide in the code</td>
<td class="LineNum">35</td><td class="Same">&nbsp;* // exprC is called parseLeftSide in the code</td></tr>
<tr><td class="LineNum">39</td><td class="Same">&nbsp;* exprC(n) ::= '-' integer | '-' float |</td>
<td class="LineNum">36</td><td class="Same">&nbsp;* exprC(n) ::= '-' integer | '-' float |</td></tr>
<tr><td class="LineNum">40</td><td class="Same">&nbsp;*              op( fx,n ) exprA(n-1) |</td>
<td class="LineNum">37</td><td class="Same">&nbsp;*              op( fx,n ) exprA(n-1) |</td></tr>
<tr><td class="LineNum">41</td><td class="Same">&nbsp;*              op( fy,n ) exprA(n) |</td>
<td class="LineNum">38</td><td class="Same">&nbsp;*              op( fy,n ) exprA(n) |</td></tr>
<tr><td class="LineNum">42</td><td class="Same">&nbsp;*              exprA(n)</td>
<td class="LineNum">39</td><td class="Same">&nbsp;*              exprA(n)</td></tr>
<tr><td class="LineNum">43</td><td class="Same">&nbsp;* exprA(0) ::= integer |</td>
<td class="LineNum">40</td><td class="Same">&nbsp;* exprA(0) ::= integer |</td></tr>
<tr><td class="LineNum">44</td><td class="Same">&nbsp;*              float |</td>
<td class="LineNum">41</td><td class="Same">&nbsp;*              float |</td></tr>
<tr><td class="LineNum">45</td><td class="Same">&nbsp;*              atom |</td>
<td class="LineNum">42</td><td class="Same">&nbsp;*              atom |</td></tr>
<tr><td class="LineNum">46</td><td class="Same">&nbsp;*              variable |</td>
<td class="LineNum">43</td><td class="Same">&nbsp;*              variable |</td></tr>
<tr><td class="LineNum">47</td><td class="Same">&nbsp;*              atom'(' exprA(1200) { ',' exprA(1200) }* ')' |</td>
<td class="LineNum">44</td><td class="Same">&nbsp;*              atom'(' exprA(1200) { ',' exprA(1200) }* ')' |</td></tr>
<tr><td class="LineNum">48</td><td class="Same">&nbsp;*              '[' [ exprA(1200) { ',' exprA(1200) }* [ '|' exprA(1200) ] ] ']' |</td>
<td class="LineNum">45</td><td class="Same">&nbsp;*              '[' [ exprA(1200) { ',' exprA(1200) }* [ '|' exprA(1200) ] ] ']' |</td></tr>
<tr><td class="LineNum">49</td><td class="Same">&nbsp;*              '(' { exprA(1200) }* ')'</td>
<td class="LineNum">46</td><td class="Same">&nbsp;*              '(' { exprA(1200) }* ')'</td></tr>
<tr><td class="LineNum">50</td><td class="Same">&nbsp;*              '{' { exprA(1200) }* '}'</td>
<td class="LineNum">47</td><td class="Same">&nbsp;*              '{' { exprA(1200) }* '}'</td></tr>
<tr><td class="LineNum">51</td><td class="Same">&nbsp;* op(type,n) ::= atom | { symbol }+</td>
<td class="LineNum">48</td><td class="Same">&nbsp;* op(type,n) ::= atom | { symbol }+</td></tr>
<tr><td class="LineNum">52</td><td class="Same">&nbsp;*/</td>
<td class="LineNum">49</td><td class="Same">&nbsp;*/</td></tr>
<tr><td class="LineNum">53</td><td class="Changed"><span class="InSame">public class Parser implements </span><span class="InDiff">IParser, </span><span class="InSame">Serializable {</span></td><td class="LineNum">50</td><td class="Changed"><span class="InSame">public class Parser implements Serializable {</span></td></tr>
<tr><td class="LineNum">54</td><td class="Same">&nbsp;</td>
<td class="LineNum">51</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">55</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;private static class IdentifiedTerm {</td>
<td class="LineNum">52</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;private static class IdentifiedTerm {</td></tr>
<tr><td class="LineNum">56</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;private int priority;</td>
<td class="LineNum">53</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;private int priority;</td></tr>
<tr><td class="LineNum">57</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;private Term result;</td>
<td class="LineNum">54</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;private Term result;</td></tr>
<tr><td class="LineNum">58</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public IdentifiedTerm(int priority, Term result) {</td>
<td class="LineNum">55</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public IdentifiedTerm(int priority, Term result) {</td></tr>
<tr><td class="LineNum">59</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.priority = priority;</td>
<td class="LineNum">56</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.priority = priority;</td></tr>
<tr><td class="LineNum">60</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.result = result;</td>
<td class="LineNum">57</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.result = result;</td></tr>
<tr><td class="LineNum">61</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">58</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">62</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">59</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">63</td><td class="Same">&nbsp;</td>
<td class="LineNum">60</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">64</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;private static OperatorManager defaultOperatorManager = new DefaultOperatorManager();</td>
<td class="LineNum">61</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;private static OperatorManager defaultOperatorManager = new DefaultOperatorManager();</td></tr>
<tr><td class="LineNum"></td><td class="Virtual">&nbsp;</td><td class="LineNum">62</td><td class="DstOnly">&nbsp;</td></tr>
<tr><td class="LineNum"></td><td class="Virtual">&nbsp;</td><td class="LineNum">63</td><td class="DstOnly">&nbsp;&nbsp;&nbsp;&nbsp;private Tokenizer tokenizer;</td></tr>
<tr><td class="LineNum">65</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;private OperatorManager opManager = defaultOperatorManager;</td>
<td class="LineNum">64</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;private OperatorManager opManager = defaultOperatorManager;</td></tr>
<tr><td class="LineNum">66</td><td class="Same">&nbsp;</td>
<td class="LineNum">65</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">67</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;private Tokenizer tokenizer;</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">68</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;private HashMap&lt;Term, Integer&gt; offsetsMap;</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">69</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;private int tokenStart;</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">70</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">71</td><td class="SrcOnly">&nbsp;</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">72</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td>
<td class="LineNum">66</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td></tr>
<tr><td class="LineNum">73</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* creating a Parser specifing how to handle operators</td>
<td class="LineNum">67</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* creating a Parser specifing how to handle operators</td></tr>
<tr><td class="LineNum">74</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* and what text to parse</td>
<td class="LineNum">68</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* and what text to parse</td></tr>
<tr><td class="LineNum">75</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td>
<td class="LineNum">69</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td></tr>
<tr><td class="LineNum">76</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public Parser(OperatorManager op, InputStream theoryText) {</td>
<td class="LineNum">70</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public Parser(OperatorManager op, InputStream theoryText) {</td></tr>
<tr><td class="LineNum">77</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this(theoryText);</td>
<td class="LineNum">71</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this(theoryText);</td></tr>
<tr><td class="LineNum">78</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (op != null)</td>
<td class="LineNum">72</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (op != null)</td></tr>
<tr><td class="LineNum">79</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;opManager = op;</td>
<td class="LineNum">73</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;opManager = op;</td></tr>
<tr><td class="LineNum">80</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">74</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">81</td><td class="Same">&nbsp;</td>
<td class="LineNum">75</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">82</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td>
<td class="LineNum">76</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td></tr>
<tr><td class="LineNum">83</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* creating a Parser specifing how to handle operators</td>
<td class="LineNum">77</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* creating a Parser specifing how to handle operators</td></tr>
<tr><td class="LineNum">84</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* and what text to parse</td>
<td class="LineNum">78</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* and what text to parse</td></tr>
<tr><td class="LineNum">85</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td>
<td class="LineNum">79</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td></tr>
<tr><td class="LineNum">86</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;public Parser(OperatorManager op, String theoryText, HashMap&lt;Term, Integer&gt; mapping) {</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">87</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this(theoryText, mapping);</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">88</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (op != null)</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">89</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;opManager = op;</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">90</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;}</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">91</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">92</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;/**</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">93</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* creating a Parser specifing how to handle operators</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">94</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* and what text to parse</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">95</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">96</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public Parser(OperatorManager op, String theoryText) {</td>
<td class="LineNum">80</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public Parser(OperatorManager op, String theoryText) {</td></tr>
<tr><td class="LineNum">97</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this(theoryText);</td>
<td class="LineNum">81</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this(theoryText);</td></tr>
<tr><td class="LineNum">98</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (op != null)</td>
<td class="LineNum">82</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (op != null)</td></tr>
<tr><td class="LineNum">99</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;opManager = op;</td>
<td class="LineNum">83</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;opManager = op;</td></tr>
<tr><td class="LineNum">100</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">84</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">101</td><td class="Same">&nbsp;</td>
<td class="LineNum">85</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">102</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td>
<td class="LineNum">86</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td></tr>
<tr><td class="LineNum">103</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* creating a parser with default operator interpretation</td>
<td class="LineNum">87</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* creating a parser with default operator interpretation</td></tr>
<tr><td class="LineNum">104</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td>
<td class="LineNum">88</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td></tr>
<tr><td class="LineNum">105</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;public Parser(String theoryText, HashMap&lt;Term, Integer&gt; mapping) {</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">106</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tokenizer = new Tokenizer(theoryText);</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">107</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;offsetsMap = mapping;</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">108</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;}</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">109</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">110</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;/**</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">111</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* creating a parser with default operator interpretation</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">112</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">113</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public Parser(String theoryText) {</td>
<td class="LineNum">89</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public Parser(String theoryText) {</td></tr>
<tr><td class="LineNum">114</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tokenizer = new Tokenizer(theoryText);</td>
<td class="LineNum">90</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tokenizer = new Tokenizer(theoryText);</td></tr>
<tr><td class="LineNum">115</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;offsetsMap = null;</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">116</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">91</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">117</td><td class="Same">&nbsp;</td>
<td class="LineNum">92</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">118</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td>
<td class="LineNum">93</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td></tr>
<tr><td class="LineNum">119</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* creating a parser with default operator interpretation</td>
<td class="LineNum">94</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* creating a parser with default operator interpretation</td></tr>
<tr><td class="LineNum">120</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td>
<td class="LineNum">95</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td></tr>
<tr><td class="LineNum">121</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public Parser(InputStream theoryText) {</td>
<td class="LineNum">96</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public Parser(InputStream theoryText) {</td></tr>
<tr><td class="LineNum">122</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tokenizer = new Tokenizer(new BufferedReader(new InputStreamReader(theoryText)));</td>
<td class="LineNum">97</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tokenizer = new Tokenizer(new BufferedReader(new InputStreamReader(theoryText)));</td></tr>
<tr><td class="LineNum">123</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">98</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">124</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">99</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">125</td><td class="Same">//  user interface</td>
<td class="LineNum">100</td><td class="Same">//  user interface</td></tr>
<tr><td class="LineNum">126</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">101</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">127</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public Iterator iterator() {</td>
<td class="LineNum">102</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public Iterator iterator() {</td></tr>
<tr><td class="LineNum">128</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return new TermIterator(this);</td>
<td class="LineNum">103</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return new TermIterator(this);</td></tr>
<tr><td class="LineNum">129</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">104</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">130</td><td class="Same">&nbsp;</td>
<td class="LineNum">105</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">131</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td>
<td class="LineNum">106</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td></tr>
<tr><td class="LineNum">132</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Parses next term from the stream built on string.</td>
<td class="LineNum">107</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Parses next term from the stream built on string.</td></tr>
<tr><td class="LineNum">133</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @param endNeeded &lt;tt&gt;true&lt;/tt&gt; if it is required to parse the end token</td>
<td class="LineNum">108</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @param endNeeded &lt;tt&gt;true&lt;/tt&gt; if it is required to parse the end token</td></tr>
<tr><td class="LineNum">134</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* (a period), &lt;tt&gt;false&lt;/tt&gt; otherwise.</td>
<td class="LineNum">109</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* (a period), &lt;tt&gt;false&lt;/tt&gt; otherwise.</td></tr>
<tr><td class="LineNum">135</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @throws InvalidTermException if a syntax error is found. </td>
<td class="LineNum">110</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @throws InvalidTermException if a syntax error is found. </td></tr>
<tr><td class="LineNum">136</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td>
<td class="LineNum">111</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td></tr>
<tr><td class="LineNum">137</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public Term nextTerm(boolean endNeeded) throws InvalidTermException {</td>
<td class="LineNum">112</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public Term nextTerm(boolean endNeeded) throws InvalidTermException {</td></tr>
<tr><td class="LineNum">138</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try {</td>
<td class="LineNum">113</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try {</td></tr>
<tr><td class="LineNum">139</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Token t = tokenizer.readToken();</td>
<td class="LineNum">114</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Token t = tokenizer.readToken();</td></tr>
<tr><td class="LineNum">140</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (t.isEOF())</td>
<td class="LineNum">115</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (t.isEOF())</td></tr>
<tr><td class="LineNum">141</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return null;</td>
<td class="LineNum">116</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return null;</td></tr>
<tr><td class="LineNum">142</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">117</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">143</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tokenizer.unreadToken(t);</td>
<td class="LineNum">118</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tokenizer.unreadToken(t);</td></tr>
<tr><td class="LineNum">144</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Term term = expr(false);</td>
<td class="LineNum">119</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Term term = expr(false);</td></tr>
<tr><td class="LineNum">145</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (term == null)</td>
<td class="LineNum">120</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (term == null)</td></tr>
<tr><td class="LineNum">146</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new InvalidTermException("The parser is unable to finish");</span></td><td class="LineNum">121</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new InvalidTermException("The parser is unable to finish</span><span class="InDiff">.</span><span class="InSame">");</span></td></tr>
<tr><td class="LineNum">147</td><td class="Same">&nbsp;</td>
<td class="LineNum">122</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">148</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (endNeeded && tokenizer.readToken().getType() != Tokenizer.END)</td>
<td class="LineNum">123</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (endNeeded && tokenizer.readToken().getType() != Tokenizer.END)</td></tr>
<tr><td class="LineNum">149</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new InvalidTermException("The term " + term + " is not ended with a period");</span></td><td class="LineNum">124</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new InvalidTermException("The term " + term + " is not ended with a period</span><span class="InDiff">.</span><span class="InSame">");</span></td></tr>
<tr><td class="LineNum">150</td><td class="Same">&nbsp;</td>
<td class="LineNum">125</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">151</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;term.resolveTerm();</td>
<td class="LineNum">126</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;term.resolveTerm();</td></tr>
<tr><td class="LineNum">152</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return term;</td>
<td class="LineNum">127</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return term;</td></tr>
<tr><td class="LineNum">153</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} catch (IOException ex) {</td>
<td class="LineNum">128</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} catch (IOException ex) {</td></tr>
<tr><td class="LineNum">154</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new InvalidTermException("An I/O error occured");</span></td><td class="LineNum">129</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new InvalidTermException("An I/O error occured</span><span class="InDiff">.</span><span class="InSame">");</span></td></tr>
<tr><td class="LineNum">155</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">130</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">156</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">131</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">157</td><td class="Same">&nbsp;</td>
<td class="LineNum">132</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">158</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td>
<td class="LineNum">133</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td></tr>
<tr><td class="LineNum">159</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Static service to get a term from its string representation</td>
<td class="LineNum">134</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Static service to get a term from its string representation</td></tr>
<tr><td class="LineNum">160</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td>
<td class="LineNum">135</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td></tr>
<tr><td class="LineNum">161</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public static Term parseSingleTerm(String st) throws InvalidTermException {</td>
<td class="LineNum">136</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public static Term parseSingleTerm(String st) throws InvalidTermException {</td></tr>
<tr><td class="LineNum">162</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return parseSingleTerm(st, null);</td>
<td class="LineNum">137</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return parseSingleTerm(st, null);</td></tr>
<tr><td class="LineNum">163</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">138</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">164</td><td class="Same">&nbsp;</td>
<td class="LineNum">139</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">165</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td>
<td class="LineNum">140</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td></tr>
<tr><td class="LineNum">166</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Static service to get a term from its string representation,</td>
<td class="LineNum">141</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Static service to get a term from its string representation,</td></tr>
<tr><td class="LineNum">167</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* providing a specific operator manager</td>
<td class="LineNum">142</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* providing a specific operator manager</td></tr>
<tr><td class="LineNum">168</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td>
<td class="LineNum">143</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td></tr>
<tr><td class="LineNum">169</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public static Term parseSingleTerm(String st, OperatorManager op) throws InvalidTermException {</td>
<td class="LineNum">144</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public static Term parseSingleTerm(String st, OperatorManager op) throws InvalidTermException {</td></tr>
<tr><td class="LineNum">170</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try {</td>
<td class="LineNum">145</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try {</td></tr>
<tr><td class="LineNum">171</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Parser p = new Parser(op, st);</td>
<td class="LineNum">146</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Parser p = new Parser(op, st);</td></tr>
<tr><td class="LineNum">172</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Token t = p.tokenizer.readToken();</td>
<td class="LineNum">147</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Token t = p.tokenizer.readToken();</td></tr>
<tr><td class="LineNum">173</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (t.isEOF())</td>
<td class="LineNum">148</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (t.isEOF())</td></tr>
<tr><td class="LineNum">174</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new InvalidTermException("Term starts with EOF");</td>
<td class="LineNum">149</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new InvalidTermException("Term starts with EOF");</td></tr>
<tr><td class="LineNum">175</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">150</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">176</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p.tokenizer.unreadToken(t);</td>
<td class="LineNum">151</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;p.tokenizer.unreadToken(t);</td></tr>
<tr><td class="LineNum">177</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Term term = p.expr(false);</td>
<td class="LineNum">152</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Term term = p.expr(false);</td></tr>
<tr><td class="LineNum">178</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (term == null)</td>
<td class="LineNum">153</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (term == null)</td></tr>
<tr><td class="LineNum">179</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new InvalidTermException("Term is null");</td>
<td class="LineNum">154</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new InvalidTermException("Term is null");</td></tr>
<tr><td class="LineNum">180</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!p.tokenizer.readToken().isEOF())</td>
<td class="LineNum">155</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!p.tokenizer.readToken().isEOF())</td></tr>
<tr><td class="LineNum">181</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new InvalidTermException("The enitire string could not be read as one term");</td>
<td class="LineNum">156</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new InvalidTermException("The enitire string could not be read as one term");</td></tr>
<tr><td class="LineNum">182</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;term.resolveTerm();</td>
<td class="LineNum">157</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;term.resolveTerm();</td></tr>
<tr><td class="LineNum">183</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return term;</td>
<td class="LineNum">158</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return term;</td></tr>
<tr><td class="LineNum">184</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} catch (IOException ex) {</td>
<td class="LineNum">159</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} catch (IOException ex) {</td></tr>
<tr><td class="LineNum">185</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new InvalidTermException("An I/O error occured");</td>
<td class="LineNum">160</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new InvalidTermException("An I/O error occured");</td></tr>
<tr><td class="LineNum">186</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">161</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">187</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">162</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">188</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">163</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">189</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;// internal parsing procedures</td>
<td class="LineNum">164</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;// internal parsing procedures</td></tr>
<tr><td class="LineNum">190</td><td class="Same">&nbsp;</td>
<td class="LineNum">165</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">191</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;private Term expr(boolean commaIsEndMarker) throws InvalidTermException, IOException {</td>
<td class="LineNum">166</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;private Term expr(boolean commaIsEndMarker) throws InvalidTermException, IOException {</td></tr>
<tr><td class="LineNum">192</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return exprA(OperatorManager.OP_HIGH, commaIsEndMarker).result;</td>
<td class="LineNum">167</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return exprA(OperatorManager.OP_HIGH, commaIsEndMarker).result;</td></tr>
<tr><td class="LineNum">193</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">168</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">194</td><td class="Same">&nbsp;</td>
<td class="LineNum">169</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">195</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;private IdentifiedTerm exprA(int maxPriority, boolean commaIsEndMarker) throws InvalidTermException, IOException {</td>
<td class="LineNum">170</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;private IdentifiedTerm exprA(int maxPriority, boolean commaIsEndMarker) throws InvalidTermException, IOException {</td></tr>
<tr><td class="LineNum">196</td><td class="Same">&nbsp;</td>
<td class="LineNum">171</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">197</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IdentifiedTerm leftSide = exprB(maxPriority, commaIsEndMarker);</td>
<td class="LineNum">172</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IdentifiedTerm leftSide = exprB(maxPriority, commaIsEndMarker);</td></tr>
<tr><td class="LineNum">198</td><td class="Same">//        if (leftSide == null)</td>
<td class="LineNum">173</td><td class="Same">//        if (leftSide == null)</td></tr>
<tr><td class="LineNum">199</td><td class="Same">//            return null;</td>
<td class="LineNum">174</td><td class="Same">//            return null;</td></tr>
<tr><td class="LineNum">200</td><td class="Same">&nbsp;</td>
<td class="LineNum">175</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">201</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//{op(yfx,n) exprA(n-1) | op(yf,n)}*</td>
<td class="LineNum">176</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//{op(yfx,n) exprA(n-1) | op(yf,n)}*</td></tr>
<tr><td class="LineNum">202</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Token t = tokenizer.readToken();</td>
<td class="LineNum">177</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Token t = tokenizer.readToken();</td></tr>
<tr><td class="LineNum">203</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (; t.isOperator(commaIsEndMarker); t = tokenizer.readToken()) {</td>
<td class="LineNum">178</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (; t.isOperator(commaIsEndMarker); t = tokenizer.readToken()) {</td></tr>
<tr><td class="LineNum">204</td><td class="Same">&nbsp;</td>
<td class="LineNum">179</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">205</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int YFX = opManager.opPrio(t.seq, "yfx");</td>
<td class="LineNum">180</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int YFX = opManager.opPrio(t.seq, "yfx");</td></tr>
<tr><td class="LineNum">206</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int YF = opManager.opPrio(t.seq, "yf");</td>
<td class="LineNum">181</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int YF = opManager.opPrio(t.seq, "yf");</td></tr>
<tr><td class="LineNum">207</td><td class="Same">&nbsp;</td>
<td class="LineNum">182</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">208</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//YF and YFX has a higher priority than the left side expr and less then top limit</td>
<td class="LineNum">183</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//YF and YFX has a higher priority than the left side expr and less then top limit</td></tr>
<tr><td class="LineNum">209</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// if (YF &lt; leftSide.priority && YF &gt; OperatorManager.OP_HIGH) YF = -1;</td>
<td class="LineNum">184</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// if (YF &lt; leftSide.priority && YF &gt; OperatorManager.OP_HIGH) YF = -1;</td></tr>
<tr><td class="LineNum">210</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (YF &lt; leftSide.priority || YF &gt; maxPriority) YF = -1;</td>
<td class="LineNum">185</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (YF &lt; leftSide.priority || YF &gt; maxPriority) YF = -1;</td></tr>
<tr><td class="LineNum">211</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// if (YFX &lt; leftSide.priority && YFX &gt; OperatorManager.OP_HIGH) YFX = -1;</td>
<td class="LineNum">186</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// if (YFX &lt; leftSide.priority && YFX &gt; OperatorManager.OP_HIGH) YFX = -1;</td></tr>
<tr><td class="LineNum">212</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (YFX &lt; leftSide.priority || YFX &gt; maxPriority) YFX = -1;</td>
<td class="LineNum">187</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (YFX &lt; leftSide.priority || YFX &gt; maxPriority) YFX = -1;</td></tr>
<tr><td class="LineNum">213</td><td class="Same">&nbsp;</td>
<td class="LineNum">188</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">214</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//YFX has priority over YF</td>
<td class="LineNum">189</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//YFX has priority over YF</td></tr>
<tr><td class="LineNum">215</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (YFX &gt;= YF && YFX &gt;= OperatorManager.OP_LOW){</td>
<td class="LineNum">190</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (YFX &gt;= YF && YFX &gt;= OperatorManager.OP_LOW){</td></tr>
<tr><td class="LineNum">216</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IdentifiedTerm ta = exprA(YFX-1, commaIsEndMarker);</td>
<td class="LineNum">191</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IdentifiedTerm ta = exprA(YFX-1, commaIsEndMarker);</td></tr>
<tr><td class="LineNum">217</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (ta != null) {</td>
<td class="LineNum">192</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (ta != null) {</td></tr>
<tr><td class="LineNum">218</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="InDiff">//</span><span class="InSame">leftSide = new IdentifiedTerm(YFX, new Struct(t.seq, leftSide.result, ta.result));</span></td><td class="LineNum">193</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;leftSide = new IdentifiedTerm(YFX, new Struct(t.seq, leftSide.result, ta.result));</span></td></tr>
<tr><td class="LineNum">219</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;leftSide = identifyTerm(YFX, new Struct(t.seq, leftSide.result, ta.result), tokenStart);</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">220</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue;</td>
<td class="LineNum">194</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue;</td></tr>
<tr><td class="LineNum">221</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">195</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">222</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">196</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">223</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//either YF has priority over YFX or YFX failed</td>
<td class="LineNum">197</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//either YF has priority over YFX or YFX failed</td></tr>
<tr><td class="LineNum">224</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (YF &gt;= OperatorManager.OP_LOW) {</td>
<td class="LineNum">198</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (YF &gt;= OperatorManager.OP_LOW) {</td></tr>
<tr><td class="LineNum">225</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="InDiff">//</span><span class="InSame">leftSide = new IdentifiedTerm(YF, new Struct(t.seq, leftSide.result));</span></td><td class="LineNum">199</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;leftSide = new IdentifiedTerm(YF, new Struct(t.seq, leftSide.result));</span></td></tr>
<tr><td class="LineNum">226</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;leftSide = identifyTerm(YF, new Struct(t.seq, leftSide.result), tokenStart);</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">227</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue;</td>
<td class="LineNum">200</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue;</td></tr>
<tr><td class="LineNum">228</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">201</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">229</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;</td>
<td class="LineNum">202</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;</td></tr>
<tr><td class="LineNum">230</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">203</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">231</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tokenizer.unreadToken(t);</td>
<td class="LineNum">204</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tokenizer.unreadToken(t);</td></tr>
<tr><td class="LineNum">232</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return leftSide;</td>
<td class="LineNum">205</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return leftSide;</td></tr>
<tr><td class="LineNum">233</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">206</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">234</td><td class="Same">&nbsp;</td>
<td class="LineNum">207</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">235</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;private IdentifiedTerm exprB(int maxPriority, boolean commaIsEndMarker) throws InvalidTermException, IOException {</td>
<td class="LineNum">208</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;private IdentifiedTerm exprB(int maxPriority, boolean commaIsEndMarker) throws InvalidTermException, IOException {</td></tr>
<tr><td class="LineNum">236</td><td class="Same">&nbsp;</td>
<td class="LineNum">209</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">237</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//1. op(fx,n) exprA(n-1) | op(fy,n) exprA(n) | expr0</td>
<td class="LineNum">210</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//1. op(fx,n) exprA(n-1) | op(fy,n) exprA(n) | expr0</td></tr>
<tr><td class="LineNum">238</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IdentifiedTerm left = parseLeftSide(commaIsEndMarker, maxPriority);</td>
<td class="LineNum">211</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IdentifiedTerm left = parseLeftSide(commaIsEndMarker, maxPriority);</td></tr>
<tr><td class="LineNum">239</td><td class="Same">&nbsp;</td>
<td class="LineNum">212</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">240</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//2.left is followed by either xfx, xfy or xf operators, parse these</td>
<td class="LineNum">213</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//2.left is followed by either xfx, xfy or xf operators, parse these</td></tr>
<tr><td class="LineNum">241</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Token operator = tokenizer.readToken();</td>
<td class="LineNum">214</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Token operator = tokenizer.readToken();</td></tr>
<tr><td class="LineNum">242</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (; operator.isOperator(commaIsEndMarker); operator = tokenizer.readToken()) {</td>
<td class="LineNum">215</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (; operator.isOperator(commaIsEndMarker); operator = tokenizer.readToken()) {</td></tr>
<tr><td class="LineNum">243</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int XFX = opManager.opPrio(operator.seq, "xfx");</td>
<td class="LineNum">216</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int XFX = opManager.opPrio(operator.seq, "xfx");</td></tr>
<tr><td class="LineNum">244</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int XFY = opManager.opPrio(operator.seq, "xfy");</td>
<td class="LineNum">217</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int XFY = opManager.opPrio(operator.seq, "xfy");</td></tr>
<tr><td class="LineNum">245</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int XF = opManager.opPrio(operator.seq, "xf");</td>
<td class="LineNum">218</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int XF = opManager.opPrio(operator.seq, "xf");</td></tr>
<tr><td class="LineNum">246</td><td class="Same">&nbsp;</td>
<td class="LineNum">219</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">247</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//check that no operator has a priority higher than permitted</td>
<td class="LineNum">220</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//check that no operator has a priority higher than permitted</td></tr>
<tr><td class="LineNum">248</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//or a lower priority than the left side expression</td>
<td class="LineNum">221</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//or a lower priority than the left side expression</td></tr>
<tr><td class="LineNum">249</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (XFX &gt; maxPriority || XFX &lt; OperatorManager.OP_LOW) XFX = -1;</td>
<td class="LineNum">222</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (XFX &gt; maxPriority || XFX &lt; OperatorManager.OP_LOW) XFX = -1;</td></tr>
<tr><td class="LineNum">250</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (XFY &gt; maxPriority || XFY &lt; OperatorManager.OP_LOW) XFY = -1;</td>
<td class="LineNum">223</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (XFY &gt; maxPriority || XFY &lt; OperatorManager.OP_LOW) XFY = -1;</td></tr>
<tr><td class="LineNum">251</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (XF &gt; maxPriority || XF &lt; OperatorManager.OP_LOW) XF = -1;</td>
<td class="LineNum">224</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (XF &gt; maxPriority || XF &lt; OperatorManager.OP_LOW) XF = -1;</td></tr>
<tr><td class="LineNum">252</td><td class="Same">&nbsp;</td>
<td class="LineNum">225</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">253</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//XFX</td>
<td class="LineNum">226</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//XFX</td></tr>
<tr><td class="LineNum">254</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boolean haveAttemptedXFX = false;</td>
<td class="LineNum">227</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boolean haveAttemptedXFX = false;</td></tr>
<tr><td class="LineNum">255</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (XFX &gt;= XFY && XFX &gt;= XF && XFX &gt;= left.priority) {     //XFX has priority</td>
<td class="LineNum">228</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (XFX &gt;= XFY && XFX &gt;= XF && XFX &gt;= left.priority) {     //XFX has priority</td></tr>
<tr><td class="LineNum">256</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IdentifiedTerm found = exprA(XFX - 1, commaIsEndMarker);</td>
<td class="LineNum">229</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IdentifiedTerm found = exprA(XFX - 1, commaIsEndMarker);</td></tr>
<tr><td class="LineNum">257</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (found != null) {</td>
<td class="LineNum">230</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (found != null) {</td></tr>
<tr><td class="LineNum">258</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="InDiff">//left</span><span class="InSame">&nbsp;= </span><span class="InDiff">new IdentifiedTerm(XFX, </span><span class="InSame">new Struct(operator.seq, left.result, found.result)</span><span class="InDiff">)</span><span class="InSame">;</span></td><td class="LineNum">231</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="InDiff">Struct xfx</span><span class="InSame">&nbsp;= new Struct(operator.seq, left.result, found.result);</span></td></tr>
<tr><td class="LineNum">259</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="InDiff">&#183;&#183;&#183;&#183;</span><span class="InSame">left = </span><span class="InDiff">identifyTerm(XFX, </span><span class="InSame">new </span><span class="InDiff">Struct</span><span class="InSame">(</span><span class="InDiff">operator.seq</span><span class="InSame">, </span><span class="InDiff">left.result, found.result), tokenStart</span><span class="InSame">);</span></td><td class="LineNum">232</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="InDiff">&#183;&#183;&#183;&#183;</span><span class="InSame">left = new </span><span class="InDiff">IdentifiedTerm</span><span class="InSame">(</span><span class="InDiff">XFX</span><span class="InSame">, </span><span class="InDiff">xfx</span><span class="InSame">);</span></td></tr>
<tr><td class="LineNum">260</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue;</td>
<td class="LineNum">233</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue;</td></tr>
<tr><td class="LineNum">261</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else</td>
<td class="LineNum">234</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else</td></tr>
<tr><td class="LineNum">262</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;haveAttemptedXFX = true;</td>
<td class="LineNum">235</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;haveAttemptedXFX = true;</td></tr>
<tr><td class="LineNum">263</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">236</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">264</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//XFY</td>
<td class="LineNum">237</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//XFY</td></tr>
<tr><td class="LineNum">265</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (XFY &gt;= XF && XFY &gt;= left.priority){           //XFY has priority, or XFX has failed</td>
<td class="LineNum">238</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (XFY &gt;= XF && XFY &gt;= left.priority){           //XFY has priority, or XFX has failed</td></tr>
<tr><td class="LineNum">266</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IdentifiedTerm found = exprA(XFY, commaIsEndMarker);</td>
<td class="LineNum">239</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IdentifiedTerm found = exprA(XFY, commaIsEndMarker);</td></tr>
<tr><td class="LineNum">267</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (found != null) {</td>
<td class="LineNum">240</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (found != null) {</td></tr>
<tr><td class="LineNum">268</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="InDiff">//left</span><span class="InSame">&nbsp;= </span><span class="InDiff">new IdentifiedTerm(XFY, </span><span class="InSame">new Struct(operator.seq, left.result, found.result)</span><span class="InDiff">)</span><span class="InSame">;</span></td><td class="LineNum">241</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="InDiff">Struct xfy</span><span class="InSame">&nbsp;= new Struct(operator.seq, left.result, found.result);</span></td></tr>
<tr><td class="LineNum">269</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="InDiff">&#183;&#183;&#183;&#183;</span><span class="InSame">left = </span><span class="InDiff">identifyTerm(XFY, </span><span class="InSame">new </span><span class="InDiff">Struct</span><span class="InSame">(</span><span class="InDiff">operator.seq</span><span class="InSame">, </span><span class="InDiff">left.result, found.result), tokenStart</span><span class="InSame">);</span></td><td class="LineNum">242</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="InDiff">&#183;&#183;&#183;&#183;</span><span class="InSame">left = new </span><span class="InDiff">IdentifiedTerm</span><span class="InSame">(</span><span class="InDiff">XFY</span><span class="InSame">, </span><span class="InDiff">xfy</span><span class="InSame">);</span></td></tr>
<tr><td class="LineNum">270</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue;</td>
<td class="LineNum">243</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue;</td></tr>
<tr><td class="LineNum">271</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">244</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">272</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">245</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">273</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//XF</td>
<td class="LineNum">246</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//XF</td></tr>
<tr><td class="LineNum">274</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (XF &gt;= left.priority)                   //XF has priority, or XFX and/or XFY has failed</td>
<td class="LineNum">247</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (XF &gt;= left.priority)                   //XF has priority, or XFX and/or XFY has failed</td></tr>
<tr><td class="LineNum">275</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="InDiff">//</span><span class="InSame">return new IdentifiedTerm(XF, new Struct(operator.seq, left.result));</span></td><td class="LineNum">248</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return new IdentifiedTerm(XF, new Struct(operator.seq, left.result));</span></td></tr>
<tr><td class="LineNum">276</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return identifyTerm(XF, new Struct(operator.seq, left.result), tokenStart);</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">277</td><td class="Same">&nbsp;</td>
<td class="LineNum">249</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">278</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//XFX did not have top priority, but XFY failed</td>
<td class="LineNum">250</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//XFX did not have top priority, but XFY failed</td></tr>
<tr><td class="LineNum">279</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!haveAttemptedXFX && XFX &gt;= left.priority) {</td>
<td class="LineNum">251</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!haveAttemptedXFX && XFX &gt;= left.priority) {</td></tr>
<tr><td class="LineNum">280</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IdentifiedTerm found = exprA(XFX - 1, commaIsEndMarker);</td>
<td class="LineNum">252</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IdentifiedTerm found = exprA(XFX - 1, commaIsEndMarker);</td></tr>
<tr><td class="LineNum">281</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (found != null) {</td>
<td class="LineNum">253</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (found != null) {</td></tr>
<tr><td class="LineNum">282</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="InDiff">//left</span><span class="InSame">&nbsp;= </span><span class="InDiff">new IdentifiedTerm(XFX, </span><span class="InSame">new Struct(operator.seq, left.result, found.result)</span><span class="InDiff">)</span><span class="InSame">;</span></td><td class="LineNum">254</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="InDiff">Struct xfx</span><span class="InSame">&nbsp;= new Struct(operator.seq, left.result, found.result);</span></td></tr>
<tr><td class="LineNum">283</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="InDiff">&#183;&#183;&#183;&#183;</span><span class="InSame">left = </span><span class="InDiff">identifyTerm(XFX, </span><span class="InSame">new </span><span class="InDiff">Struct</span><span class="InSame">(</span><span class="InDiff">operator.seq</span><span class="InSame">, </span><span class="InDiff">left.result, found.result), tokenStart</span><span class="InSame">);</span></td><td class="LineNum">255</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="InDiff">&#183;&#183;&#183;&#183;</span><span class="InSame">left = new </span><span class="InDiff">IdentifiedTerm</span><span class="InSame">(</span><span class="InDiff">XFX</span><span class="InSame">, </span><span class="InDiff">xfx</span><span class="InSame">);</span></td></tr>
<tr><td class="LineNum">284</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue;</td>
<td class="LineNum">256</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue;</td></tr>
<tr><td class="LineNum">285</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">257</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">286</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">258</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">287</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;</td>
<td class="LineNum">259</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;</td></tr>
<tr><td class="LineNum">288</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">260</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">289</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tokenizer.unreadToken(operator);</td>
<td class="LineNum">261</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tokenizer.unreadToken(operator);</td></tr>
<tr><td class="LineNum">290</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return left;</td>
<td class="LineNum">262</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return left;</td></tr>
<tr><td class="LineNum">291</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">263</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">292</td><td class="Same">&nbsp;</td>
<td class="LineNum">264</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">293</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td>
<td class="LineNum">265</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td></tr>
<tr><td class="LineNum">294</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Parses and returns a valid 'leftside' of an expression.</td>
<td class="LineNum">266</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Parses and returns a valid 'leftside' of an expression.</td></tr>
<tr><td class="LineNum">295</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* If the left side starts with a prefix, it consumes other expressions with a lower priority than itself.</td>
<td class="LineNum">267</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* If the left side starts with a prefix, it consumes other expressions with a lower priority than itself.</td></tr>
<tr><td class="LineNum">296</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* If the left side does not have a prefix it must be an expr0.</td>
<td class="LineNum">268</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* If the left side does not have a prefix it must be an expr0.</td></tr>
<tr><td class="LineNum">297</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*</td>
<td class="LineNum">269</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*</td></tr>
<tr><td class="LineNum">298</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @param commaIsEndMarker used when the leftside is part of and argument list of expressions</td>
<td class="LineNum">270</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @param commaIsEndMarker used when the leftside is part of and argument list of expressions</td></tr>
<tr><td class="LineNum">299</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @param maxPriority operators with a higher priority than this will effectivly end the expression</td>
<td class="LineNum">271</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @param maxPriority operators with a higher priority than this will effectivly end the expression</td></tr>
<tr><td class="LineNum">300</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @return a wrapper of: 1. term correctly structured and 2. the priority of its root operator</td>
<td class="LineNum">272</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @return a wrapper of: 1. term correctly structured and 2. the priority of its root operator</td></tr>
<tr><td class="LineNum">301</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @throws InvalidTermException</td>
<td class="LineNum">273</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @throws InvalidTermException</td></tr>
<tr><td class="LineNum">302</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td>
<td class="LineNum">274</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td></tr>
<tr><td class="LineNum">303</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;private IdentifiedTerm parseLeftSide(boolean commaIsEndMarker, int maxPriority) throws InvalidTermException, IOException {</td>
<td class="LineNum">275</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;private IdentifiedTerm parseLeftSide(boolean commaIsEndMarker, int maxPriority) throws InvalidTermException, IOException {</td></tr>
<tr><td class="LineNum">304</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//1. prefix expression</td>
<td class="LineNum">276</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//1. prefix expression</td></tr>
<tr><td class="LineNum">305</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Token f = tokenizer.readToken();</td>
<td class="LineNum">277</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Token f = tokenizer.readToken();</td></tr>
<tr><td class="LineNum">306</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (f.isOperator(commaIsEndMarker)) {</td>
<td class="LineNum">278</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (f.isOperator(commaIsEndMarker)) {</td></tr>
<tr><td class="LineNum">307</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int FX = opManager.opPrio(f.seq, "fx");</td>
<td class="LineNum">279</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int FX = opManager.opPrio(f.seq, "fx");</td></tr>
<tr><td class="LineNum">308</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int FY = opManager.opPrio(f.seq, "fy");</td>
<td class="LineNum">280</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int FY = opManager.opPrio(f.seq, "fy");</td></tr>
<tr><td class="LineNum">309</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">281</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">310</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (f.seq.equals("-")) {</td>
<td class="LineNum">282</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (f.seq.equals("-")) {</td></tr>
<tr><td class="LineNum">311</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Token t = tokenizer.readToken();</td>
<td class="LineNum">283</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Token t = tokenizer.readToken();</td></tr>
<tr><td class="LineNum">312</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (t.isNumber())</td>
<td class="LineNum">284</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (t.isNumber())</td></tr>
<tr><td class="LineNum">313</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="InDiff">//</span><span class="InSame">return new IdentifiedTerm(0, Parser.createNumber("-" + t.seq));</span></td><td class="LineNum">285</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return new IdentifiedTerm(0, Parser.createNumber("-" + t.seq));</span></td></tr>
<tr><td class="LineNum">314</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return identifyTerm(0, Parser.createNumber("-" + t.seq), tokenStart);</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">315</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else</td>
<td class="LineNum">286</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else</td></tr>
<tr><td class="LineNum">316</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tokenizer.unreadToken(t);</td>
<td class="LineNum">287</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tokenizer.unreadToken(t);</td></tr>
<tr><td class="LineNum">317</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">288</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">318</td><td class="Same">&nbsp;</td>
<td class="LineNum">289</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">319</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//check that no operator has a priority higher than permitted</td>
<td class="LineNum">290</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//check that no operator has a priority higher than permitted</td></tr>
<tr><td class="LineNum">320</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (FY &gt; maxPriority) FY = -1;</td>
<td class="LineNum">291</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (FY &gt; maxPriority) FY = -1;</td></tr>
<tr><td class="LineNum">321</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (FX &gt; maxPriority) FX = -1;</td>
<td class="LineNum">292</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (FX &gt; maxPriority) FX = -1;</td></tr>
<tr><td class="LineNum">322</td><td class="Same">&nbsp;</td>
<td class="LineNum">293</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">323</td><td class="Same">&nbsp;</td>
<td class="LineNum">294</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">324</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//FX has priority over FY</td>
<td class="LineNum">295</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//FX has priority over FY</td></tr>
<tr><td class="LineNum">325</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boolean haveAttemptedFX = false;</td>
<td class="LineNum">296</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boolean haveAttemptedFX = false;</td></tr>
<tr><td class="LineNum">326</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (FX &gt;= FY && FX &gt;= OperatorManager.OP_LOW){</td>
<td class="LineNum">297</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (FX &gt;= FY && FX &gt;= OperatorManager.OP_LOW){</td></tr>
<tr><td class="LineNum">327</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IdentifiedTerm found = exprA(FX-1, commaIsEndMarker);    //op(fx, n) exprA(n - 1)</td>
<td class="LineNum">298</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IdentifiedTerm found = exprA(FX-1, commaIsEndMarker);    //op(fx, n) exprA(n - 1)</td></tr>
<tr><td class="LineNum">328</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (found != null)</td>
<td class="LineNum">299</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (found != null)</td></tr>
<tr><td class="LineNum">329</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="InDiff">//</span><span class="InSame">return new IdentifiedTerm(FX, new Struct(f.seq, found.result));</span></td><td class="LineNum">300</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return new IdentifiedTerm(FX, new Struct(f.seq, found.result));</span></td></tr>
<tr><td class="LineNum">330</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return identifyTerm(FX, new Struct(f.seq, found.result), tokenStart);</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">331</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else</td>
<td class="LineNum">301</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else</td></tr>
<tr><td class="LineNum">332</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;haveAttemptedFX = true;</td>
<td class="LineNum">302</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;haveAttemptedFX = true;</td></tr>
<tr><td class="LineNum">333</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">303</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">334</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//FY has priority over FX, or FX has failed</td>
<td class="LineNum">304</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//FY has priority over FX, or FX has failed</td></tr>
<tr><td class="LineNum">335</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (FY &gt;= OperatorManager.OP_LOW) {</td>
<td class="LineNum">305</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (FY &gt;= OperatorManager.OP_LOW) {</td></tr>
<tr><td class="LineNum">336</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IdentifiedTerm found = exprA(FY, commaIsEndMarker); //op(fy,n) exprA(1200)  or   op(fy,n) exprA(n)</td>
<td class="LineNum">306</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IdentifiedTerm found = exprA(FY, commaIsEndMarker); //op(fy,n) exprA(1200)  or   op(fy,n) exprA(n)</td></tr>
<tr><td class="LineNum">337</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (found != null)</td>
<td class="LineNum">307</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (found != null)</td></tr>
<tr><td class="LineNum">338</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="InDiff">//</span><span class="InSame">return new IdentifiedTerm(FY, new Struct(f.seq, found.result));</span></td><td class="LineNum">308</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return new IdentifiedTerm(FY, new Struct(f.seq, found.result));</span></td></tr>
<tr><td class="LineNum">339</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return identifyTerm(FY, new Struct(f.seq, found.result), tokenStart);</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">340</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">309</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">341</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//FY has priority over FX, but FY failed</td>
<td class="LineNum">310</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//FY has priority over FX, but FY failed</td></tr>
<tr><td class="LineNum">342</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!haveAttemptedFX && FX &gt;= OperatorManager.OP_LOW) {</td>
<td class="LineNum">311</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!haveAttemptedFX && FX &gt;= OperatorManager.OP_LOW) {</td></tr>
<tr><td class="LineNum">343</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IdentifiedTerm found = exprA(FX-1, commaIsEndMarker);    //op(fx, n) exprA(n - 1)</td>
<td class="LineNum">312</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IdentifiedTerm found = exprA(FX-1, commaIsEndMarker);    //op(fx, n) exprA(n - 1)</td></tr>
<tr><td class="LineNum">344</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (found != null)</td>
<td class="LineNum">313</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (found != null)</td></tr>
<tr><td class="LineNum">345</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="InDiff">//</span><span class="InSame">return new IdentifiedTerm(FX, new Struct(f.seq, found.result));</span></td><td class="LineNum">314</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return new IdentifiedTerm(FX, new Struct(f.seq, found.result));</span></td></tr>
<tr><td class="LineNum">346</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return identifyTerm(FX, new Struct(f.seq, found.result), tokenStart);</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">347</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">315</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">348</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">316</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">349</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tokenizer.unreadToken(f);</td>
<td class="LineNum">317</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tokenizer.unreadToken(f);</td></tr>
<tr><td class="LineNum">350</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//2. expr0</td>
<td class="LineNum">318</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//2. expr0</td></tr>
<tr><td class="LineNum">351</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return new IdentifiedTerm(0, expr0());</td>
<td class="LineNum">319</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return new IdentifiedTerm(0, expr0());</td></tr>
<tr><td class="LineNum">352</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">320</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">353</td><td class="Same">&nbsp;</td>
<td class="LineNum">321</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">354</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td>
<td class="LineNum">322</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td></tr>
<tr><td class="LineNum">355</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* exprA(0) ::= integer |</td>
<td class="LineNum">323</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* exprA(0) ::= integer |</td></tr>
<tr><td class="LineNum">356</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*              float |</td>
<td class="LineNum">324</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*              float |</td></tr>
<tr><td class="LineNum">357</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*              variable |</td>
<td class="LineNum">325</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*              variable |</td></tr>
<tr><td class="LineNum">358</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*              atom |</td>
<td class="LineNum">326</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*              atom |</td></tr>
<tr><td class="LineNum">359</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*              atom( exprA(1200) { , exprA(1200) }* ) |</td>
<td class="LineNum">327</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*              atom( exprA(1200) { , exprA(1200) }* ) |</td></tr>
<tr><td class="LineNum">360</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*              '[' exprA(1200) { , exprA(1200) }* [ | exprA(1200) ] ']' |</td>
<td class="LineNum">328</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*              '[' exprA(1200) { , exprA(1200) }* [ | exprA(1200) ] ']' |</td></tr>
<tr><td class="LineNum">361</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*              '{' [ exprA(1200) ] '}' |</td>
<td class="LineNum">329</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*              '{' [ exprA(1200) ] '}' |</td></tr>
<tr><td class="LineNum">362</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*              '(' exprA(1200) ')'</td>
<td class="LineNum">330</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*              '(' exprA(1200) ')'</td></tr>
<tr><td class="LineNum">363</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td>
<td class="LineNum">331</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td></tr>
<tr><td class="LineNum">364</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;private Term expr0() throws InvalidTermException, IOException {</td>
<td class="LineNum">332</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;private Term expr0() throws InvalidTermException, IOException {</td></tr>
<tr><td class="LineNum">365</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Token t1 = tokenizer.readToken();</td>
<td class="LineNum">333</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Token t1 = tokenizer.readToken();</td></tr>
<tr><td class="LineNum">366</td><td class="Changed"><span class="InDiff">&#183;&#183;&#183;&#183;&#183;&#183;&#183;&#183;int tempStart = tokenizer.tokenStart();</span></td><td class="LineNum">334</td><td class="Changed">&nbsp;</td></tr>
<tr><td class="LineNum">367</td><td class="Changed">&nbsp;</td><td class="LineNum">335</td><td class="Changed"><span class="InDiff">&#183;&#183;&#183;&#183;&#183;&#183;&#183;&#183;if (t1.isType(Tokenizer.INTEGER))</span></td></tr>
<tr><td class="LineNum">368</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="InDiff">if (t1</span><span class="InSame">.</span><span class="InDiff">isType</span><span class="InSame">(</span><span class="InDiff">Tokenizer</span><span class="InSame">.</span><span class="InDiff">INTEGER)) {</span></td><td class="LineNum">336</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="InDiff">&#183;&#183;&#183;&#183;return Parser</span><span class="InSame">.</span><span class="InDiff">parseInteger</span><span class="InSame">(</span><span class="InDiff">t1</span><span class="InSame">.</span><span class="InDiff">seq); //todo moved method to Number</span></td></tr>
<tr><td class="LineNum">369</td><td class="Changed"><span class="InDiff">&#183;&#183;&#183;&#183;&#183;&#183;&#183;&#183;&#183;&#183;&#183;&#183;Term i = Parser.parseInteger(t1.seq);</span></td><td class="LineNum">337</td><td class="Changed">&nbsp;</td></tr>
<tr><td class="LineNum">370</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="InDiff">&#183;&#183;&#183;&#183;map</span><span class="InSame">(</span><span class="InDiff">i, t</span><span class="InSame">okenizer.</span><span class="InDiff">tokenStart());</span></td><td class="LineNum">338</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="InDiff">if (t1.isType</span><span class="InSame">(</span><span class="InDiff">T</span><span class="InSame">okenizer.</span><span class="InDiff">FLOAT))</span></td></tr>
<tr><td class="LineNum">371</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return </span><span class="InDiff">i;</span><span class="InSame">&nbsp;//todo moved method to Number</span></td><td class="LineNum">339</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return </span><span class="InDiff">Parser.parseFloat(t1.seq);  </span><span class="InSame">&nbsp;//todo moved method to Number</span></td></tr>
<tr><td class="LineNum">372</td><td class="Changed"><span class="InDiff">&#183;&#183;&#183;&#183;&#183;&#183;&#183;&#183;}</span></td><td class="LineNum">340</td><td class="Changed">&nbsp;</td></tr>
<tr><td class="LineNum">373</td><td class="Changed">&nbsp;</td><td class="LineNum">341</td><td class="Changed"><span class="InDiff">&#183;&#183;&#183;&#183;&#183;&#183;&#183;&#183;if (t1.isType(Tokenizer.VARIABLE))</span></td></tr>
<tr><td class="LineNum">374</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="InDiff">if </span><span class="InSame">(t1.</span><span class="InDiff">isType</span><span class="InSame">(</span><span class="InDiff">Tokenizer.FLOAT)) {</span></td><td class="LineNum">342</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="InDiff">&#183;&#183;&#183;&#183;return new Var</span><span class="InSame">(t1.</span><span class="InDiff">seq);             //todo switched to use the internal check for "_" in Var</span><span class="InSame">(</span><span class="InDiff">String)</span></td></tr>
<tr><td class="LineNum">375</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Term f = Parser.parseFloat(t1.seq);</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">376</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;map(f, tokenizer.tokenStart());</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">377</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return f;   //todo moved method to Number</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">378</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">379</td><td class="SrcOnly">&nbsp;</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">380</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (t1.isType(Tokenizer.VARIABLE)) {</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">381</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Term v = new Var(t1.seq);</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">382</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;map(v, tokenizer.tokenStart());</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">383</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return v;             //todo switched to use the internal check for "_" in Var(String)</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">384</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">385</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">343</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">386</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (t1.isType(Tokenizer.ATOM) || t1.isType(Tokenizer.SQ_SEQUENCE) || t1.isType(Tokenizer.DQ_SEQUENCE)) {</td>
<td class="LineNum">344</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (t1.isType(Tokenizer.ATOM) || t1.isType(Tokenizer.SQ_SEQUENCE) || t1.isType(Tokenizer.DQ_SEQUENCE)) {</td></tr>
<tr><td class="LineNum">387</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!t1.isFunctor())</span><span class="InDiff">&#183;{</span></td><td class="LineNum">345</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!t1.isFunctor())</span></td></tr>
<tr><td class="LineNum">388</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="InDiff">&#183;&#183;&#183;&#183;Term</span><span class="InSame">&nbsp;</span><span class="InDiff">f = </span><span class="InSame">new Struct(t1.seq);</span></td><td class="LineNum">346</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="InDiff">&#183;&#183;&#183;&#183;return</span><span class="InSame">&nbsp;new Struct(t1.seq);</span></td></tr>
<tr><td class="LineNum">389</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;map(f, tokenizer.tokenStart());</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">390</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return f;</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">391</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">392</td><td class="Same">&nbsp;</td>
<td class="LineNum">347</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">393</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String functor = t1.seq;</td>
<td class="LineNum">348</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String functor = t1.seq;</td></tr>
<tr><td class="LineNum">394</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">395</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Token t2 = tokenizer.readToken();   //reading left par</td>
<td class="LineNum">349</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Token t2 = tokenizer.readToken();   //reading left par</td></tr>
<tr><td class="LineNum">396</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!t2.isType(Tokenizer.LPAR))</td>
<td class="LineNum">350</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!t2.isType(Tokenizer.LPAR))</td></tr>
<tr><td class="LineNum">397</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new InvalidTermException("Something identified as functor misses its first left parenthesis");//todo check can be skipped</span></td><td class="LineNum">351</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new InvalidTermException("</span><span class="InDiff">bug in parsing process. </span><span class="InSame">Something identified as functor misses its first left parenthesis");//todo check can be skipped</span></td></tr>
<tr><td class="LineNum">398</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LinkedList a = expr0_arglist();     //reading arguments</td>
<td class="LineNum">352</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LinkedList a = expr0_arglist();     //reading arguments</td></tr>
<tr><td class="LineNum">399</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Token t3 = tokenizer.readToken();</td>
<td class="LineNum">353</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Token t3 = tokenizer.readToken();</td></tr>
<tr><td class="LineNum">400</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (t3.isType(Tokenizer.RPAR)) </span><span class="InDiff">{ </span><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//reading right par</span></td><td class="LineNum">354</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (t3.isType(Tokenizer.RPAR))      //reading right par</span></td></tr>
<tr><td class="LineNum">401</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="InDiff">&#183;&#183;&#183;&#183;Term</span><span class="InSame">&nbsp;</span><span class="InDiff">c = </span><span class="InSame">new Struct(functor, a);</span></td><td class="LineNum">355</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="InDiff">&#183;&#183;&#183;&#183;return</span><span class="InSame">&nbsp;new Struct(functor, a);</span></td></tr>
<tr><td class="LineNum">402</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;map(c, tempStart);                </td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">403</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return c;</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">404</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">405</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new InvalidTermException("Missing right parenthesis: ("+a + " -&gt; here &lt;-");</td>
<td class="LineNum">356</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new InvalidTermException("Missing right parenthesis: ("+a + " -&gt; here &lt;-");</td></tr>
<tr><td class="LineNum">406</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">357</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">407</td><td class="Same">&nbsp;</td>
<td class="LineNum">358</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">408</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (t1.isType(Tokenizer.LPAR)) {</td>
<td class="LineNum">359</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (t1.isType(Tokenizer.LPAR)) {</td></tr>
<tr><td class="LineNum">409</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Term term = expr(false);</td>
<td class="LineNum">360</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Term term = expr(false);</td></tr>
<tr><td class="LineNum">410</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (tokenizer.readToken().isType(Tokenizer.RPAR))</td>
<td class="LineNum">361</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (tokenizer.readToken().isType(Tokenizer.RPAR))</td></tr>
<tr><td class="LineNum">411</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return term;</td>
<td class="LineNum">362</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return term;</td></tr>
<tr><td class="LineNum">412</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new InvalidTermException("Missing right parenthesis: ("+term + " -&gt; here &lt;-");</td>
<td class="LineNum">363</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new InvalidTermException("Missing right parenthesis: ("+term + " -&gt; here &lt;-");</td></tr>
<tr><td class="LineNum">413</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">364</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">414</td><td class="Same">&nbsp;</td>
<td class="LineNum">365</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">415</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (t1.isType(Tokenizer.LBRA)) {</td>
<td class="LineNum">366</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (t1.isType(Tokenizer.LBRA)) {</td></tr>
<tr><td class="LineNum">416</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Token t2 = tokenizer.readToken();</td>
<td class="LineNum">367</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Token t2 = tokenizer.readToken();</td></tr>
<tr><td class="LineNum">417</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (t2.isType(Tokenizer.RBRA))</td>
<td class="LineNum">368</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (t2.isType(Tokenizer.RBRA))</td></tr>
<tr><td class="LineNum">418</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return new Struct();</td>
<td class="LineNum">369</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return new Struct();</td></tr>
<tr><td class="LineNum">419</td><td class="Same">&nbsp;</td>
<td class="LineNum">370</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">420</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tokenizer.unreadToken(t2);</td>
<td class="LineNum">371</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tokenizer.unreadToken(t2);</td></tr>
<tr><td class="LineNum">421</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Term term = expr0_list();</td>
<td class="LineNum">372</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Term term = expr0_list();</td></tr>
<tr><td class="LineNum">422</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (tokenizer.readToken().isType(Tokenizer.RBRA))</td>
<td class="LineNum">373</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (tokenizer.readToken().isType(Tokenizer.RBRA))</td></tr>
<tr><td class="LineNum">423</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return term;</td>
<td class="LineNum">374</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return term;</td></tr>
<tr><td class="LineNum">424</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new InvalidTermException("Missing right bracket: ["+term + " -&gt; here &lt;-");</td>
<td class="LineNum">375</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new InvalidTermException("Missing right bracket: ["+term + " -&gt; here &lt;-");</td></tr>
<tr><td class="LineNum">425</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">376</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">426</td><td class="Same">&nbsp;</td>
<td class="LineNum">377</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">427</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (t1.isType(Tokenizer.LBRA2)) {</td>
<td class="LineNum">378</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (t1.isType(Tokenizer.LBRA2)) {</td></tr>
<tr><td class="LineNum">428</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Token t2 = tokenizer.readToken();</td>
<td class="LineNum">379</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Token t2 = tokenizer.readToken();</td></tr>
<tr><td class="LineNum">429</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (t2.isType(Tokenizer.RBRA2))</span><span class="InDiff">&#183;{</span></td><td class="LineNum">380</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (t2.isType(Tokenizer.RBRA2))</span></td></tr>
<tr><td class="LineNum">430</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="InDiff">&#183;&#183;&#183;&#183;Term</span><span class="InSame">&nbsp;</span><span class="InDiff">b = </span><span class="InSame">new Struct("{}");</span></td><td class="LineNum">381</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="InDiff">&#183;&#183;&#183;&#183;return</span><span class="InSame">&nbsp;new Struct("{}");</span></td></tr>
<tr><td class="LineNum">431</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;map(b, tempStart);</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">432</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return b;</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">433</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">434</td><td class="Same">&nbsp;</td>
<td class="LineNum">382</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">435</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tokenizer.unreadToken(t2);</td>
<td class="LineNum">383</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tokenizer.unreadToken(t2);</td></tr>
<tr><td class="LineNum">436</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Term arg = expr(false);</td>
<td class="LineNum">384</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Term arg = expr(false);</td></tr>
<tr><td class="LineNum">437</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t2 = tokenizer.readToken();</td>
<td class="LineNum">385</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t2 = tokenizer.readToken();</td></tr>
<tr><td class="LineNum">438</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (t2.isType(Tokenizer.RBRA2))</span><span class="InDiff">&#183;{</span></td><td class="LineNum">386</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (t2.isType(Tokenizer.RBRA2))</span></td></tr>
<tr><td class="LineNum">439</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="InDiff">&#183;&#183;&#183;&#183;Term</span><span class="InSame">&nbsp;</span><span class="InDiff">b = </span><span class="InSame">new Struct("{}", arg);</span></td><td class="LineNum">387</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="InDiff">&#183;&#183;&#183;&#183;return</span><span class="InSame">&nbsp;new Struct("{}", arg);</span></td></tr>
<tr><td class="LineNum">440</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;map(b, tempStart);</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">441</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return b;</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">442</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">443</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new InvalidTermException("Missing right braces: {"+arg + " -&gt; here &lt;-");</td>
<td class="LineNum">388</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new InvalidTermException("Missing right braces: {"+arg + " -&gt; here &lt;-");</td></tr>
<tr><td class="LineNum">444</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">389</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">445</td><td class="Same">&nbsp;</td>
<td class="LineNum">390</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">446</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new InvalidTermException("</span><span class="InDiff">Unexpected</span><span class="InSame">&nbsp;token </span><span class="InDiff">'" + </span><span class="InSame">t1.seq</span><span class="InDiff">&#183;+ "'"</span><span class="InSame">);</span></td><td class="LineNum">391</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new InvalidTermException("</span><span class="InDiff">The following</span><span class="InSame">&nbsp;token </span><span class="InDiff">could not be identified: "+</span><span class="InSame">t1.seq);</span></td></tr>
<tr><td class="LineNum">447</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">392</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">448</td><td class="Same">&nbsp;</td>
<td class="LineNum">393</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">449</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;//todo make non-recursive?</td>
<td class="LineNum">394</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;//todo make non-recursive?</td></tr>
<tr><td class="LineNum">450</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;private Term expr0_list() throws InvalidTermException, IOException {</td>
<td class="LineNum">395</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;private Term expr0_list() throws InvalidTermException, IOException {</td></tr>
<tr><td class="LineNum">451</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Term head = expr(true);</td>
<td class="LineNum">396</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Term head = expr(true);</td></tr>
<tr><td class="LineNum">452</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Token t = tokenizer.readToken();</td>
<td class="LineNum">397</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Token t = tokenizer.readToken();</td></tr>
<tr><td class="LineNum">453</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (",".equals(t.seq))</td>
<td class="LineNum">398</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (",".equals(t.seq))</td></tr>
<tr><td class="LineNum">454</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return new Struct(head, expr0_list());</td>
<td class="LineNum">399</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return new Struct(head, expr0_list());</td></tr>
<tr><td class="LineNum">455</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ("|".equals(t.seq))</td>
<td class="LineNum">400</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ("|".equals(t.seq))</td></tr>
<tr><td class="LineNum">456</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return new Struct(head, expr(true));</td>
<td class="LineNum">401</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return new Struct(head, expr(true));</td></tr>
<tr><td class="LineNum">457</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ("]".equals(t.seq)) {</td>
<td class="LineNum">402</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ("]".equals(t.seq)) {</td></tr>
<tr><td class="LineNum">458</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tokenizer.unreadToken(t);</td>
<td class="LineNum">403</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tokenizer.unreadToken(t);</td></tr>
<tr><td class="LineNum">459</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return new Struct(head, new Struct());</td>
<td class="LineNum">404</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return new Struct(head, new Struct());</td></tr>
<tr><td class="LineNum">460</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">405</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">461</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new InvalidTermException("The expression: " + head + "</span><span class="InDiff">&#183;</span><span class="InSame">is not followed by either a ',' or '|'  or ']'");</span></td><td class="LineNum">406</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new InvalidTermException("The expression: " + head + "</span><span class="InDiff">\n</span><span class="InSame">is not followed by either a ',' or '|'  or ']'</span><span class="InDiff">.</span><span class="InSame">");</span></td></tr>
<tr><td class="LineNum">462</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">407</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">463</td><td class="Same">&nbsp;</td>
<td class="LineNum">408</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">464</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;//todo make non-recursive</td>
<td class="LineNum">409</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;//todo make non-recursive</td></tr>
<tr><td class="LineNum">465</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;private LinkedList expr0_arglist() throws InvalidTermException, IOException {</td>
<td class="LineNum">410</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;private LinkedList expr0_arglist() throws InvalidTermException, IOException {</td></tr>
<tr><td class="LineNum">466</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Term head = expr(true);</td>
<td class="LineNum">411</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Term head = expr(true);</td></tr>
<tr><td class="LineNum">467</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Token t = tokenizer.readToken();</td>
<td class="LineNum">412</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Token t = tokenizer.readToken();</td></tr>
<tr><td class="LineNum">468</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (",".equals(t.seq)) {</td>
<td class="LineNum">413</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (",".equals(t.seq)) {</td></tr>
<tr><td class="LineNum">469</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LinkedList l = expr0_arglist();</td>
<td class="LineNum">414</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LinkedList l = expr0_arglist();</td></tr>
<tr><td class="LineNum">470</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;l.addFirst(head);</td>
<td class="LineNum">415</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;l.addFirst(head);</td></tr>
<tr><td class="LineNum">471</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return l;</td>
<td class="LineNum">416</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return l;</td></tr>
<tr><td class="LineNum">472</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">417</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">473</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (")".equals(t.seq)) {</td>
<td class="LineNum">418</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (")".equals(t.seq)) {</td></tr>
<tr><td class="LineNum">474</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tokenizer.unreadToken(t);</td>
<td class="LineNum">419</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tokenizer.unreadToken(t);</td></tr>
<tr><td class="LineNum">475</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LinkedList l = new LinkedList();</td>
<td class="LineNum">420</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LinkedList l = new LinkedList();</td></tr>
<tr><td class="LineNum">476</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;l.add(head);</td>
<td class="LineNum">421</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;l.add(head);</td></tr>
<tr><td class="LineNum">477</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return l;</td>
<td class="LineNum">422</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return l;</td></tr>
<tr><td class="LineNum">478</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">423</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">479</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new InvalidTermException("The argument: " + head + "</span><span class="InDiff">&#183;</span><span class="InSame">is not followed by either a ',' or ')'</span><span class="InDiff">"</span><span class="InSame">);</span></td><td class="LineNum">424</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new InvalidTermException("The argument: " + head + "</span><span class="InDiff">\n</span><span class="InSame">is not followed by either a ',' or ')'</span><span class="InDiff">.\nline: " + tokenizer.lineno()</span><span class="InSame">);</span></td></tr>
<tr><td class="LineNum">480</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">425</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">481</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">426</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">482</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;// commodity methods to parse numbers</td>
<td class="LineNum">427</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;// commodity methods to parse numbers</td></tr>
<tr><td class="LineNum">483</td><td class="Same">&nbsp;</td>
<td class="LineNum">428</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">484</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;static Number parseInteger(String s) {</td>
<td class="LineNum">429</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;static Number parseInteger(String s) {</td></tr>
<tr><td class="LineNum">485</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;long num = java.lang.Long.parseLong(s);</td>
<td class="LineNum">430</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;long num = java.lang.Long.parseLong(s);</td></tr>
<tr><td class="LineNum">486</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (num &gt; Integer.MIN_VALUE && num &lt; Integer.MAX_VALUE)</td>
<td class="LineNum">431</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (num &gt; Integer.MIN_VALUE && num &lt; Integer.MAX_VALUE)</td></tr>
<tr><td class="LineNum">487</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return new Int((int) num);</td>
<td class="LineNum">432</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return new Int((int) num);</td></tr>
<tr><td class="LineNum">488</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else</td>
<td class="LineNum">433</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else</td></tr>
<tr><td class="LineNum">489</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return new Long(num);</td>
<td class="LineNum">434</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return new Long(num);</td></tr>
<tr><td class="LineNum">490</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">435</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">491</td><td class="Same">&nbsp;</td>
<td class="LineNum">436</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">492</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;static Double parseFloat(String s) {</td>
<td class="LineNum">437</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;static Double parseFloat(String s) {</td></tr>
<tr><td class="LineNum">493</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double num = java.lang.Double.parseDouble(s);</td>
<td class="LineNum">438</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double num = java.lang.Double.parseDouble(s);</td></tr>
<tr><td class="LineNum">494</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return new Double(num);</td>
<td class="LineNum">439</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return new Double(num);</td></tr>
<tr><td class="LineNum">495</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">440</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">496</td><td class="Same">&nbsp;</td>
<td class="LineNum">441</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">497</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;static Number createNumber(String s){</td>
<td class="LineNum">442</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;static Number createNumber(String s){</td></tr>
<tr><td class="LineNum">498</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try {</td>
<td class="LineNum">443</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try {</td></tr>
<tr><td class="LineNum">499</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return parseInteger(s);</td>
<td class="LineNum">444</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return parseInteger(s);</td></tr>
<tr><td class="LineNum">500</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} catch (Exception e) {</td>
<td class="LineNum">445</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} catch (Exception e) {</td></tr>
<tr><td class="LineNum">501</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return parseFloat(s);</td>
<td class="LineNum">446</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return parseFloat(s);</td></tr>
<tr><td class="LineNum">502</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">447</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">503</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">448</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">504</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">449</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">505</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;/*</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">506</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Francesco Fabbri</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">507</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* 18/04/2011</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">508</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Mapping terms on text</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">509</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">510</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">511</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;private IdentifiedTerm identifyTerm(int priority, Term term, int offset) {</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">512</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;map(term, offset);</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">513</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return new IdentifiedTerm(priority, term);</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">514</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;}</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">515</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">516</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;private void map(Term term, int offset) {</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">517</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (offsetsMap != null)</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">518</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;offsetsMap.put(term, offset);</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">519</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;}</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">520</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">521</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;public HashMap&lt;Term, Integer&gt; getTextMapping() {</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">522</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return offsetsMap;</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">523</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;}</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">524</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">525</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;/*</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">526</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Francesco Fabbri</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">527</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* 19/04/2011</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">528</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Offset / line tracking</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">529</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">530</td><td class="SrcOnly">&nbsp;</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">531</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;@Override</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">532</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public int getCurrentLine() {</td>
<td class="LineNum">450</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public int getCurrentLine() {</td></tr>
<tr><td class="LineNum">533</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return tokenizer.lineno();</td>
<td class="LineNum">451</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return tokenizer.lineno();</td></tr>
<tr><td class="LineNum">534</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;}</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">535</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">536</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;@Override</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">537</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;public int getCurrentOffset() {</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">538</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return tokenizer.tokenOffset();</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">539</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;}</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">540</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">541</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;public int[] offsetToRowColumn(int offset) {</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">542</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return tokenizer.offsetToRowColumn(offset);</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">543</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">452</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">544</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">453</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">545</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td>
<td class="LineNum">454</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td></tr>
<tr><td class="LineNum">546</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @return true if the String could be a prolog atom</td>
<td class="LineNum">455</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @return true if the String could be a prolog atom</td></tr>
<tr><td class="LineNum">547</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td>
<td class="LineNum">456</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td></tr>
<tr><td class="LineNum">548</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public static boolean isAtom(String s) {</td>
<td class="LineNum">457</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public static boolean isAtom(String s) {</td></tr>
<tr><td class="LineNum">549</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return atom.matcher(s).matches();</td>
<td class="LineNum">458</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return atom.matcher(s).matches();</td></tr>
<tr><td class="LineNum">550</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">459</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">551</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">460</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">552</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;static private Pattern atom = Pattern.compile("(!|[a-z][a-zA-Z_0-9]*)");</td>
<td class="LineNum">461</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;static private Pattern atom = Pattern.compile("(!|[a-z][a-zA-Z_0-9]*)");</td></tr>
<tr><td class="LineNum">553</td><td class="Same">&nbsp;</td>
<td class="LineNum">462</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">554</td><td class="Same">}</td>
<td class="LineNum">463</td><td class="Same">}</td></tr>

</table>


</body></html>
