<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- Generated by Compare It! (c) Grig Software -->
<HTML>
<HEAD>
<TITLE>Tokenizer.java Diff Report</TITLE>
<style type="text/css">
<!--
body { font-family: Verdana,Arial,Helvetica; background-color: #FFFFFF; }
td   { border:0; font-family: Arial, Helvetica; font-size: xx-small;}
table { border:0; width:100%; color: #666666;}
thead  { background-color: #343434; color: #FFFFFF; font-family: Verdana, Arial, Helvetica; height: 30px; vertical-align: middle; text-align: center; font-weight: bold; }
.Same { width:48%; }
.SrcOnly { background-color: #C0DCC0; color:#008000; width:48%; }
.DstOnly { background-color: #C0DCC0; color:#C80000; width:48%; }
.Virtual { background-color: #EEEEEE; width:48%; }
.Changed { background-color: #C0DCC0; color:#0000FF; width:48%; }
.InSame{ color:#0000FF; }
.InDiff { color:#C80000; font-weight:bold; }
.LineNum { background-color: #EEEEEE; width:2%; }
.Stats { background-color: #EEEEEE; color:black; }
.StatsA { background-color: #EEEEEE; color:black; }
a { font-family: Arial, Helvetica; font-size: xx-small;background-color: #EEEEEE; color:blue;}
-->
</STYLE>
</HEAD>
<BODY>
<table><tr><td align=right>Tuesday, May 17, 2011 10:17:41</td></tr></table>
<table>
<thead><tr><td width=50%>[NEW] alice/tuprolog/Tokenizer.java</td><td width=50%>[OLD] alice/tuprolog/Tokenizer.java</td></tr></thead></table>

<table cellspacing=1 cellpadding=0>
<tr><td class="LineNum">1</td><td class="Same">/*</td>
<td class="LineNum">1</td><td class="Same">/*</td></tr>
<tr><td class="LineNum">2</td><td class="Same">&nbsp;* tuProlog - Copyright (C) 2001-2002  aliCE team at deis.unibo.it</td>
<td class="LineNum">2</td><td class="Same">&nbsp;* tuProlog - Copyright (C) 2001-2002  aliCE team at deis.unibo.it</td></tr>
<tr><td class="LineNum">3</td><td class="Same">&nbsp;*</td>
<td class="LineNum">3</td><td class="Same">&nbsp;*</td></tr>
<tr><td class="LineNum">4</td><td class="Same">&nbsp;* This library is free software; you can redistribute it and/or</td>
<td class="LineNum">4</td><td class="Same">&nbsp;* This library is free software; you can redistribute it and/or</td></tr>
<tr><td class="LineNum">5</td><td class="Same">&nbsp;* modify it under the terms of the GNU Lesser General Public</td>
<td class="LineNum">5</td><td class="Same">&nbsp;* modify it under the terms of the GNU Lesser General Public</td></tr>
<tr><td class="LineNum">6</td><td class="Same">&nbsp;* License as published by the Free Software Foundation; either</td>
<td class="LineNum">6</td><td class="Same">&nbsp;* License as published by the Free Software Foundation; either</td></tr>
<tr><td class="LineNum">7</td><td class="Same">&nbsp;* version 2.1 of the License, or (at your option) any later version.</td>
<td class="LineNum">7</td><td class="Same">&nbsp;* version 2.1 of the License, or (at your option) any later version.</td></tr>
<tr><td class="LineNum">8</td><td class="Same">&nbsp;*</td>
<td class="LineNum">8</td><td class="Same">&nbsp;*</td></tr>
<tr><td class="LineNum">9</td><td class="Same">&nbsp;* This library is distributed in the hope that it will be useful,</td>
<td class="LineNum">9</td><td class="Same">&nbsp;* This library is distributed in the hope that it will be useful,</td></tr>
<tr><td class="LineNum">10</td><td class="Same">&nbsp;* but WITHOUT ANY WARRANTY; without even the implied warranty of</td>
<td class="LineNum">10</td><td class="Same">&nbsp;* but WITHOUT ANY WARRANTY; without even the implied warranty of</td></tr>
<tr><td class="LineNum">11</td><td class="Same">&nbsp;* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</td>
<td class="LineNum">11</td><td class="Same">&nbsp;* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</td></tr>
<tr><td class="LineNum">12</td><td class="Same">&nbsp;* Lesser General Public License for more details.</td>
<td class="LineNum">12</td><td class="Same">&nbsp;* Lesser General Public License for more details.</td></tr>
<tr><td class="LineNum">13</td><td class="Same">&nbsp;*</td>
<td class="LineNum">13</td><td class="Same">&nbsp;*</td></tr>
<tr><td class="LineNum">14</td><td class="Same">&nbsp;* You should have received a copy of the GNU Lesser General Public</td>
<td class="LineNum">14</td><td class="Same">&nbsp;* You should have received a copy of the GNU Lesser General Public</td></tr>
<tr><td class="LineNum">15</td><td class="Same">&nbsp;* License along with this library; if not, write to the Free Software</td>
<td class="LineNum">15</td><td class="Same">&nbsp;* License along with this library; if not, write to the Free Software</td></tr>
<tr><td class="LineNum">16</td><td class="Same">&nbsp;* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</td>
<td class="LineNum">16</td><td class="Same">&nbsp;* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</td></tr>
<tr><td class="LineNum">17</td><td class="Same">&nbsp;*/</td>
<td class="LineNum">17</td><td class="Same">&nbsp;*/</td></tr>
<tr><td class="LineNum">18</td><td class="Same">package alice.tuprolog;</td>
<td class="LineNum">18</td><td class="Same">package alice.tuprolog;</td></tr>
<tr><td class="LineNum">19</td><td class="Same">&nbsp;</td>
<td class="LineNum">19</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">20</td><td class="Same">import java.io.*;</td>
<td class="LineNum">20</td><td class="Same">import java.io.*;</td></tr>
<tr><td class="LineNum">21</td><td class="Same">import java.util.LinkedList;</td>
<td class="LineNum">21</td><td class="Same">import java.util.LinkedList;</td></tr>
<tr><td class="LineNum">22</td><td class="Same">import java.util.Arrays;</td>
<td class="LineNum">22</td><td class="Same">import java.util.Arrays;</td></tr>
<tr><td class="LineNum"></td><td class="Virtual">&nbsp;</td><td class="LineNum">23</td><td class="DstOnly">import java.util.regex.Pattern;</td></tr>
<tr><td class="LineNum">23</td><td class="Same">&nbsp;</td>
<td class="LineNum">24</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">24</td><td class="Same">/**</td>
<td class="LineNum">25</td><td class="Same">/**</td></tr>
<tr><td class="LineNum">25</td><td class="Same">&nbsp;* BNF for tuProlog</td>
<td class="LineNum">26</td><td class="Same">&nbsp;* BNF for tuProlog</td></tr>
<tr><td class="LineNum">26</td><td class="Same">&nbsp;*</td>
<td class="LineNum">27</td><td class="Same">&nbsp;*</td></tr>
<tr><td class="LineNum">27</td><td class="Same">&nbsp;* part 1: Lexer</td>
<td class="LineNum">28</td><td class="Same">&nbsp;* part 1: Lexer</td></tr>
<tr><td class="LineNum">28</td><td class="Same">&nbsp;*      digit ::= 0 .. 9</td>
<td class="LineNum">29</td><td class="Same">&nbsp;*      digit ::= 0 .. 9</td></tr>
<tr><td class="LineNum">29</td><td class="Same">&nbsp;*      lc_letter ::= a .. z</td>
<td class="LineNum">30</td><td class="Same">&nbsp;*      lc_letter ::= a .. z</td></tr>
<tr><td class="LineNum">30</td><td class="Same">&nbsp;*      uc_letter ::= A .. Z | _</td>
<td class="LineNum">31</td><td class="Same">&nbsp;*      uc_letter ::= A .. Z | _</td></tr>
<tr><td class="LineNum">31</td><td class="Same">&nbsp;*      symbol ::= \ | $ | & | ^ | @ | # | . | , | : | ; | = | &lt; | &gt; | + | - | * | / | ~</td>
<td class="LineNum">32</td><td class="Same">&nbsp;*      symbol ::= \ | $ | & | ^ | @ | # | . | , | : | ; | = | &lt; | &gt; | + | - | * | / | ~</td></tr>
<tr><td class="LineNum">32</td><td class="Same">&nbsp;</td>
<td class="LineNum">33</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">33</td><td class="Same">&nbsp;*      letter ::= digit | lc_letter | uc_letter</td>
<td class="LineNum">34</td><td class="Same">&nbsp;*      letter ::= digit | lc_letter | uc_letter</td></tr>
<tr><td class="LineNum">34</td><td class="Same">&nbsp;*      integer ::= { digit }+</td>
<td class="LineNum">35</td><td class="Same">&nbsp;*      integer ::= { digit }+</td></tr>
<tr><td class="LineNum">35</td><td class="Same">&nbsp;*      float ::= { digit }+ . { digit }+ [ E|e [ +|- ] { digit }+ ]</td>
<td class="LineNum">36</td><td class="Same">&nbsp;*      float ::= { digit }+ . { digit }+ [ E|e [ +|- ] { digit }+ ]</td></tr>
<tr><td class="LineNum">36</td><td class="Same">&nbsp;*                                                                           // TODO Update BNF for quotes?</td>
<td class="LineNum">37</td><td class="Same">&nbsp;*                                                                           // TODO Update BNF for quotes?</td></tr>
<tr><td class="LineNum">37</td><td class="Same">&nbsp;*      atom ::= lc_letter { letter }* | !</td>
<td class="LineNum">38</td><td class="Same">&nbsp;*      atom ::= lc_letter { letter }* | !</td></tr>
<tr><td class="LineNum">38</td><td class="Same">&nbsp;*      variable ::= uc_letter { letter }*</td>
<td class="LineNum">39</td><td class="Same">&nbsp;*      variable ::= uc_letter { letter }*</td></tr>
<tr><td class="LineNum">39</td><td class="Same">&nbsp;*</td>
<td class="LineNum">40</td><td class="Same">&nbsp;*</td></tr>
<tr><td class="LineNum">40</td><td class="Same">&nbsp;* from the super class, the super.nextToken() returns and updates the following relevant fields:</td>
<td class="LineNum">41</td><td class="Same">&nbsp;* from the super class, the super.nextToken() returns and updates the following relevant fields:</td></tr>
<tr><td class="LineNum">41</td><td class="Same">&nbsp;* - if the next token is a collection of wordChars,</td>
<td class="LineNum">42</td><td class="Same">&nbsp;* - if the next token is a collection of wordChars,</td></tr>
<tr><td class="LineNum">42</td><td class="Same">&nbsp;* the type returned is TT_WORD and the value is put into the field sval.</td>
<td class="LineNum">43</td><td class="Same">&nbsp;* the type returned is TT_WORD and the value is put into the field sval.</td></tr>
<tr><td class="LineNum">43</td><td class="Same">&nbsp;* - if the next token is an ordinary char,</td>
<td class="LineNum">44</td><td class="Same">&nbsp;* - if the next token is an ordinary char,</td></tr>
<tr><td class="LineNum">44</td><td class="Same">&nbsp;* the type returned is the same as the unicode int value of the ordinary character</td>
<td class="LineNum">45</td><td class="Same">&nbsp;* the type returned is the same as the unicode int value of the ordinary character</td></tr>
<tr><td class="LineNum">45</td><td class="Same">&nbsp;* - other characters should be handled as ordinary characters.</td>
<td class="LineNum">46</td><td class="Same">&nbsp;* - other characters should be handled as ordinary characters.</td></tr>
<tr><td class="LineNum">46</td><td class="Same">&nbsp;*/</td>
<td class="LineNum">47</td><td class="Same">&nbsp;*/</td></tr>
<tr><td class="LineNum">47</td><td class="Changed"><span class="InDiff">public </span><span class="InSame">class Tokenizer extends StreamTokenizer implements Serializable {</span></td><td class="LineNum">48</td><td class="Changed"><span class="InSame">class Tokenizer extends StreamTokenizer implements Serializable {</span></td></tr>
<tr><td class="LineNum">48</td><td class="Same">&nbsp;</td>
<td class="LineNum">49</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">49</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;static final int TYPEMASK = 0x00FF;</td>
<td class="LineNum">50</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;static final int TYPEMASK = 0x00FF;</td></tr>
<tr><td class="LineNum">50</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;static final int ATTRMASK = 0xFF00;</td>
<td class="LineNum">51</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;static final int ATTRMASK = 0xFF00;</td></tr>
<tr><td class="LineNum">51</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;static final int LPAR = 0x0001;</td>
<td class="LineNum">52</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;static final int LPAR = 0x0001;</td></tr>
<tr><td class="LineNum">52</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;static final int RPAR = 0x0002;</td>
<td class="LineNum">53</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;static final int RPAR = 0x0002;</td></tr>
<tr><td class="LineNum">53</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;static final int LBRA = 0x0003;</td>
<td class="LineNum">54</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;static final int LBRA = 0x0003;</td></tr>
<tr><td class="LineNum">54</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;static final int RBRA = 0x0004;</td>
<td class="LineNum">55</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;static final int RBRA = 0x0004;</td></tr>
<tr><td class="LineNum">55</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;static final int BAR = 0x0005;</td>
<td class="LineNum">56</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;static final int BAR = 0x0005;</td></tr>
<tr><td class="LineNum">56</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;static final int INTEGER = 0x0006;</td>
<td class="LineNum">57</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;static final int INTEGER = 0x0006;</td></tr>
<tr><td class="LineNum">57</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;static final int FLOAT = 0x0007;</td>
<td class="LineNum">58</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;static final int FLOAT = 0x0007;</td></tr>
<tr><td class="LineNum">58</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;static final int ATOM = 0x0008;</td>
<td class="LineNum">59</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;static final int ATOM = 0x0008;</td></tr>
<tr><td class="LineNum">59</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;static final int VARIABLE = 0x0009;</td>
<td class="LineNum">60</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;static final int VARIABLE = 0x0009;</td></tr>
<tr><td class="LineNum">60</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;static final int SQ_SEQUENCE = 0x000A;</td>
<td class="LineNum">61</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;static final int SQ_SEQUENCE = 0x000A;</td></tr>
<tr><td class="LineNum">61</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;static final int DQ_SEQUENCE = 0x000B;</td>
<td class="LineNum">62</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;static final int DQ_SEQUENCE = 0x000B;</td></tr>
<tr><td class="LineNum">62</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;static final int END = 0x000D;</td>
<td class="LineNum">63</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;static final int END = 0x000D;</td></tr>
<tr><td class="LineNum">63</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;static final int LBRA2 = 0x000E;</td>
<td class="LineNum">64</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;static final int LBRA2 = 0x000E;</td></tr>
<tr><td class="LineNum">64</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;static final int RBRA2 = 0x000F;</td>
<td class="LineNum">65</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;static final int RBRA2 = 0x000F;</td></tr>
<tr><td class="LineNum">65</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;static final int FUNCTOR = 0x0100;</td>
<td class="LineNum">66</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;static final int FUNCTOR = 0x0100;</td></tr>
<tr><td class="LineNum">66</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;static final int OPERATOR = 0x0200;</td>
<td class="LineNum">67</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;static final int OPERATOR = 0x0200;</td></tr>
<tr><td class="LineNum">67</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;static final int EOF = 0x1000;</td>
<td class="LineNum">68</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;static final int EOF = 0x1000;</td></tr>
<tr><td class="LineNum">68</td><td class="Same">&nbsp;</td>
<td class="LineNum">69</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">69</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;static final char[] GRAPHIC_CHARS = {'\\', '$', '&', '?', '^', '@', '#', '.', ',', ':', ';', '=', '&lt;', '&gt;', '+', '-', '*', '/', '~'};</td>
<td class="LineNum">70</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;static final char[] GRAPHIC_CHARS = {'\\', '$', '&', '?', '^', '@', '#', '.', ',', ':', ';', '=', '&lt;', '&gt;', '+', '-', '*', '/', '~'};</td></tr>
<tr><td class="LineNum">70</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;static {</td>
<td class="LineNum">71</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;static {</td></tr>
<tr><td class="LineNum">71</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Arrays.sort(Tokenizer.GRAPHIC_CHARS);  // must be done to ensure correct behavior of Arrays.binarySearch</td>
<td class="LineNum">72</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Arrays.sort(Tokenizer.GRAPHIC_CHARS);  // must be done to ensure correct behavior of Arrays.binarySearch</td></tr>
<tr><td class="LineNum">72</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">73</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">73</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">74</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">74</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;/* Francesco Fabbri</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">75</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* 15/04/2011</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">76</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Fix line number issue (always -1)</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">77</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">78</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">79</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;//used to locate tokens in the parsed string</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">80</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;private int tokenOffset;</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">81</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;private int tokenStart;</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">82</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;private int tokenLength;</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">83</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;private String text = null;</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">84</td><td class="SrcOnly">&nbsp;</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">85</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;//used to enable pushback from the parser. Not in any way connected with pushBack2 and super.pushBack().</td>
<td class="LineNum">75</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;//used to enable pushback from the parser. Not in any way connected with pushBack2 and super.pushBack().</td></tr>
<tr><td class="LineNum">86</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;private LinkedList</span><span class="InDiff">&lt;Token&gt;</span><span class="InSame">&nbsp;tokenList = new LinkedList</span><span class="InDiff">&lt;Token&gt;</span><span class="InSame">();</span></td><td class="LineNum">76</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;private LinkedList tokenList = new LinkedList();</span></td></tr>
<tr><td class="LineNum">87</td><td class="Same">&nbsp;</td>
<td class="LineNum">77</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">88</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;//used in the double lookahead check that . following ints is a fraction marker or end marker (pushback() only works on one level)</td>
<td class="LineNum">78</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;//used in the double lookahead check that . following ints is a fraction marker or end marker (pushback() only works on one level)</td></tr>
<tr><td class="LineNum">89</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;private PushBack pushBack2 = null;</td>
<td class="LineNum">79</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;private PushBack pushBack2 = null;</td></tr>
<tr><td class="LineNum">90</td><td class="Same">&nbsp;</td>
<td class="LineNum">80</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">91</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public Tokenizer(String text) {</td>
<td class="LineNum">81</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public Tokenizer(String text) {</td></tr>
<tr><td class="LineNum">92</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this(new StringReader(text));</td>
<td class="LineNum">82</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this(new StringReader(text));</td></tr>
<tr><td class="LineNum">93</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">94</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.text = text;</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">95</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;this.tokenOffset = -1;</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">96</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">83</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">97</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td>
<td class="LineNum">84</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td></tr>
<tr><td class="LineNum">98</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* creating a tokenizer for the source stream</td>
<td class="LineNum">85</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* creating a tokenizer for the source stream</td></tr>
<tr><td class="LineNum">99</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td>
<td class="LineNum">86</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td></tr>
<tr><td class="LineNum">100</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public Tokenizer(Reader text) {</td>
<td class="LineNum">87</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public Tokenizer(Reader text) {</td></tr>
<tr><td class="LineNum">101</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super(text);</td>
<td class="LineNum">88</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super(text);</td></tr>
<tr><td class="LineNum">102</td><td class="Same">&nbsp;</td>
<td class="LineNum">89</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">103</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Prepare the tokenizer for Prolog-style tokenizing rules</td>
<td class="LineNum">90</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Prepare the tokenizer for Prolog-style tokenizing rules</td></tr>
<tr><td class="LineNum">104</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resetSyntax();</td>
<td class="LineNum">91</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resetSyntax();</td></tr>
<tr><td class="LineNum">105</td><td class="Same">&nbsp;</td>
<td class="LineNum">92</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">106</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// letters</td>
<td class="LineNum">93</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// letters</td></tr>
<tr><td class="LineNum">107</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wordChars('a', 'z');</td>
<td class="LineNum">94</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wordChars('a', 'z');</td></tr>
<tr><td class="LineNum">108</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wordChars('A', 'Z');</td>
<td class="LineNum">95</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wordChars('A', 'Z');</td></tr>
<tr><td class="LineNum">109</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wordChars('_', '_');</td>
<td class="LineNum">96</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wordChars('_', '_');</td></tr>
<tr><td class="LineNum">110</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wordChars('0', '9'); // need to parse numbers as special words</td>
<td class="LineNum">97</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;wordChars('0', '9'); // need to parse numbers as special words</td></tr>
<tr><td class="LineNum">111</td><td class="Same">&nbsp;</td>
<td class="LineNum">98</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">112</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ordinaryChar('!');</td>
<td class="LineNum">99</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ordinaryChar('!');</td></tr>
<tr><td class="LineNum">113</td><td class="Same">&nbsp;</td>
<td class="LineNum">100</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">114</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// symbols</td>
<td class="LineNum">101</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// symbols</td></tr>
<tr><td class="LineNum">115</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ordinaryChar('\\');</td>
<td class="LineNum">102</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ordinaryChar('\\');</td></tr>
<tr><td class="LineNum">116</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ordinaryChar('$');</td>
<td class="LineNum">103</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ordinaryChar('$');</td></tr>
<tr><td class="LineNum">117</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ordinaryChar('&');</td>
<td class="LineNum">104</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ordinaryChar('&');</td></tr>
<tr><td class="LineNum">118</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ordinaryChar('^');</td>
<td class="LineNum">105</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ordinaryChar('^');</td></tr>
<tr><td class="LineNum">119</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ordinaryChar('@');</td>
<td class="LineNum">106</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ordinaryChar('@');</td></tr>
<tr><td class="LineNum">120</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ordinaryChar('#');</td>
<td class="LineNum">107</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ordinaryChar('#');</td></tr>
<tr><td class="LineNum">121</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ordinaryChar(',');</td>
<td class="LineNum">108</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ordinaryChar(',');</td></tr>
<tr><td class="LineNum">122</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ordinaryChar('.');</td>
<td class="LineNum">109</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ordinaryChar('.');</td></tr>
<tr><td class="LineNum">123</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ordinaryChar(':');</td>
<td class="LineNum">110</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ordinaryChar(':');</td></tr>
<tr><td class="LineNum">124</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ordinaryChar(';');</td>
<td class="LineNum">111</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ordinaryChar(';');</td></tr>
<tr><td class="LineNum">125</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ordinaryChar('=');</td>
<td class="LineNum">112</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ordinaryChar('=');</td></tr>
<tr><td class="LineNum">126</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ordinaryChar('&lt;');</td>
<td class="LineNum">113</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ordinaryChar('&lt;');</td></tr>
<tr><td class="LineNum">127</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ordinaryChar('&gt;');</td>
<td class="LineNum">114</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ordinaryChar('&gt;');</td></tr>
<tr><td class="LineNum">128</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ordinaryChar('+');</td>
<td class="LineNum">115</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ordinaryChar('+');</td></tr>
<tr><td class="LineNum">129</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ordinaryChar('-');</td>
<td class="LineNum">116</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ordinaryChar('-');</td></tr>
<tr><td class="LineNum">130</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ordinaryChar('*');</td>
<td class="LineNum">117</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ordinaryChar('*');</td></tr>
<tr><td class="LineNum">131</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ordinaryChar('/');</td>
<td class="LineNum">118</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ordinaryChar('/');</td></tr>
<tr><td class="LineNum">132</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ordinaryChar('~');</td>
<td class="LineNum">119</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ordinaryChar('~');</td></tr>
<tr><td class="LineNum">133</td><td class="Same">&nbsp;</td>
<td class="LineNum">120</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">134</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// quotes</td>
<td class="LineNum">121</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// quotes</td></tr>
<tr><td class="LineNum">135</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ordinaryChar('\''); // must be parsed individually to handles \\ in quotes and character code constants</td>
<td class="LineNum">122</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ordinaryChar('\''); // must be parsed individually to handles \\ in quotes and character code constants</td></tr>
<tr><td class="LineNum">136</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ordinaryChar('\"'); // same as above?</td>
<td class="LineNum">123</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ordinaryChar('\"'); // same as above?</td></tr>
<tr><td class="LineNum">137</td><td class="Same">&nbsp;</td>
<td class="LineNum">124</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">138</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// comments</td>
<td class="LineNum">125</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// comments</td></tr>
<tr><td class="LineNum">139</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ordinaryChar('%');</td>
<td class="LineNum">126</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ordinaryChar('%');</td></tr>
<tr><td class="LineNum">140</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// it is not possible to enable StreamTokenizer#slashStarComments and % as a StreamTokenizer#commentChar</td>
<td class="LineNum">127</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// it is not possible to enable StreamTokenizer#slashStarComments and % as a StreamTokenizer#commentChar</td></tr>
<tr><td class="LineNum">141</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// and it is also not possible to use StreamTokenizer#whitespaceChars for ' '</td>
<td class="LineNum">128</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// and it is also not possible to use StreamTokenizer#whitespaceChars for ' '</td></tr>
<tr><td class="LineNum">142</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">129</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">143</td><td class="Same">&nbsp;</td>
<td class="LineNum">130</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">144</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td>
<td class="LineNum">131</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td></tr>
<tr><td class="LineNum">145</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* reads next available token</td>
<td class="LineNum">132</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* reads next available token</td></tr>
<tr><td class="LineNum">146</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td>
<td class="LineNum">133</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td></tr>
<tr><td class="LineNum">147</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="InDiff">public </span><span class="InSame">Token readToken() throws InvalidTermException, IOException {</span></td><td class="LineNum">134</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;Token readToken() throws InvalidTermException, IOException {</span></td></tr>
<tr><td class="LineNum">148</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return !tokenList.isEmpty() ? (Token) tokenList.removeFirst() : readNextToken();</td>
<td class="LineNum">135</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return !tokenList.isEmpty() ? (Token) tokenList.removeFirst() : readNextToken();</td></tr>
<tr><td class="LineNum">149</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">136</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">150</td><td class="Same">&nbsp;</td>
<td class="LineNum">137</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">151</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td>
<td class="LineNum">138</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td></tr>
<tr><td class="LineNum">152</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* puts back token to be read again</td>
<td class="LineNum">139</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* puts back token to be read again</td></tr>
<tr><td class="LineNum">153</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td>
<td class="LineNum">140</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td></tr>
<tr><td class="LineNum">154</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;void unreadToken(Token token) {</td>
<td class="LineNum">141</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;void unreadToken(Token token) {</td></tr>
<tr><td class="LineNum">155</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tokenList.addFirst(token);</td>
<td class="LineNum">142</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tokenList.addFirst(token);</td></tr>
<tr><td class="LineNum">156</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">143</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">157</td><td class="Same">&nbsp;</td>
<td class="LineNum">144</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">158</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;Token readNextToken() throws IOException, InvalidTermException {</td>
<td class="LineNum">145</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;Token readNextToken() throws IOException, InvalidTermException {</td></tr>
<tr><td class="LineNum">159</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int typea;</td>
<td class="LineNum">146</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int typea;</td></tr>
<tr><td class="LineNum">160</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String svala;</td>
<td class="LineNum">147</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String svala;</td></tr>
<tr><td class="LineNum">161</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (pushBack2 != null) {</td>
<td class="LineNum">148</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (pushBack2 != null) {</td></tr>
<tr><td class="LineNum">162</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;typea = pushBack2.typea;</td>
<td class="LineNum">149</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;typea = pushBack2.typea;</td></tr>
<tr><td class="LineNum">163</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;svala = pushBack2.svala;</td>
<td class="LineNum">150</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;svala = pushBack2.svala;</td></tr>
<tr><td class="LineNum">164</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pushBack2 = null;</td>
<td class="LineNum">151</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pushBack2 = null;</td></tr>
<tr><td class="LineNum">165</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {</td>
<td class="LineNum">152</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {</td></tr>
<tr><td class="LineNum">166</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;typea = </span><span class="InDiff">t</span><span class="InSame">oken</span><span class="InDiff">Consume</span><span class="InSame">();</span></td><td class="LineNum">153</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;typea = </span><span class="InDiff">super.nextT</span><span class="InSame">oken();</span></td></tr>
<tr><td class="LineNum">167</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;svala = sval;</td>
<td class="LineNum">154</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;svala = sval;</td></tr>
<tr><td class="LineNum">168</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">155</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">169</td><td class="Same">&nbsp;</td>
<td class="LineNum">156</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">170</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// skips whitespace</td>
<td class="LineNum">157</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// skips whitespace</td></tr>
<tr><td class="LineNum">171</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// could be simplified if lookahead for blank space in functors wasn't necessary</td>
<td class="LineNum">158</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// could be simplified if lookahead for blank space in functors wasn't necessary</td></tr>
<tr><td class="LineNum">172</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// and if '.' in numbers could be written with blank space</td>
<td class="LineNum">159</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// and if '.' in numbers could be written with blank space</td></tr>
<tr><td class="LineNum">173</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (Tokenizer.isWhite(typea)) {</td>
<td class="LineNum">160</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (Tokenizer.isWhite(typea)) {</td></tr>
<tr><td class="LineNum">174</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;typea = </span><span class="InDiff">t</span><span class="InSame">oken</span><span class="InDiff">Consume</span><span class="InSame">();</span></td><td class="LineNum">161</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;typea = </span><span class="InDiff">super.nextT</span><span class="InSame">oken();</span></td></tr>
<tr><td class="LineNum">175</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;svala = sval;</td>
<td class="LineNum">162</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;svala = sval;</td></tr>
<tr><td class="LineNum">176</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">163</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">177</td><td class="Same">&nbsp;</td>
<td class="LineNum">164</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">178</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// skips single line comments</td>
<td class="LineNum">165</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// skips single line comments</td></tr>
<tr><td class="LineNum">179</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// could be simplified if % was not a legal character in quotes</td>
<td class="LineNum">166</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// could be simplified if % was not a legal character in quotes</td></tr>
<tr><td class="LineNum">180</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (typea == '%'){</td>
<td class="LineNum">167</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (typea == '%'){</td></tr>
<tr><td class="LineNum">181</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;do {</td>
<td class="LineNum">168</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;do {</td></tr>
<tr><td class="LineNum">182</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;typea = </span><span class="InDiff">t</span><span class="InSame">oken</span><span class="InDiff">Consume</span><span class="InSame">();</span></td><td class="LineNum">169</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;typea = </span><span class="InDiff">super.nextT</span><span class="InSame">oken();</span></td></tr>
<tr><td class="LineNum">183</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} while (typea != '\r' && typea != '\n' && typea != TT_EOF);</td>
<td class="LineNum">170</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} while (typea != '\r' && typea != '\n' && typea != TT_EOF);</td></tr>
<tr><td class="LineNum">184</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="InDiff">tokenP</span><span class="InSame">ushBack();  // pushes back \r or \n. These are whitespace, so when readNextToken() finds them, they are marked as whitespace</span></td><td class="LineNum">171</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="InDiff">p</span><span class="InSame">ushBack();  // pushes back \r or \n. These are whitespace, so when readNextToken() finds them, they are marked as whitespace</span></td></tr>
<tr><td class="LineNum">185</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return readNextToken();</td>
<td class="LineNum">172</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return readNextToken();</td></tr>
<tr><td class="LineNum">186</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">173</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">187</td><td class="Same">&nbsp;</td>
<td class="LineNum">174</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">188</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// skips /* comments */</td>
<td class="LineNum">175</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// skips /* comments */</td></tr>
<tr><td class="LineNum">189</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (typea == '/'){</td>
<td class="LineNum">176</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (typea == '/'){</td></tr>
<tr><td class="LineNum">190</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int typeb = </span><span class="InDiff">t</span><span class="InSame">oken</span><span class="InDiff">Consume</span><span class="InSame">();</span></td><td class="LineNum">177</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int typeb = </span><span class="InDiff">super.nextT</span><span class="InSame">oken();</span></td></tr>
<tr><td class="LineNum">191</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (typeb == '*'){</td>
<td class="LineNum">178</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (typeb == '*'){</td></tr>
<tr><td class="LineNum">192</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;do {</td>
<td class="LineNum">179</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;do {</td></tr>
<tr><td class="LineNum">193</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;typea = typeb;</td>
<td class="LineNum">180</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;typea = typeb;</td></tr>
<tr><td class="LineNum">194</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;typeb = </span><span class="InDiff">t</span><span class="InSame">oken</span><span class="InDiff">Consume</span><span class="InSame">();</span></td><td class="LineNum">181</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;typeb = </span><span class="InDiff">super.nextT</span><span class="InSame">oken();</span></td></tr>
<tr><td class="LineNum">195</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (typea == -1 && typeb == -1)     </td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">196</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new InvalidTermException("Invalid multi-line comment statement");</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">197</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} while (typea != '*' || typeb != '/');</td>
<td class="LineNum">182</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} while (typea != '*' || typeb != '/');</td></tr>
<tr><td class="LineNum">198</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return readNextToken();</td>
<td class="LineNum">183</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return readNextToken();</td></tr>
<tr><td class="LineNum">199</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {</td>
<td class="LineNum">184</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {</td></tr>
<tr><td class="LineNum">200</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="InDiff">tokenP</span><span class="InSame">ushBack();</span></td><td class="LineNum">185</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="InDiff">p</span><span class="InSame">ushBack();</span></td></tr>
<tr><td class="LineNum">201</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></td><td class="LineNum">186</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></td></tr>
<tr><td class="LineNum">202</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></td><td class="LineNum">187</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</span></td></tr>
<tr><td class="LineNum">203</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">204</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// store the character offset of the current token</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">205</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tokenStart = tokenOffset - tokenLength + 1;</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">206</td><td class="Same">&nbsp;</td>
<td class="LineNum">188</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">207</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// syntactic charachters</td>
<td class="LineNum">189</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// syntactic charachters</td></tr>
<tr><td class="LineNum">208</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (typea == TT_EOF) return new Token("", Tokenizer.EOF);</td>
<td class="LineNum">190</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (typea == TT_EOF) return new Token("", Tokenizer.EOF);</td></tr>
<tr><td class="LineNum">209</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (typea == '(') return new Token("(", Tokenizer.LPAR);</td>
<td class="LineNum">191</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (typea == '(') return new Token("(", Tokenizer.LPAR);</td></tr>
<tr><td class="LineNum">210</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (typea == ')') return new Token(")", Tokenizer.RPAR);</td>
<td class="LineNum">192</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (typea == ')') return new Token(")", Tokenizer.RPAR);</td></tr>
<tr><td class="LineNum">211</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (typea == '{') return new Token("{", Tokenizer.LBRA2);</td>
<td class="LineNum">193</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (typea == '{') return new Token("{", Tokenizer.LBRA2);</td></tr>
<tr><td class="LineNum">212</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (typea == '}') return new Token("}", Tokenizer.RBRA2);</td>
<td class="LineNum">194</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (typea == '}') return new Token("}", Tokenizer.RBRA2);</td></tr>
<tr><td class="LineNum">213</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (typea == '[') return new Token("[", Tokenizer.LBRA);</td>
<td class="LineNum">195</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (typea == '[') return new Token("[", Tokenizer.LBRA);</td></tr>
<tr><td class="LineNum">214</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (typea == ']') return new Token("]", Tokenizer.RBRA);</td>
<td class="LineNum">196</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (typea == ']') return new Token("]", Tokenizer.RBRA);</td></tr>
<tr><td class="LineNum">215</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (typea == '|') return new Token("|", Tokenizer.BAR);</td>
<td class="LineNum">197</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (typea == '|') return new Token("|", Tokenizer.BAR);</td></tr>
<tr><td class="LineNum">216</td><td class="Same">&nbsp;</td>
<td class="LineNum">198</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">217</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (typea == '!') return new Token("!", Tokenizer.ATOM);</td>
<td class="LineNum">199</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (typea == '!') return new Token("!", Tokenizer.ATOM);</td></tr>
<tr><td class="LineNum">218</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (typea == ',') return new Token(",", Tokenizer.OPERATOR);</td>
<td class="LineNum">200</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (typea == ',') return new Token(",", Tokenizer.OPERATOR);</td></tr>
<tr><td class="LineNum">219</td><td class="Same">&nbsp;</td>
<td class="LineNum">201</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">220</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (typea == '.')  { // check that '.' as end token is followed by a layout character, see ISO Standard 6.4.8 endnote</td>
<td class="LineNum">202</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (typea == '.')  { // check that '.' as end token is followed by a layout character, see ISO Standard 6.4.8 endnote</td></tr>
<tr><td class="LineNum">221</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int typeb = </span><span class="InDiff">t</span><span class="InSame">oken</span><span class="InDiff">Consume</span><span class="InSame">();</span></td><td class="LineNum">203</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int typeb = </span><span class="InDiff">super.nextT</span><span class="InSame">oken();</span></td></tr>
<tr><td class="LineNum">222</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (Tokenizer.isWhite(typeb) || typeb == '%' || typeb == StreamTokenizer.TT_EOF)</td>
<td class="LineNum">204</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (Tokenizer.isWhite(typeb) || typeb == '%' || typeb == StreamTokenizer.TT_EOF)</td></tr>
<tr><td class="LineNum">223</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return new Token(".", Tokenizer.END);</td>
<td class="LineNum">205</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return new Token(".", Tokenizer.END);</td></tr>
<tr><td class="LineNum">224</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else</td>
<td class="LineNum">206</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else</td></tr>
<tr><td class="LineNum">225</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="InDiff">tokenP</span><span class="InSame">ushBack();</span></td><td class="LineNum">207</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="InDiff">p</span><span class="InSame">ushBack();</span></td></tr>
<tr><td class="LineNum">226</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">208</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">227</td><td class="Same">&nbsp;</td>
<td class="LineNum">209</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">228</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boolean isNumber = false;</td>
<td class="LineNum">210</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boolean isNumber = false;</td></tr>
<tr><td class="LineNum">229</td><td class="Same">&nbsp;</td>
<td class="LineNum">211</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">230</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// variable, atom or number</td>
<td class="LineNum">212</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// variable, atom or number</td></tr>
<tr><td class="LineNum">231</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (typea == TT_WORD) {</td>
<td class="LineNum">213</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (typea == TT_WORD) {</td></tr>
<tr><td class="LineNum">232</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;char firstChar = svala.charAt(0);</td>
<td class="LineNum">214</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;char firstChar = svala.charAt(0);</td></tr>
<tr><td class="LineNum">233</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// variable</td>
<td class="LineNum">215</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// variable</td></tr>
<tr><td class="LineNum">234</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (Character.isUpperCase(firstChar) || '_' == firstChar)</td>
<td class="LineNum">216</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (Character.isUpperCase(firstChar) || '_' == firstChar)</td></tr>
<tr><td class="LineNum">235</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return new Token(svala, Tokenizer.VARIABLE);</td>
<td class="LineNum">217</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return new Token(svala, Tokenizer.VARIABLE);</td></tr>
<tr><td class="LineNum">236</td><td class="Same">&nbsp;</td>
<td class="LineNum">218</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">237</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (firstChar &gt;= '0' && firstChar &lt;= '9') // all words starting with 0 or 9 must be a number</td>
<td class="LineNum">219</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else if (firstChar &gt;= '0' && firstChar &lt;= '9') // all words starting with 0 or 9 must be a number</td></tr>
<tr><td class="LineNum">238</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;isNumber = true;                           // set type to number and handle later</td>
<td class="LineNum">220</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;isNumber = true;                           // set type to number and handle later</td></tr>
<tr><td class="LineNum">239</td><td class="Same">&nbsp;</td>
<td class="LineNum">221</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">240</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else {                                         // otherwise, it must be an atom (or wrong)</td>
<td class="LineNum">222</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;else {                                         // otherwise, it must be an atom (or wrong)</td></tr>
<tr><td class="LineNum">241</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int typeb = </span><span class="InDiff">t</span><span class="InSame">oken</span><span class="InDiff">Consume</span><span class="InSame">();             // lookahead 1 to identify what type of atom</span></td><td class="LineNum">223</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int typeb = </span><span class="InDiff">super.nextT</span><span class="InSame">oken();             // lookahead 1 to identify what type of atom</span></td></tr>
<tr><td class="LineNum">242</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="InDiff">tokenP</span><span class="InSame">ushBack();                                // this does not skip whitespaces, only readNext does so.</span></td><td class="LineNum">224</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="InDiff">p</span><span class="InSame">ushBack();                                // this does not skip whitespaces, only readNext does so.</span></td></tr>
<tr><td class="LineNum">243</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (typeb == '(')</td>
<td class="LineNum">225</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (typeb == '(')</td></tr>
<tr><td class="LineNum">244</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return new Token(svala, Tokenizer.ATOM | Tokenizer.FUNCTOR);</td>
<td class="LineNum">226</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return new Token(svala, Tokenizer.ATOM | Tokenizer.FUNCTOR);</td></tr>
<tr><td class="LineNum">245</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (Tokenizer.isWhite(typeb))</td>
<td class="LineNum">227</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (Tokenizer.isWhite(typeb))</td></tr>
<tr><td class="LineNum">246</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return new Token(svala, Tokenizer.ATOM | Tokenizer.OPERATOR);</td>
<td class="LineNum">228</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return new Token(svala, Tokenizer.ATOM | Tokenizer.OPERATOR);</td></tr>
<tr><td class="LineNum">247</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return new Token(svala, Tokenizer.ATOM);</td>
<td class="LineNum">229</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return new Token(svala, Tokenizer.ATOM);</td></tr>
<tr><td class="LineNum">248</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">230</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">249</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">231</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">250</td><td class="Same">&nbsp;</td>
<td class="LineNum">232</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">251</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// quotes</td>
<td class="LineNum">233</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// quotes</td></tr>
<tr><td class="LineNum">252</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (typea == '\'' || typea == '\"' || typea == '`' ) {</td>
<td class="LineNum">234</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (typea == '\'' || typea == '\"' || typea == '`' ) {</td></tr>
<tr><td class="LineNum">253</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int qType = typea;</td>
<td class="LineNum">235</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int qType = typea;</td></tr>
<tr><td class="LineNum">254</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;StringBuffer quote = new StringBuffer();</td>
<td class="LineNum">236</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;StringBuffer quote = new StringBuffer();</td></tr>
<tr><td class="LineNum">255</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (true) { // run through entire quote and added body to quote buffer</td>
<td class="LineNum">237</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (true) { // run through entire quote and added body to quote buffer</td></tr>
<tr><td class="LineNum">256</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;typea = </span><span class="InDiff">t</span><span class="InSame">oken</span><span class="InDiff">Consume</span><span class="InSame">();</span></td><td class="LineNum">238</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;typea = </span><span class="InDiff">super.nextT</span><span class="InSame">oken();</span></td></tr>
<tr><td class="LineNum">257</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;svala = sval;</td>
<td class="LineNum">239</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;svala = sval;</td></tr>
<tr><td class="LineNum">258</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// continuation escape sequence</td>
<td class="LineNum">240</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// continuation escape sequence</td></tr>
<tr><td class="LineNum">259</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (typea == '\\'){</td>
<td class="LineNum">241</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (typea == '\\'){</td></tr>
<tr><td class="LineNum">260</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int typeb = </span><span class="InDiff">t</span><span class="InSame">oken</span><span class="InDiff">Consume</span><span class="InSame">();</span></td><td class="LineNum">242</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int typeb = </span><span class="InDiff">super.nextT</span><span class="InSame">oken();</span></td></tr>
<tr><td class="LineNum">261</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (typeb == '\n') // continuation escape sequence marker \\n</td>
<td class="LineNum">243</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (typeb == '\n') // continuation escape sequence marker \\n</td></tr>
<tr><td class="LineNum">262</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue;</td>
<td class="LineNum">244</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue;</td></tr>
<tr><td class="LineNum">263</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (typeb == '\r'){</td>
<td class="LineNum">245</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (typeb == '\r'){</td></tr>
<tr><td class="LineNum">264</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int typec = </span><span class="InDiff">t</span><span class="InSame">oken</span><span class="InDiff">Consume</span><span class="InSame">();</span></td><td class="LineNum">246</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int typec = </span><span class="InDiff">super.nextT</span><span class="InSame">oken();</span></td></tr>
<tr><td class="LineNum">265</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (typec == '\n')</td>
<td class="LineNum">247</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (typec == '\n')</td></tr>
<tr><td class="LineNum">266</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue; // continuation escape sequence marker \\r\n</td>
<td class="LineNum">248</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue; // continuation escape sequence marker \\r\n</td></tr>
<tr><td class="LineNum">267</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="InDiff">tokenP</span><span class="InSame">ushBack();</span></td><td class="LineNum">249</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="InDiff">p</span><span class="InSame">ushBack();</span></td></tr>
<tr><td class="LineNum">268</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue; // continuation escape sequence marker \\r</td>
<td class="LineNum">250</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue; // continuation escape sequence marker \\r</td></tr>
<tr><td class="LineNum">269</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">251</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">270</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="InDiff">tokenP</span><span class="InSame">ushBack(); // pushback typeb</span></td><td class="LineNum">252</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="InDiff">p</span><span class="InSame">ushBack(); // pushback typeb</span></td></tr>
<tr><td class="LineNum">271</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">253</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">272</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// double '' or "" or ``</td>
<td class="LineNum">254</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// double '' or "" or ``</td></tr>
<tr><td class="LineNum">273</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (typea == qType){</td>
<td class="LineNum">255</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (typea == qType){</td></tr>
<tr><td class="LineNum">274</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int typeb = </span><span class="InDiff">t</span><span class="InSame">oken</span><span class="InDiff">Consume</span><span class="InSame">();</span></td><td class="LineNum">256</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int typeb = </span><span class="InDiff">super.nextT</span><span class="InSame">oken();</span></td></tr>
<tr><td class="LineNum">275</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (typeb == qType) { // escaped '' or "" or ``</td>
<td class="LineNum">257</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (typeb == qType) { // escaped '' or "" or ``</td></tr>
<tr><td class="LineNum">276</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;quote.append((char) qType);</td>
<td class="LineNum">258</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;quote.append((char) qType);</td></tr>
<tr><td class="LineNum">277</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue;</td>
<td class="LineNum">259</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;continue;</td></tr>
<tr><td class="LineNum">278</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {</td>
<td class="LineNum">260</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} else {</td></tr>
<tr><td class="LineNum">279</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="InDiff">tokenP</span><span class="InSame">ushBack();</span></td><td class="LineNum">261</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="InDiff">p</span><span class="InSame">ushBack();</span></td></tr>
<tr><td class="LineNum">280</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break; // otherwise, break on single quote</td>
<td class="LineNum">262</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break; // otherwise, break on single quote</td></tr>
<tr><td class="LineNum">281</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">263</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">282</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">264</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">283</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (typea == '\n' || typea == '\r')</td>
<td class="LineNum">265</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (typea == '\n' || typea == '\r')</td></tr>
<tr><td class="LineNum">284</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new InvalidTermException("</span><span class="InDiff">L</span><span class="InSame">ine break in quote not allowed");</span></td><td class="LineNum">266</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new InvalidTermException("</span><span class="InDiff">l</span><span class="InSame">ine break in quote not allowed</span><span class="InDiff">&#183;(unless they are escaped \\ first)</span><span class="InSame">");</span></td></tr>
<tr><td class="LineNum">285</td><td class="Same">&nbsp;</td>
<td class="LineNum">267</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">286</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (svala != null)</td>
<td class="LineNum">268</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (svala != null)</td></tr>
<tr><td class="LineNum">287</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;quote.append(svala);</td>
<td class="LineNum">269</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;quote.append(svala);</td></tr>
<tr><td class="LineNum">288</td><td class="Changed"><span class="InDiff">&#183;&#183;&#183;&#183;&#183;&#183;&#183;&#183;&#183;&#183;&#183;&#183;&#183;&#183;&#183;&#183;</span><span class="InSame">else</span><span class="InDiff">&#183;{</span></td><td class="LineNum">270</td><td class="Changed"><span class="InDiff">&#183;&#183;&#183;&#183;&#183;&#183;&#183;&#183;&#183;&#183;&#183;&#183;&#183;&#183;&#183;&#183;</span><span class="InSame">else</span></td></tr>
<tr><td class="LineNum">289</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (typea &lt; 0)</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">290</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new InvalidTermException("Invalid string");</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">291</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;quote.append((char) typea);</td>
<td class="LineNum">271</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;quote.append((char) typea);</td></tr>
<tr><td class="LineNum">292</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">272</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">293</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">294</td><td class="Same">&nbsp;</td>
<td class="LineNum">273</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">295</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String quoteBody = quote.toString();</td>
<td class="LineNum">274</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String quoteBody = quote.toString();</td></tr>
<tr><td class="LineNum">296</td><td class="Same">&nbsp;</td>
<td class="LineNum">275</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">297</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;qType = qType == '\'' ? SQ_SEQUENCE : qType == '\"' ? DQ_SEQUENCE : SQ_SEQUENCE;</td>
<td class="LineNum">276</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;qType = qType == '\'' ? SQ_SEQUENCE : qType == '\"' ? DQ_SEQUENCE : SQ_SEQUENCE;</td></tr>
<tr><td class="LineNum">298</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (qType == SQ_SEQUENCE) {</td>
<td class="LineNum">277</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (qType == SQ_SEQUENCE) {</td></tr>
<tr><td class="LineNum">299</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (Parser.isAtom(quoteBody))</td>
<td class="LineNum">278</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (Parser.isAtom(quoteBody))</td></tr>
<tr><td class="LineNum">300</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;qType = ATOM;</td>
<td class="LineNum">279</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;qType = ATOM;</td></tr>
<tr><td class="LineNum">301</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int typeb = </span><span class="InDiff">t</span><span class="InSame">oken</span><span class="InDiff">Consume</span><span class="InSame">(); // lookahead 1 to identify what type of quote</span></td><td class="LineNum">280</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int typeb = </span><span class="InDiff">super.nextT</span><span class="InSame">oken(); // lookahead 1 to identify what type of quote</span></td></tr>
<tr><td class="LineNum">302</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="InDiff">tokenP</span><span class="InSame">ushBack();                    // nextToken() does not skip whitespaces, only readNext does so.</span></td><td class="LineNum">281</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="InDiff">p</span><span class="InSame">ushBack();                    // nextToken() does not skip whitespaces, only readNext does so.</span></td></tr>
<tr><td class="LineNum">303</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (typeb == '(')</td>
<td class="LineNum">282</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (typeb == '(')</td></tr>
<tr><td class="LineNum">304</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return new Token(quoteBody, qType | FUNCTOR);</td>
<td class="LineNum">283</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return new Token(quoteBody, qType | FUNCTOR);</td></tr>
<tr><td class="LineNum">305</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">284</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">306</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return new Token(quoteBody, qType);</td>
<td class="LineNum">285</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return new Token(quoteBody, qType);</td></tr>
<tr><td class="LineNum">307</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">286</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">308</td><td class="Same">&nbsp;</td>
<td class="LineNum">287</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">309</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// symbols</td>
<td class="LineNum">288</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// symbols</td></tr>
<tr><td class="LineNum">310</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (Arrays.binarySearch(Tokenizer.GRAPHIC_CHARS, (char) typea) &gt;= 0) {</td>
<td class="LineNum">289</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (Arrays.binarySearch(Tokenizer.GRAPHIC_CHARS, (char) typea) &gt;= 0) {</td></tr>
<tr><td class="LineNum">311</td><td class="Same">&nbsp;</td>
<td class="LineNum">290</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">312</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// the symbols are parsed individually by the </span><span class="InDiff">t</span><span class="InSame">oken</span><span class="InDiff">Consume</span><span class="InSame">(), so accumulate symbollist</span></td><td class="LineNum">291</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// the symbols are parsed individually by the </span><span class="InDiff">super.nextT</span><span class="InSame">oken(), so accumulate symbollist</span></td></tr>
<tr><td class="LineNum">313</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;StringBuffer symbols = new StringBuffer();</td>
<td class="LineNum">292</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;StringBuffer symbols = new StringBuffer();</td></tr>
<tr><td class="LineNum">314</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int typeb = typea;</td>
<td class="LineNum">293</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int typeb = typea;</td></tr>
<tr><td class="LineNum">315</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// String svalb = null;</td>
<td class="LineNum">294</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// String svalb = null;</td></tr>
<tr><td class="LineNum">316</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (Arrays.binarySearch(Tokenizer.GRAPHIC_CHARS, (char) typeb) &gt;= 0) {</td>
<td class="LineNum">295</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (Arrays.binarySearch(Tokenizer.GRAPHIC_CHARS, (char) typeb) &gt;= 0) {</td></tr>
<tr><td class="LineNum">317</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;symbols.append((char) typeb);</td>
<td class="LineNum">296</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;symbols.append((char) typeb);</td></tr>
<tr><td class="LineNum">318</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;typeb = </span><span class="InDiff">t</span><span class="InSame">oken</span><span class="InDiff">Consume</span><span class="InSame">();</span></td><td class="LineNum">297</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;typeb = </span><span class="InDiff">super.nextT</span><span class="InSame">oken();</span></td></tr>
<tr><td class="LineNum">319</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// svalb = sval;</td>
<td class="LineNum">298</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// svalb = sval;</td></tr>
<tr><td class="LineNum">320</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">299</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">321</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="InDiff">tokenP</span><span class="InSame">ushBack();</span></td><td class="LineNum">300</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="InDiff">p</span><span class="InSame">ushBack();</span></td></tr>
<tr><td class="LineNum">322</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">301</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">323</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// special symbols: unary + and unary -</td>
<td class="LineNum">302</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// special symbols: unary + and unary -</td></tr>
<tr><td class="LineNum">324</td><td class="Same">//            try {</td>
<td class="LineNum">303</td><td class="Same">//            try {</td></tr>
<tr><td class="LineNum">325</td><td class="Same">//                if (symbols.length() == 1 && typeb == TT_WORD && java.lang.Long.parseLong(svalb) &gt; 0) {</td>
<td class="LineNum">304</td><td class="Same">//                if (symbols.length() == 1 && typeb == TT_WORD && java.lang.Long.parseLong(svalb) &gt; 0) {</td></tr>
<tr><td class="LineNum">326</td><td class="Same">//                    if (typea == '+')                         //todo, issue of handling + and -. I don't think this is ISO..</td>
<td class="LineNum">305</td><td class="Same">//                    if (typea == '+')                         //todo, issue of handling + and -. I don't think this is ISO..</td></tr>
<tr><td class="LineNum">327</td><td class="Same">//                        return readNextToken();               //skips + and returns the next number</td>
<td class="LineNum">306</td><td class="Same">//                        return readNextToken();               //skips + and returns the next number</td></tr>
<tr><td class="LineNum">328</td><td class="Same">//                    if (typea == '-') {</td>
<td class="LineNum">307</td><td class="Same">//                    if (typea == '-') {</td></tr>
<tr><td class="LineNum">329</td><td class="Same">//                        Token t = readNextToken();            //read the next number</td>
<td class="LineNum">308</td><td class="Same">//                        Token t = readNextToken();            //read the next number</td></tr>
<tr><td class="LineNum">330</td><td class="Same">//                        t.seq = "-" + t.seq;                   //add minus to value</td>
<td class="LineNum">309</td><td class="Same">//                        t.seq = "-" + t.seq;                   //add minus to value</td></tr>
<tr><td class="LineNum">331</td><td class="Same">//                        return t;                             //return token</td>
<td class="LineNum">310</td><td class="Same">//                        return t;                             //return token</td></tr>
<tr><td class="LineNum">332</td><td class="Same">//                    }</td>
<td class="LineNum">311</td><td class="Same">//                    }</td></tr>
<tr><td class="LineNum">333</td><td class="Same">//                }                                             //ps. the reason why the number isn't returned right away, but through nextToken(), is because the number might be for instance a float</td>
<td class="LineNum">312</td><td class="Same">//                }                                             //ps. the reason why the number isn't returned right away, but through nextToken(), is because the number might be for instance a float</td></tr>
<tr><td class="LineNum">334</td><td class="Same">//            } catch (NumberFormatException e) {</td>
<td class="LineNum">313</td><td class="Same">//            } catch (NumberFormatException e) {</td></tr>
<tr><td class="LineNum">335</td><td class="Same">//            }</td>
<td class="LineNum">314</td><td class="Same">//            }</td></tr>
<tr><td class="LineNum">336</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return new Token(symbols.toString(), Tokenizer.OPERATOR);</td>
<td class="LineNum">315</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return new Token(symbols.toString(), Tokenizer.OPERATOR);</td></tr>
<tr><td class="LineNum">337</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">316</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">338</td><td class="Same">&nbsp;</td>
<td class="LineNum">317</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">339</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// numbers: 1. integer, 2. float</td>
<td class="LineNum">318</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// numbers: 1. integer, 2. float</td></tr>
<tr><td class="LineNum">340</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (isNumber) {</td>
<td class="LineNum">319</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (isNumber) {</td></tr>
<tr><td class="LineNum">341</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try { // the various parseInt checks will throw exceptions when parts of numbers are written illegally</td>
<td class="LineNum">320</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try { // the various parseInt checks will throw exceptions when parts of numbers are written illegally</td></tr>
<tr><td class="LineNum">342</td><td class="Same">&nbsp;</td>
<td class="LineNum">321</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">343</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// 1.a. complex integers</td>
<td class="LineNum">322</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// 1.a. complex integers</td></tr>
<tr><td class="LineNum">344</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (svala.startsWith("0")) {</td>
<td class="LineNum">323</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (svala.startsWith("0")) {</td></tr>
<tr><td class="LineNum">345</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (svala.indexOf('b') == 1)</td>
<td class="LineNum">324</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (svala.indexOf('b') == 1)</td></tr>
<tr><td class="LineNum">346</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return new Token("" + java.lang.Long.parseLong(svala.substring(2), 2), Tokenizer.INTEGER); // try binary</td>
<td class="LineNum">325</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return new Token("" + java.lang.Long.parseLong(svala.substring(2), 2), Tokenizer.INTEGER); // try binary</td></tr>
<tr><td class="LineNum">347</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (svala.indexOf('o') == 1)</td>
<td class="LineNum">326</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (svala.indexOf('o') == 1)</td></tr>
<tr><td class="LineNum">348</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return new Token("" + java.lang.Long.parseLong(svala.substring(2), 8), Tokenizer.INTEGER); // try octal</td>
<td class="LineNum">327</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return new Token("" + java.lang.Long.parseLong(svala.substring(2), 8), Tokenizer.INTEGER); // try octal</td></tr>
<tr><td class="LineNum">349</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (svala.indexOf('x') == 1)</td>
<td class="LineNum">328</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (svala.indexOf('x') == 1)</td></tr>
<tr><td class="LineNum">350</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return new Token("" + java.lang.Long.parseLong(svala.substring(2), 16), Tokenizer.INTEGER); // try hex</td>
<td class="LineNum">329</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return new Token("" + java.lang.Long.parseLong(svala.substring(2), 16), Tokenizer.INTEGER); // try hex</td></tr>
<tr><td class="LineNum">351</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">330</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">352</td><td class="Same">&nbsp;</td>
<td class="LineNum">331</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">353</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// lookahead 1</td>
<td class="LineNum">332</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// lookahead 1</td></tr>
<tr><td class="LineNum">354</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int typeb = </span><span class="InDiff">t</span><span class="InSame">oken</span><span class="InDiff">Consume</span><span class="InSame">();</span></td><td class="LineNum">333</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int typeb = </span><span class="InDiff">super.nextT</span><span class="InSame">oken();</span></td></tr>
<tr><td class="LineNum">355</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String svalb = sval;</td>
<td class="LineNum">334</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String svalb = sval;</td></tr>
<tr><td class="LineNum">356</td><td class="Same">&nbsp;</td>
<td class="LineNum">335</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">357</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// 1.b ordinary integers</td>
<td class="LineNum">336</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// 1.b ordinary integers</td></tr>
<tr><td class="LineNum">358</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (typeb != '.' && typeb != '\'') { // i.e. not float or character constant</td>
<td class="LineNum">337</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (typeb != '.' && typeb != '\'') { // i.e. not float or character constant</td></tr>
<tr><td class="LineNum">359</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="InDiff">tokenP</span><span class="InSame">ushBack(); // lookahead 0</span></td><td class="LineNum">338</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="InDiff">p</span><span class="InSame">ushBack(); // lookahead 0</span></td></tr>
<tr><td class="LineNum">360</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return new Token("" + java.lang.Long.parseLong(svala), Tokenizer.INTEGER);</td>
<td class="LineNum">339</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return new Token("" + java.lang.Long.parseLong(svala), Tokenizer.INTEGER);</td></tr>
<tr><td class="LineNum">361</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">340</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">362</td><td class="Same">&nbsp;</td>
<td class="LineNum">341</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">363</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// 1.c character code constant</td>
<td class="LineNum">342</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// 1.c character code constant</td></tr>
<tr><td class="LineNum">364</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (typeb == '\'' && "0".equals(svala)) {</td>
<td class="LineNum">343</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (typeb == '\'' && "0".equals(svala)) {</td></tr>
<tr><td class="LineNum">365</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int typec = </span><span class="InDiff">t</span><span class="InSame">oken</span><span class="InDiff">Consume</span><span class="InSame">(); // lookahead 2</span></td><td class="LineNum">344</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int typec = </span><span class="InDiff">super.nextT</span><span class="InSame">oken(); // lookahead 2</span></td></tr>
<tr><td class="LineNum">366</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String svalc = sval;</td>
<td class="LineNum">345</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String svalc = sval;</td></tr>
<tr><td class="LineNum">367</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int intVal;</td>
<td class="LineNum">346</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int intVal;</td></tr>
<tr><td class="LineNum">368</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ((intVal = isCharacterCodeConstantToken(typec, svalc)) != -1)</td>
<td class="LineNum">347</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if ((intVal = isCharacterCodeConstantToken(typec, svalc)) != -1)</td></tr>
<tr><td class="LineNum">369</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return new Token("" + intVal, Tokenizer.INTEGER);</td>
<td class="LineNum">348</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return new Token("" + intVal, Tokenizer.INTEGER);</td></tr>
<tr><td class="LineNum">370</td><td class="Same">&nbsp;</td>
<td class="LineNum">349</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">371</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// this is an invalid character code constant int</td>
<td class="LineNum">350</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// this is an invalid character code constant int</td></tr>
<tr><td class="LineNum">372</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new InvalidTermException("Character code constant starting with 0'&lt;X&gt; cannot be recognized.");</span></td><td class="LineNum">351</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new InvalidTermException("Character code constant starting with 0'&lt;X&gt; </span><span class="InDiff">at line: " + super.lineno() + " </span><span class="InSame">cannot be recognized.");</span></td></tr>
<tr><td class="LineNum">373</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">352</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">374</td><td class="Same">&nbsp;</td>
<td class="LineNum">353</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">375</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// 2.a check that the value of the word prior to period is a valid long</td>
<td class="LineNum">354</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// 2.a check that the value of the word prior to period is a valid long</td></tr>
<tr><td class="LineNum">376</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;java.lang.Long.parseLong(svala); // throws an exception if not</td>
<td class="LineNum">355</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;java.lang.Long.parseLong(svala); // throws an exception if not</td></tr>
<tr><td class="LineNum">377</td><td class="Same">&nbsp;</td>
<td class="LineNum">356</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">378</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// 2.b first int is followed by a period</td>
<td class="LineNum">357</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// 2.b first int is followed by a period</td></tr>
<tr><td class="LineNum">379</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (typeb != '.')</td>
<td class="LineNum">358</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (typeb != '.')</td></tr>
<tr><td class="LineNum">380</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new InvalidTermException("A number starting with 0-9 cannot be rcognized as an int and does not have a fraction '.'</span><span class="InDiff">"</span><span class="InSame">);</span></td><td class="LineNum">359</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new InvalidTermException("A number starting with 0-9 cannot be rcognized as an int and does not have a fraction '.'</span><span class="InDiff">&#183;at line: " + super.lineno() </span><span class="InSame">);</span></td></tr>
<tr><td class="LineNum">381</td><td class="Same">&nbsp;</td>
<td class="LineNum">360</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">382</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// lookahead 2</td>
<td class="LineNum">361</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// lookahead 2</td></tr>
<tr><td class="LineNum">383</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int typec = </span><span class="InDiff">t</span><span class="InSame">oken</span><span class="InDiff">Consume</span><span class="InSame">();</span></td><td class="LineNum">362</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int typec = </span><span class="InDiff">super.nextT</span><span class="InSame">oken();</span></td></tr>
<tr><td class="LineNum">384</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String svalc = sval;</td>
<td class="LineNum">363</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String svalc = sval;</td></tr>
<tr><td class="LineNum">385</td><td class="Same">&nbsp;</td>
<td class="LineNum">364</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">386</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// 2.c check that the next token after '.' is a possible fraction</td>
<td class="LineNum">365</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// 2.c check that the next token after '.' is a possible fraction</td></tr>
<tr><td class="LineNum">387</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (typec != TT_WORD) { // if its not, the period is an End period</td>
<td class="LineNum">366</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (typec != TT_WORD) { // if its not, the period is an End period</td></tr>
<tr><td class="LineNum">388</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="InDiff">tokenP</span><span class="InSame">ushBack(); // pushback 1 the token after period</span></td><td class="LineNum">367</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</span><span class="InDiff">p</span><span class="InSame">ushBack(); // pushback 1 the token after period</span></td></tr>
<tr><td class="LineNum">389</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pushBack2 = new PushBack(typeb, svalb); // pushback 2 the period token</td>
<td class="LineNum">368</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;pushBack2 = new PushBack(typeb, svalb); // pushback 2 the period token</td></tr>
<tr><td class="LineNum">390</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return new Token(svala, INTEGER); // return what must be an int</td>
<td class="LineNum">369</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return new Token(svala, INTEGER); // return what must be an int</td></tr>
<tr><td class="LineNum">391</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">370</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">392</td><td class="Same">&nbsp;</td>
<td class="LineNum">371</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">393</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// 2.d checking for exponent</td>
<td class="LineNum">372</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// 2.d checking for exponent</td></tr>
<tr><td class="LineNum">394</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int exponent = svalc.indexOf("E");</td>
<td class="LineNum">373</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int exponent = svalc.indexOf("E");</td></tr>
<tr><td class="LineNum">395</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (exponent == -1)</td>
<td class="LineNum">374</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (exponent == -1)</td></tr>
<tr><td class="LineNum">396</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exponent = svalc.indexOf("e");</td>
<td class="LineNum">375</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;exponent = svalc.indexOf("e");</td></tr>
<tr><td class="LineNum">397</td><td class="Same">&nbsp;</td>
<td class="LineNum">376</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">398</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (exponent &gt;= 1) {                                  // the float must have a valid exponent</td>
<td class="LineNum">377</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (exponent &gt;= 1) {                                  // the float must have a valid exponent</td></tr>
<tr><td class="LineNum">399</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (exponent == svalc.length() - 1) {             // the exponent must be signed exponent</td>
<td class="LineNum">378</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (exponent == svalc.length() - 1) {             // the exponent must be signed exponent</td></tr>
<tr><td class="LineNum">400</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int typeb2 = </span><span class="InDiff">t</span><span class="InSame">oken</span><span class="InDiff">Consume</span><span class="InSame">();</span></td><td class="LineNum">379</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int typeb2 = </span><span class="InDiff">super.nextT</span><span class="InSame">oken();</span></td></tr>
<tr><td class="LineNum">401</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (typeb2 == '+' || typeb2 == '-') {</td>
<td class="LineNum">380</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (typeb2 == '+' || typeb2 == '-') {</td></tr>
<tr><td class="LineNum">402</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int typec2 = </span><span class="InDiff">t</span><span class="InSame">oken</span><span class="InDiff">Consume</span><span class="InSame">();</span></td><td class="LineNum">381</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int typec2 = </span><span class="InDiff">super.nextT</span><span class="InSame">oken();</span></td></tr>
<tr><td class="LineNum">403</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String svalc2 = sval;</td>
<td class="LineNum">382</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String svalc2 = sval;</td></tr>
<tr><td class="LineNum">404</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (typec2 == TT_WORD){</td>
<td class="LineNum">383</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (typec2 == TT_WORD){</td></tr>
<tr><td class="LineNum">405</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// verify the remaining parts of the float and return</td>
<td class="LineNum">384</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// verify the remaining parts of the float and return</td></tr>
<tr><td class="LineNum">406</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;java.lang.Long.parseLong(svalc.substring(0, exponent));</td>
<td class="LineNum">385</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;java.lang.Long.parseLong(svalc.substring(0, exponent));</td></tr>
<tr><td class="LineNum">407</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;java.lang.Integer.parseInt(svalc2);</td>
<td class="LineNum">386</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;java.lang.Integer.parseInt(svalc2);</td></tr>
<tr><td class="LineNum">408</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return new Token(svala + "." + svalc + (char) typeb2 + svalc2, Tokenizer.FLOAT);</td>
<td class="LineNum">387</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return new Token(svala + "." + svalc + (char) typeb2 + svalc2, Tokenizer.FLOAT);</td></tr>
<tr><td class="LineNum">409</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">388</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">410</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">389</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">411</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">390</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">412</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">391</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">413</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// 2.e verify lastly that ordinary floats and unsigned exponent floats are Java legal and return them</td>
<td class="LineNum">392</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// 2.e verify lastly that ordinary floats and unsigned exponent floats are Java legal and return them</td></tr>
<tr><td class="LineNum">414</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;java.lang.Double.parseDouble(svala + "." + svalc);</td>
<td class="LineNum">393</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;java.lang.Double.parseDouble(svala + "." + svalc);</td></tr>
<tr><td class="LineNum">415</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return new Token(svala + "." + svalc, Tokenizer.FLOAT);</td>
<td class="LineNum">394</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return new Token(svala + "." + svalc, Tokenizer.FLOAT);</td></tr>
<tr><td class="LineNum">416</td><td class="Same">&nbsp;</td>
<td class="LineNum">395</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">417</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} catch (NumberFormatException e) {</td>
<td class="LineNum">396</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;} catch (NumberFormatException e) {</td></tr>
<tr><td class="LineNum">418</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// TODO return more info on what was wrong with the number given</td>
<td class="LineNum">397</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// TODO return more info on what was wrong with the number given</td></tr>
<tr><td class="LineNum">419</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new InvalidTermException("A term starting with 0-9 cannot be parsed as a number</span><span class="InDiff">"</span><span class="InSame">);</span></td><td class="LineNum">398</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new InvalidTermException("A term starting with 0-9 cannot be parsed as a number</span><span class="InDiff">&#183;at line: "+ lineno()</span><span class="InSame">);</span></td></tr>
<tr><td class="LineNum">420</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">399</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">421</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">400</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">422</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new InvalidTermException("Unknown Unicode character: " + typea + "  (" + svala + ")");</td>
<td class="LineNum">401</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;throw new InvalidTermException("Unknown Unicode character: " + typea + "  (" + svala + ")");</td></tr>
<tr><td class="LineNum">423</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;}</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">424</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">425</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;/* Francesco Fabbri</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">426</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* 15/04/2011</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">427</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Fix line number issue (always -1)</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">428</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">429</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">430</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;@Override</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">431</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;public int lineno() {</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">432</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return offsetToRowColumn(tokenOffset)[0];</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">433</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;}</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">434</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">435</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;public int tokenOffset() {</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">436</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return tokenOffset;</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">437</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;}</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">438</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">439</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;public int tokenStart() {</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">440</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return tokenStart;</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">441</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;}</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">442</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">443</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;public int[] offsetToRowColumn(int offset) {</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">444</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (text == null || text.length() &lt;= 0)</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">445</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return new int[] { super.lineno(), -1 };</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">446</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">447</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String newText = removeTrailing(text,tokenOffset);</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">448</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int lno = 0;</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">449</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int lastNewline = -1;</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">450</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">451</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (int i=0; i&lt;newText.length() && i&lt;offset; i++) {</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">452</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (newText.charAt(i) == '\n') {</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">453</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lno++;</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">454</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;lastNewline = i;</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">455</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">456</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">457</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return new int[] { lno+1, offset-lastNewline };</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">458</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;}</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">459</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">460</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;/**</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">461</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Marco Prati </td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">462</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* 19/04/11</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">463</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* </td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">464</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* remove Trailing spaces from last token, where</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">465</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* tokenizer stopped itself to correct the offset</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">466</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* </td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">467</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">468</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;String removeTrailing(String input,int tokenOffset){</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">469</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int i = tokenOffset;</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">470</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String out=input;</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">471</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">472</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;try {</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">473</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;char c = input.charAt(tokenOffset-1);</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">474</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while(c == '\n'){</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">475</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out=input.substring(0, i);</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">476</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;i--;</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">477</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;c = input.charAt(i);</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">478</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">479</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;out=out.concat(input.substring(tokenOffset));</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">480</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return out;</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">481</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">482</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;catch (Exception e) { return input; }</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">483</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;}</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">484</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">485</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;/**</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">486</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Read a token from the stream, and increase tokenOffset</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">487</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @return the readed token</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">488</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @throws IOException</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">489</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">490</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;private int tokenConsume() throws IOException {</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">491</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int t = super.nextToken();</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">492</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tokenLength = (sval == null ? 1 : sval.length());</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">493</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tokenOffset += tokenLength;</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">494</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return t;</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">495</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;}</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">496</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">497</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;/**</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">498</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Push back the last readed token</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">499</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">500</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;private void tokenPushBack() {</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">501</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super.pushBack();</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">502</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;tokenOffset -= tokenLength;</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">503</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">402</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">504</td><td class="Same">&nbsp;</td>
<td class="LineNum">403</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">505</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td>
<td class="LineNum">404</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td></tr>
<tr><td class="LineNum">506</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*</td>
<td class="LineNum">405</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*</td></tr>
<tr><td class="LineNum">507</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*</td>
<td class="LineNum">406</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*</td></tr>
<tr><td class="LineNum">508</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @param typec</td>
<td class="LineNum">407</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @param typec</td></tr>
<tr><td class="LineNum">509</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @param svalc</td>
<td class="LineNum">408</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @param svalc</td></tr>
<tr><td class="LineNum">510</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @return the intValue of the next character token, -1 if invalid</td>
<td class="LineNum">409</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @return the intValue of the next character token, -1 if invalid</td></tr>
<tr><td class="LineNum">511</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* todo needs a lookahead if typec is \</td>
<td class="LineNum">410</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* todo needs a lookahead if typec is \</td></tr>
<tr><td class="LineNum">512</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td>
<td class="LineNum">411</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td></tr>
<tr><td class="LineNum">513</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;private static int isCharacterCodeConstantToken(int typec, String svalc) {</td>
<td class="LineNum">412</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;private static int isCharacterCodeConstantToken(int typec, String svalc) {</td></tr>
<tr><td class="LineNum">514</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (svalc != null) {</td>
<td class="LineNum">413</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (svalc != null) {</td></tr>
<tr><td class="LineNum">515</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (svalc.length() == 1)</td>
<td class="LineNum">414</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (svalc.length() == 1)</td></tr>
<tr><td class="LineNum">516</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return (int) svalc.charAt(0);</td>
<td class="LineNum">415</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return (int) svalc.charAt(0);</td></tr>
<tr><td class="LineNum">517</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (svalc.length() &gt; 1) {</td>
<td class="LineNum">416</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (svalc.length() &gt; 1) {</td></tr>
<tr><td class="LineNum">518</td><td class="Same">// TODO the following charachters is not implemented:</td>
<td class="LineNum">417</td><td class="Same">// TODO the following charachters is not implemented:</td></tr>
<tr><td class="LineNum">519</td><td class="Same">//                * 1 meta escape sequence (* 6.4.2.1 *) todo</td>
<td class="LineNum">418</td><td class="Same">//                * 1 meta escape sequence (* 6.4.2.1 *) todo</td></tr>
<tr><td class="LineNum">520</td><td class="Same">//                * 1 control escape sequence (* 6.4.2.1 *)</td>
<td class="LineNum">419</td><td class="Same">//                * 1 control escape sequence (* 6.4.2.1 *)</td></tr>
<tr><td class="LineNum">521</td><td class="Same">//                * 1 octal escape sequence (* 6.4.2.1 *)</td>
<td class="LineNum">420</td><td class="Same">//                * 1 octal escape sequence (* 6.4.2.1 *)</td></tr>
<tr><td class="LineNum">522</td><td class="Same">//                * 1 hexadecimal escape sequence (* 6.4.2.1 *)</td>
<td class="LineNum">421</td><td class="Same">//                * 1 hexadecimal escape sequence (* 6.4.2.1 *)</td></tr>
<tr><td class="LineNum">523</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return -1;</td>
<td class="LineNum">422</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return -1;</td></tr>
<tr><td class="LineNum">524</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">423</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">525</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">424</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">526</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (typec == ' ' ||                       // space char (* 6.5.4 *)</td>
<td class="LineNum">425</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (typec == ' ' ||                       // space char (* 6.5.4 *)</td></tr>
<tr><td class="LineNum">527</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Arrays.binarySearch(GRAPHIC_CHARS, (char)typec) &gt;= 0)  // graphic char (* 6.5.1 *)</td>
<td class="LineNum">426</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Arrays.binarySearch(GRAPHIC_CHARS, (char)typec) &gt;= 0)  // graphic char (* 6.5.1 *)</td></tr>
<tr><td class="LineNum">528</td><td class="Same">//          TODO solo char (* 6.5.3 *)</td>
<td class="LineNum">427</td><td class="Same">//          TODO solo char (* 6.5.3 *)</td></tr>
<tr><td class="LineNum">529</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return typec;</td>
<td class="LineNum">428</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return typec;</td></tr>
<tr><td class="LineNum">530</td><td class="Same">&nbsp;</td>
<td class="LineNum">429</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">531</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return -1;</td>
<td class="LineNum">430</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return -1;</td></tr>
<tr><td class="LineNum">532</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">431</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">533</td><td class="Same">&nbsp;</td>
<td class="LineNum">432</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">534</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;private static boolean isWhite(int type) {</td>
<td class="LineNum">433</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;private static boolean isWhite(int type) {</td></tr>
<tr><td class="LineNum">535</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return type == ' ' || type == '\r' || type == '\n' || type == '\t' || type == '\f';</td>
<td class="LineNum">434</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return type == ' ' || type == '\r' || type == '\n' || type == '\t' || type == '\f';</td></tr>
<tr><td class="LineNum">536</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">435</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">537</td><td class="Same">&nbsp;</td>
<td class="LineNum">436</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">538</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td>
<td class="LineNum">437</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td></tr>
<tr><td class="LineNum">539</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* used to implement lookahead for two tokens, super.pushBack() only handles one pushBack..</td>
<td class="LineNum">438</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* used to implement lookahead for two tokens, super.pushBack() only handles one pushBack..</td></tr>
<tr><td class="LineNum">540</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td>
<td class="LineNum">439</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td></tr>
<tr><td class="LineNum">541</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;private static class PushBack {</td>
<td class="LineNum">440</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;private static class PushBack {</td></tr>
<tr><td class="LineNum">542</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int typea;</td>
<td class="LineNum">441</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int typea;</td></tr>
<tr><td class="LineNum">543</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String svala;</td>
<td class="LineNum">442</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;String svala;</td></tr>
<tr><td class="LineNum">544</td><td class="Same">&nbsp;</td>
<td class="LineNum">443</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">545</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public PushBack(int i, String s) {</td>
<td class="LineNum">444</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public PushBack(int i, String s) {</td></tr>
<tr><td class="LineNum">546</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;typea = i;</td>
<td class="LineNum">445</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;typea = i;</td></tr>
<tr><td class="LineNum">547</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;svala = s;</td>
<td class="LineNum">446</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;svala = s;</td></tr>
<tr><td class="LineNum">548</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">447</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">549</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">448</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">550</td><td class="Same">}</td>
<td class="LineNum">449</td><td class="Same">}</td></tr>

</table>


</body></html>
