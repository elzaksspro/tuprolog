<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- Generated by Compare It! (c) Grig Software -->
<HTML>
<HEAD>
<TITLE>OperatorManager.java Diff Report</TITLE>
<style type="text/css">
<!--
body { font-family: Verdana,Arial,Helvetica; background-color: #FFFFFF; }
td   { border:0; font-family: Arial, Helvetica; font-size: xx-small;}
table { border:0; width:100%; color: #666666;}
thead  { background-color: #343434; color: #FFFFFF; font-family: Verdana, Arial, Helvetica; height: 30px; vertical-align: middle; text-align: center; font-weight: bold; }
.Same { width:48%; }
.SrcOnly { background-color: #C0DCC0; color:#008000; width:48%; }
.DstOnly { background-color: #C0DCC0; color:#C80000; width:48%; }
.Virtual { background-color: #EEEEEE; width:48%; }
.Changed { background-color: #C0DCC0; color:#0000FF; width:48%; }
.InSame{ color:#0000FF; }
.InDiff { color:#C80000; font-weight:bold; }
.LineNum { background-color: #EEEEEE; width:2%; }
.Stats { background-color: #EEEEEE; color:black; }
.StatsA { background-color: #EEEEEE; color:black; }
a { font-family: Arial, Helvetica; font-size: xx-small;background-color: #EEEEEE; color:blue;}
-->
</STYLE>
</HEAD>
<BODY>
<table><tr><td align=right>Tuesday, May 17, 2011 10:40:08</td></tr></table>
<table>
<thead><tr><td width=50%>[NEW] alice/tuprolog/OperatorManager.java</td><td width=50%>[OLD] alice/tuprolog/OperatorManager.java</td></tr></thead></table>

<table cellspacing=1 cellpadding=0>
<tr><td class="LineNum">1</td><td class="Same">/*</td>
<td class="LineNum">1</td><td class="Same">/*</td></tr>
<tr><td class="LineNum">2</td><td class="Same">&nbsp;* tuProlog - Copyright (C) 2001-2006  aliCE team at deis.unibo.it</td>
<td class="LineNum">2</td><td class="Same">&nbsp;* tuProlog - Copyright (C) 2001-2006  aliCE team at deis.unibo.it</td></tr>
<tr><td class="LineNum">3</td><td class="Same">&nbsp;*</td>
<td class="LineNum">3</td><td class="Same">&nbsp;*</td></tr>
<tr><td class="LineNum">4</td><td class="Same">&nbsp;* This library is free software; you can redistribute it and/or</td>
<td class="LineNum">4</td><td class="Same">&nbsp;* This library is free software; you can redistribute it and/or</td></tr>
<tr><td class="LineNum">5</td><td class="Same">&nbsp;* modify it under the terms of the GNU Lesser General Public</td>
<td class="LineNum">5</td><td class="Same">&nbsp;* modify it under the terms of the GNU Lesser General Public</td></tr>
<tr><td class="LineNum">6</td><td class="Same">&nbsp;* License as published by the Free Software Foundation; either</td>
<td class="LineNum">6</td><td class="Same">&nbsp;* License as published by the Free Software Foundation; either</td></tr>
<tr><td class="LineNum">7</td><td class="Same">&nbsp;* version 2.1 of the License, or (at your option) any later version.</td>
<td class="LineNum">7</td><td class="Same">&nbsp;* version 2.1 of the License, or (at your option) any later version.</td></tr>
<tr><td class="LineNum">8</td><td class="Same">&nbsp;*</td>
<td class="LineNum">8</td><td class="Same">&nbsp;*</td></tr>
<tr><td class="LineNum">9</td><td class="Same">&nbsp;* This library is distributed in the hope that it will be useful,</td>
<td class="LineNum">9</td><td class="Same">&nbsp;* This library is distributed in the hope that it will be useful,</td></tr>
<tr><td class="LineNum">10</td><td class="Same">&nbsp;* but WITHOUT ANY WARRANTY; without even the implied warranty of</td>
<td class="LineNum">10</td><td class="Same">&nbsp;* but WITHOUT ANY WARRANTY; without even the implied warranty of</td></tr>
<tr><td class="LineNum">11</td><td class="Same">&nbsp;* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</td>
<td class="LineNum">11</td><td class="Same">&nbsp;* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</td></tr>
<tr><td class="LineNum">12</td><td class="Same">&nbsp;* Lesser General Public License for more details.</td>
<td class="LineNum">12</td><td class="Same">&nbsp;* Lesser General Public License for more details.</td></tr>
<tr><td class="LineNum">13</td><td class="Same">&nbsp;*</td>
<td class="LineNum">13</td><td class="Same">&nbsp;*</td></tr>
<tr><td class="LineNum">14</td><td class="Same">&nbsp;* You should have received a copy of the GNU Lesser General Public</td>
<td class="LineNum">14</td><td class="Same">&nbsp;* You should have received a copy of the GNU Lesser General Public</td></tr>
<tr><td class="LineNum">15</td><td class="Same">&nbsp;* License along with this library; if not, write to the Free Software</td>
<td class="LineNum">15</td><td class="Same">&nbsp;* License along with this library; if not, write to the Free Software</td></tr>
<tr><td class="LineNum">16</td><td class="Same">&nbsp;* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</td>
<td class="LineNum">16</td><td class="Same">&nbsp;* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</td></tr>
<tr><td class="LineNum">17</td><td class="Same">&nbsp;*/</td>
<td class="LineNum">17</td><td class="Same">&nbsp;*/</td></tr>
<tr><td class="LineNum">18</td><td class="Same">package alice.tuprolog;</td>
<td class="LineNum">18</td><td class="Same">package alice.tuprolog;</td></tr>
<tr><td class="LineNum">19</td><td class="Same">&nbsp;</td>
<td class="LineNum">19</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">20</td><td class="SrcOnly">import java.io.Serializable;</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">21</td><td class="Same">import java.util.Iterator;</td>
<td class="LineNum">20</td><td class="Same">import java.util.Iterator;</td></tr>
<tr><td class="LineNum">22</td><td class="Same">import java.util.LinkedHashSet;</td>
<td class="LineNum">21</td><td class="Same">import java.util.LinkedHashSet;</td></tr>
<tr><td class="LineNum">23</td><td class="Same">import java.util.LinkedList;</td>
<td class="LineNum">22</td><td class="Same">import java.util.LinkedList;</td></tr>
<tr><td class="LineNum">24</td><td class="Same">import java.util.List;</td>
<td class="LineNum">23</td><td class="Same">import java.util.List;</td></tr>
<tr><td class="LineNum">25</td><td class="Same">import java.util.HashMap;</td>
<td class="LineNum">24</td><td class="Same">import java.util.HashMap;</td></tr>
<tr><td class="LineNum">26</td><td class="SrcOnly">import alice.tuprolog.interfaces.IOperatorManager;</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">27</td><td class="Same">&nbsp;</td>
<td class="LineNum">25</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">28</td><td class="Same">/**</td>
<td class="LineNum">26</td><td class="Same">/**</td></tr>
<tr><td class="LineNum">29</td><td class="Same">&nbsp;* This class manages Prolog operators.</td>
<td class="LineNum">27</td><td class="Same">&nbsp;* This class manages Prolog operators.</td></tr>
<tr><td class="LineNum">30</td><td class="Same">&nbsp;*</td>
<td class="LineNum">28</td><td class="Same">&nbsp;*</td></tr>
<tr><td class="LineNum">31</td><td class="Same">&nbsp;* @see Operator</td>
<td class="LineNum">29</td><td class="Same">&nbsp;* @see Operator</td></tr>
<tr><td class="LineNum">32</td><td class="Same">&nbsp;*/</td>
<td class="LineNum">30</td><td class="Same">&nbsp;*/</td></tr>
<tr><td class="LineNum">33</td><td class="Changed"><span class="InDiff">public </span><span class="InSame">class OperatorManager implements </span><span class="InDiff">IOperatorManager, </span><span class="InSame">Serializable {</span></td><td class="LineNum">31</td><td class="Changed"><span class="InSame">class OperatorManager implements </span><span class="InDiff">java.io.</span><span class="InSame">Serializable {</span></td></tr>
<tr><td class="LineNum">34</td><td class="Same">&nbsp;</td>
<td class="LineNum">32</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">35</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/** current known operators */</td>
<td class="LineNum">33</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/** current known operators */</td></tr>
<tr><td class="LineNum">36</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;private OperatorRegister operatorList = new OperatorRegister();</td>
<td class="LineNum">34</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;private OperatorRegister operatorList = new OperatorRegister();</td></tr>
<tr><td class="LineNum">37</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">35</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">38</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/** lowest operator priority */</td>
<td class="LineNum">36</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/** lowest operator priority */</td></tr>
<tr><td class="LineNum">39</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public static final int OP_LOW = 1;</td>
<td class="LineNum">37</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public static final int OP_LOW = 1;</td></tr>
<tr><td class="LineNum">40</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">38</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">41</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/** highest operator priority */</td>
<td class="LineNum">39</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/** highest operator priority */</td></tr>
<tr><td class="LineNum">42</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public static final int OP_HIGH = 1200;</td>
<td class="LineNum">40</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public static final int OP_HIGH = 1200;</td></tr>
<tr><td class="LineNum">43</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">41</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">44</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td>
<td class="LineNum">42</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td></tr>
<tr><td class="LineNum">45</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Creates a new operator. If the operator is already provided,</td>
<td class="LineNum">43</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Creates a new operator. If the operator is already provided,</td></tr>
<tr><td class="LineNum">46</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* it replaces it with the new one</td>
<td class="LineNum">44</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* it replaces it with the new one</td></tr>
<tr><td class="LineNum">47</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td>
<td class="LineNum">45</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td></tr>
<tr><td class="LineNum">48</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public void opNew(String name,String type,int prio) {</td>
<td class="LineNum">46</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public void opNew(String name,String type,int prio) {</td></tr>
<tr><td class="LineNum">49</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;final Operator op = new Operator(name, type, prio);</td>
<td class="LineNum">47</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;final Operator op = new Operator(name, type, prio);</td></tr>
<tr><td class="LineNum">50</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (prio &gt;= OP_LOW && prio &lt;= OP_HIGH)</td>
<td class="LineNum">48</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (prio &gt;= OP_LOW && prio &lt;= OP_HIGH)</td></tr>
<tr><td class="LineNum">51</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;operatorList.addOperator(op);</td>
<td class="LineNum">49</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;operatorList.addOperator(op);</td></tr>
<tr><td class="LineNum">52</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">50</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">53</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">51</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">54</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td>
<td class="LineNum">52</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td></tr>
<tr><td class="LineNum">55</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Returns the priority of an operator (0 if the operator is not defined).</td>
<td class="LineNum">53</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Returns the priority of an operator (0 if the operator is not defined).</td></tr>
<tr><td class="LineNum">56</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td>
<td class="LineNum">54</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td></tr>
<tr><td class="LineNum">57</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public int opPrio(String name,String type) {</td>
<td class="LineNum">55</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public int opPrio(String name,String type) {</td></tr>
<tr><td class="LineNum">58</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Operator o = operatorList.getOperator(name, type);</td>
<td class="LineNum">56</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Operator o = operatorList.getOperator(name, type);</td></tr>
<tr><td class="LineNum">59</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return (o == null) ? 0 : o.prio;</td>
<td class="LineNum">57</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return (o == null) ? 0 : o.prio;</td></tr>
<tr><td class="LineNum">60</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">58</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">61</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">59</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">62</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td>
<td class="LineNum">60</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td></tr>
<tr><td class="LineNum">63</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Returns the priority nearest (lower) to the priority of a defined operator</td>
<td class="LineNum">61</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Returns the priority nearest (lower) to the priority of a defined operator</td></tr>
<tr><td class="LineNum">64</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td>
<td class="LineNum">62</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td></tr>
<tr><td class="LineNum">65</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public int opNext(int prio) {</td>
<td class="LineNum">63</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public int opNext(int prio) {</td></tr>
<tr><td class="LineNum">66</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int n = 0;</td>
<td class="LineNum">64</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int n = 0;</td></tr>
<tr><td class="LineNum">67</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (Iterator it = operatorList.iterator(); it.hasNext();) {</td>
<td class="LineNum">65</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (Iterator it = operatorList.iterator(); it.hasNext();) {</td></tr>
<tr><td class="LineNum">68</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Operator opFromList = (Operator) it.next();</td>
<td class="LineNum">66</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Operator opFromList = (Operator) it.next();</td></tr>
<tr><td class="LineNum">69</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (opFromList.prio &gt; n && opFromList.prio &lt; prio)</td>
<td class="LineNum">67</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (opFromList.prio &gt; n && opFromList.prio &lt; prio)</td></tr>
<tr><td class="LineNum">70</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n = opFromList.prio;</td>
<td class="LineNum">68</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;n = opFromList.prio;</td></tr>
<tr><td class="LineNum">71</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">69</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">72</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return n;</td>
<td class="LineNum">70</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return n;</td></tr>
<tr><td class="LineNum">73</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">71</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">74</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">72</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">75</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td>
<td class="LineNum">73</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td></tr>
<tr><td class="LineNum">76</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*  Gets the list of the operators currently defined</td>
<td class="LineNum">74</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*  Gets the list of the operators currently defined</td></tr>
<tr><td class="LineNum">77</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*</td>
<td class="LineNum">75</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*</td></tr>
<tr><td class="LineNum">78</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*  @return the list of the operators</td>
<td class="LineNum">76</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*  @return the list of the operators</td></tr>
<tr><td class="LineNum">79</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td>
<td class="LineNum">77</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td></tr>
<tr><td class="LineNum">80</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public List getOperators() {</td>
<td class="LineNum">78</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public List getOperators() {</td></tr>
<tr><td class="LineNum">81</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return new LinkedList(operatorList);</td>
<td class="LineNum">79</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return new LinkedList(operatorList);</td></tr>
<tr><td class="LineNum">82</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">80</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">83</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">81</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">84</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;/* Francesco Fabbri</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">85</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* 16/05/2011</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">86</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Clone operation added</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">87</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/ </td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">88</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;public IOperatorManager clone() {</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">89</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OperatorManager om = new OperatorManager();</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">90</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;om.operatorList = (OperatorRegister)this.operatorList.clone();</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">91</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return om;      </td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">92</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;}</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">93</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">94</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td>
<td class="LineNum">82</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td></tr>
<tr><td class="LineNum">95</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Register for operators</td>
<td class="LineNum">83</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Register for operators</td></tr>
<tr><td class="LineNum">96</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Cashes operator by name+type description.</td>
<td class="LineNum">84</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Cashes operator by name+type description.</td></tr>
<tr><td class="LineNum">97</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Retains insertion order as LinkedHashSet.</td>
<td class="LineNum">85</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Retains insertion order as LinkedHashSet.</td></tr>
<tr><td class="LineNum">98</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* &lt;p/&gt;</td>
<td class="LineNum">86</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* &lt;p/&gt;</td></tr>
<tr><td class="LineNum">99</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* todo Not 100% sure if 'insertion-order-priority' should be completely replaced</td>
<td class="LineNum">87</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* todo Not 100% sure if 'insertion-order-priority' should be completely replaced</td></tr>
<tr><td class="LineNum">100</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* by the explicit priority given to operators.</td>
<td class="LineNum">88</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* by the explicit priority given to operators.</td></tr>
<tr><td class="LineNum">101</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*</td>
<td class="LineNum">89</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*</td></tr>
<tr><td class="LineNum">102</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @author ivar.orstavik@hist.no</td>
<td class="LineNum">90</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @author ivar.orstavik@hist.no</td></tr>
<tr><td class="LineNum">103</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td>
<td class="LineNum">91</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td></tr>
<tr><td class="LineNum">104</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;private static class OperatorRegister extends LinkedHashSet</span><span class="InDiff">&#183;implements Cloneable</span><span class="InSame">&nbsp;{</span></td><td class="LineNum">92</td><td class="Changed"><span class="InSame">&nbsp;&nbsp;&nbsp;&nbsp;private static class OperatorRegister extends LinkedHashSet {</span></td></tr>
<tr><td class="LineNum">105</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//map of operators by name and type</td>
<td class="LineNum">93</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//map of operators by name and type</td></tr>
<tr><td class="LineNum">106</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//key is the nameType of an operator (for example ":-xfx") - value is an Operator</td>
<td class="LineNum">94</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;//key is the nameType of an operator (for example ":-xfx") - value is an Operator</td></tr>
<tr><td class="LineNum">107</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;private HashMap nameTypeToKey = new HashMap();</td>
<td class="LineNum">95</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;private HashMap nameTypeToKey = new HashMap();</td></tr>
<tr><td class="LineNum">108</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">96</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">109</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public boolean addOperator(Operator op) {</td>
<td class="LineNum">97</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public boolean addOperator(Operator op) {</td></tr>
<tr><td class="LineNum">110</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;final String nameTypeKey = op.name + op.type;</td>
<td class="LineNum">98</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;final String nameTypeKey = op.name + op.type;</td></tr>
<tr><td class="LineNum">111</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Operator matchingOp = (Operator) nameTypeToKey.get(nameTypeKey);</td>
<td class="LineNum">99</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Operator matchingOp = (Operator) nameTypeToKey.get(nameTypeKey);</td></tr>
<tr><td class="LineNum">112</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (matchingOp != null)</td>
<td class="LineNum">100</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (matchingOp != null)</td></tr>
<tr><td class="LineNum">113</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super.remove(matchingOp);       //removes found match from the main list</td>
<td class="LineNum">101</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super.remove(matchingOp);       //removes found match from the main list</td></tr>
<tr><td class="LineNum">114</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nameTypeToKey.put(nameTypeKey, op); //writes over found match in nameTypeToKey map</td>
<td class="LineNum">102</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;nameTypeToKey.put(nameTypeKey, op); //writes over found match in nameTypeToKey map</td></tr>
<tr><td class="LineNum">115</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return super.add(op);               //adds new operator to the main list</td>
<td class="LineNum">103</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return super.add(op);               //adds new operator to the main list</td></tr>
<tr><td class="LineNum">116</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">104</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">117</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">105</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">118</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public Operator getOperator(String name, String type) {</td>
<td class="LineNum">106</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public Operator getOperator(String name, String type) {</td></tr>
<tr><td class="LineNum">119</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return (Operator) nameTypeToKey.get(name + type);</td>
<td class="LineNum">107</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return (Operator) nameTypeToKey.get(name + type);</td></tr>
<tr><td class="LineNum">120</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">121</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">122</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;@Override</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">123</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public Object clone() {</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">124</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;OperatorRegister or = (OperatorRegister)super.clone();</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">125</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Iterator&lt;Operator&gt; ior = (Iterator&lt;Operator&gt;)or.iterator();</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">126</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;or.nameTypeToKey = new HashMap&lt;String, Operator&gt;();</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">127</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while(ior.hasNext()) {</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">128</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Operator o = (Operator)ior.next();</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">129</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;or.nameTypeToKey.put(o.name + o.type, o);</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">130</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">131</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return or;</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">132</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">108</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">133</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">109</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">134</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">110</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">135</td><td class="Same">}</td>
<td class="LineNum">111</td><td class="Same">}</td></tr>

</table>


</body></html>
