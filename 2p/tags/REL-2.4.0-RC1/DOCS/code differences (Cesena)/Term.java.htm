<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- Generated by Compare It! (c) Grig Software -->
<HTML>
<HEAD>
<TITLE>Term.java Diff Report</TITLE>
<style type="text/css">
<!--
body { font-family: Verdana,Arial,Helvetica; background-color: #FFFFFF; }
td   { border:0; font-family: Arial, Helvetica; font-size: xx-small;}
table { border:0; width:100%; color: #666666;}
thead  { background-color: #343434; color: #FFFFFF; font-family: Verdana, Arial, Helvetica; height: 30px; vertical-align: middle; text-align: center; font-weight: bold; }
.Same { width:48%; }
.SrcOnly { background-color: #C0DCC0; color:#008000; width:48%; }
.DstOnly { background-color: #C0DCC0; color:#C80000; width:48%; }
.Virtual { background-color: #EEEEEE; width:48%; }
.Changed { background-color: #C0DCC0; color:#0000FF; width:48%; }
.InSame{ color:#0000FF; }
.InDiff { color:#C80000; font-weight:bold; }
.LineNum { background-color: #EEEEEE; width:2%; }
.Stats { background-color: #EEEEEE; color:black; }
.StatsA { background-color: #EEEEEE; color:black; }
a { font-family: Arial, Helvetica; font-size: xx-small;background-color: #EEEEEE; color:blue;}
-->
</STYLE>
</HEAD>
<BODY>
<table><tr><td align=right>Tuesday, May 17, 2011 10:40:08</td></tr></table>
<table>
<thead><tr><td width=50%>[NEW] alice/tuprolog/Term.java</td><td width=50%>[OLD] alice/tuprolog/Term.java</td></tr></thead></table>

<table cellspacing=1 cellpadding=0>
<tr><td class="LineNum">1</td><td class="Same">/*</td>
<td class="LineNum">1</td><td class="Same">/*</td></tr>
<tr><td class="LineNum">2</td><td class="Same">&nbsp;* tuProlog - Copyright (C) 2001-2007  aliCE team at deis.unibo.it</td>
<td class="LineNum">2</td><td class="Same">&nbsp;* tuProlog - Copyright (C) 2001-2007  aliCE team at deis.unibo.it</td></tr>
<tr><td class="LineNum">3</td><td class="Same">&nbsp;*</td>
<td class="LineNum">3</td><td class="Same">&nbsp;*</td></tr>
<tr><td class="LineNum">4</td><td class="Same">&nbsp;* This library is free software; you can redistribute it and/or</td>
<td class="LineNum">4</td><td class="Same">&nbsp;* This library is free software; you can redistribute it and/or</td></tr>
<tr><td class="LineNum">5</td><td class="Same">&nbsp;* modify it under the terms of the GNU Lesser General Public</td>
<td class="LineNum">5</td><td class="Same">&nbsp;* modify it under the terms of the GNU Lesser General Public</td></tr>
<tr><td class="LineNum">6</td><td class="Same">&nbsp;* License as published by the Free Software Foundation; either</td>
<td class="LineNum">6</td><td class="Same">&nbsp;* License as published by the Free Software Foundation; either</td></tr>
<tr><td class="LineNum">7</td><td class="Same">&nbsp;* version 2.1 of the License, or (at your option) any later version.</td>
<td class="LineNum">7</td><td class="Same">&nbsp;* version 2.1 of the License, or (at your option) any later version.</td></tr>
<tr><td class="LineNum">8</td><td class="Same">&nbsp;*</td>
<td class="LineNum">8</td><td class="Same">&nbsp;*</td></tr>
<tr><td class="LineNum">9</td><td class="Same">&nbsp;* This library is distributed in the hope that it will be useful,</td>
<td class="LineNum">9</td><td class="Same">&nbsp;* This library is distributed in the hope that it will be useful,</td></tr>
<tr><td class="LineNum">10</td><td class="Same">&nbsp;* but WITHOUT ANY WARRANTY; without even the implied warranty of</td>
<td class="LineNum">10</td><td class="Same">&nbsp;* but WITHOUT ANY WARRANTY; without even the implied warranty of</td></tr>
<tr><td class="LineNum">11</td><td class="Same">&nbsp;* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</td>
<td class="LineNum">11</td><td class="Same">&nbsp;* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU</td></tr>
<tr><td class="LineNum">12</td><td class="Same">&nbsp;* Lesser General Public License for more details.</td>
<td class="LineNum">12</td><td class="Same">&nbsp;* Lesser General Public License for more details.</td></tr>
<tr><td class="LineNum">13</td><td class="Same">&nbsp;*</td>
<td class="LineNum">13</td><td class="Same">&nbsp;*</td></tr>
<tr><td class="LineNum">14</td><td class="Same">&nbsp;* You should have received a copy of the GNU Lesser General Public</td>
<td class="LineNum">14</td><td class="Same">&nbsp;* You should have received a copy of the GNU Lesser General Public</td></tr>
<tr><td class="LineNum">15</td><td class="Same">&nbsp;* License along with this library; if not, write to the Free Software</td>
<td class="LineNum">15</td><td class="Same">&nbsp;* License along with this library; if not, write to the Free Software</td></tr>
<tr><td class="LineNum">16</td><td class="Same">&nbsp;* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</td>
<td class="LineNum">16</td><td class="Same">&nbsp;* Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA</td></tr>
<tr><td class="LineNum">17</td><td class="Same">&nbsp;*/</td>
<td class="LineNum">17</td><td class="Same">&nbsp;*/</td></tr>
<tr><td class="LineNum">18</td><td class="Same">package alice.tuprolog;</td>
<td class="LineNum">18</td><td class="Same">package alice.tuprolog;</td></tr>
<tr><td class="LineNum">19</td><td class="Same">&nbsp;</td>
<td class="LineNum">19</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">20</td><td class="SrcOnly">import java.io.Serializable;</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">21</td><td class="Same">import java.util.AbstractMap;</td>
<td class="LineNum">20</td><td class="Same">import java.util.AbstractMap;</td></tr>
<tr><td class="LineNum">22</td><td class="Same">import java.util.LinkedList;</td>
<td class="LineNum">21</td><td class="Same">import java.util.LinkedList;</td></tr>
<tr><td class="LineNum">23</td><td class="Same">import java.util.Collection;</td>
<td class="LineNum">22</td><td class="Same">import java.util.Collection;</td></tr>
<tr><td class="LineNum">24</td><td class="Same">import java.util.IdentityHashMap;</td>
<td class="LineNum">23</td><td class="Same">import java.util.IdentityHashMap;</td></tr>
<tr><td class="LineNum">25</td><td class="Same">import java.util.Iterator;</td>
<td class="LineNum">24</td><td class="Same">import java.util.Iterator;</td></tr>
<tr><td class="LineNum">26</td><td class="Same">import java.util.List;</td>
<td class="LineNum">25</td><td class="Same">import java.util.List;</td></tr>
<tr><td class="LineNum"></td><td class="Virtual">&nbsp;</td><td class="LineNum">26</td><td class="DstOnly">&nbsp;</td></tr>
<tr><td class="LineNum">27</td><td class="Same">import alice.util.OneWayList;</td>
<td class="LineNum">27</td><td class="Same">import alice.util.OneWayList;</td></tr>
<tr><td class="LineNum">28</td><td class="Same">&nbsp;</td>
<td class="LineNum">28</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">29</td><td class="Same">/**</td>
<td class="LineNum">29</td><td class="Same">/**</td></tr>
<tr><td class="LineNum">30</td><td class="Same">&nbsp;* Term class is the root abstract class for prolog data type</td>
<td class="LineNum">30</td><td class="Same">&nbsp;* Term class is the root abstract class for prolog data type</td></tr>
<tr><td class="LineNum">31</td><td class="Same">&nbsp;*</td>
<td class="LineNum">31</td><td class="Same">&nbsp;*</td></tr>
<tr><td class="LineNum">32</td><td class="Same">&nbsp;* @see Struct</td>
<td class="LineNum">32</td><td class="Same">&nbsp;* @see Struct</td></tr>
<tr><td class="LineNum">33</td><td class="Same">&nbsp;* @see Var</td>
<td class="LineNum">33</td><td class="Same">&nbsp;* @see Var</td></tr>
<tr><td class="LineNum">34</td><td class="Same">&nbsp;* @see Number</td>
<td class="LineNum">34</td><td class="Same">&nbsp;* @see Number</td></tr>
<tr><td class="LineNum">35</td><td class="Same">&nbsp;*/</td>
<td class="LineNum">35</td><td class="Same">&nbsp;*/</td></tr>
<tr><td class="LineNum">36</td><td class="Changed"><span class="InSame">public abstract class Term implements Serializable {</span></td><td class="LineNum">36</td><td class="Changed"><span class="InSame">public abstract class Term implements </span><span class="InDiff">java.io.</span><span class="InSame">Serializable {</span></td></tr>
<tr><td class="LineNum">37</td><td class="Same">&nbsp;</td>
<td class="LineNum">37</td><td class="Same">&nbsp;</td></tr>
<tr><td class="LineNum">38</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;// true and false constants</td>
<td class="LineNum">38</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;// true and false constants</td></tr>
<tr><td class="LineNum">39</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public static final Term TRUE  = new Struct("true");</td>
<td class="LineNum">39</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public static final Term TRUE  = new Struct("true");</td></tr>
<tr><td class="LineNum">40</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public static final Term FALSE = new Struct("false");   </td>
<td class="LineNum">40</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public static final Term FALSE = new Struct("false");   </td></tr>
<tr><td class="LineNum">41</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">41</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">42</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;// checking type and properties of the Term</td>
<td class="LineNum">42</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;// checking type and properties of the Term</td></tr>
<tr><td class="LineNum">43</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">43</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">44</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td>
<td class="LineNum">44</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td></tr>
<tr><td class="LineNum">45</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* is this term a prolog numeric term?</td>
<td class="LineNum">45</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* is this term a prolog numeric term?</td></tr>
<tr><td class="LineNum">46</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @deprecated Use &lt;tt&gt;instanceof Number&lt;/tt&gt; instead.</td>
<td class="LineNum">46</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @deprecated Use &lt;tt&gt;instanceof Number&lt;/tt&gt; instead.</td></tr>
<tr><td class="LineNum">47</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td>
<td class="LineNum">47</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td></tr>
<tr><td class="LineNum">48</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public abstract boolean isNumber();</td>
<td class="LineNum">48</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public abstract boolean isNumber();</td></tr>
<tr><td class="LineNum">49</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">49</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">50</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td>
<td class="LineNum">50</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td></tr>
<tr><td class="LineNum">51</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* is this term a struct?</td>
<td class="LineNum">51</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* is this term a struct?</td></tr>
<tr><td class="LineNum">52</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @deprecated Use &lt;tt&gt;instanceof Struct&lt;/tt&gt; instead. </td>
<td class="LineNum">52</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @deprecated Use &lt;tt&gt;instanceof Struct&lt;/tt&gt; instead. </td></tr>
<tr><td class="LineNum">53</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td>
<td class="LineNum">53</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td></tr>
<tr><td class="LineNum">54</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public abstract boolean isStruct();</td>
<td class="LineNum">54</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public abstract boolean isStruct();</td></tr>
<tr><td class="LineNum">55</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">55</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">56</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td>
<td class="LineNum">56</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td></tr>
<tr><td class="LineNum">57</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* is this term a variable?</td>
<td class="LineNum">57</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* is this term a variable?</td></tr>
<tr><td class="LineNum">58</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @deprecated Use &lt;tt&gt;instanceof Var&lt;/tt&gt; instead. </td>
<td class="LineNum">58</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @deprecated Use &lt;tt&gt;instanceof Var&lt;/tt&gt; instead. </td></tr>
<tr><td class="LineNum">59</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td>
<td class="LineNum">59</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td></tr>
<tr><td class="LineNum">60</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public abstract boolean isVar();</td>
<td class="LineNum">60</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public abstract boolean isVar();</td></tr>
<tr><td class="LineNum">61</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">61</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">62</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/** is this term a null term?*/</td>
<td class="LineNum">62</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/** is this term a null term?*/</td></tr>
<tr><td class="LineNum">63</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public abstract boolean isEmptyList();</td>
<td class="LineNum">63</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public abstract boolean isEmptyList();</td></tr>
<tr><td class="LineNum">64</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">64</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum"></td><td class="Virtual">&nbsp;</td><td class="LineNum">65</td><td class="DstOnly">&nbsp;&nbsp;&nbsp;&nbsp;//</td></tr>
<tr><td class="LineNum"></td><td class="Virtual">&nbsp;</td><td class="LineNum">66</td><td class="DstOnly">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">65</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/** is this term a constant prolog term? */</td>
<td class="LineNum">67</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/** is this term a constant prolog term? */</td></tr>
<tr><td class="LineNum">66</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public abstract boolean isAtomic();</td>
<td class="LineNum">68</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public abstract boolean isAtomic();</td></tr>
<tr><td class="LineNum">67</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">69</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">68</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/** is this term a prolog compound term? */</td>
<td class="LineNum">70</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/** is this term a prolog compound term? */</td></tr>
<tr><td class="LineNum">69</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public abstract boolean isCompound();</td>
<td class="LineNum">71</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public abstract boolean isCompound();</td></tr>
<tr><td class="LineNum">70</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">72</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">71</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/** is this term a prolog (alphanumeric) atom? */</td>
<td class="LineNum">73</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/** is this term a prolog (alphanumeric) atom? */</td></tr>
<tr><td class="LineNum">72</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public abstract boolean isAtom();</td>
<td class="LineNum">74</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public abstract boolean isAtom();</td></tr>
<tr><td class="LineNum">73</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">75</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">74</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/** is this term a prolog list? */</td>
<td class="LineNum">76</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/** is this term a prolog list? */</td></tr>
<tr><td class="LineNum">75</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public abstract boolean isList();</td>
<td class="LineNum">77</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public abstract boolean isList();</td></tr>
<tr><td class="LineNum">76</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">78</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">77</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/** is this term a ground term? */</td>
<td class="LineNum">79</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/** is this term a ground term? */</td></tr>
<tr><td class="LineNum">78</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public abstract boolean isGround();</td>
<td class="LineNum">80</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public abstract boolean isGround();</td></tr>
<tr><td class="LineNum">79</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">81</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">80</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td>
<td class="LineNum">82</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td></tr>
<tr><td class="LineNum">81</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Tests for the equality of two object terms</td>
<td class="LineNum">83</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Tests for the equality of two object terms</td></tr>
<tr><td class="LineNum">82</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*</td>
<td class="LineNum">84</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*</td></tr>
<tr><td class="LineNum">83</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* The comparison follows the same semantic of</td>
<td class="LineNum">85</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* The comparison follows the same semantic of</td></tr>
<tr><td class="LineNum">84</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* the isEqual method.</td>
<td class="LineNum">86</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* the isEqual method.</td></tr>
<tr><td class="LineNum">85</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*</td>
<td class="LineNum">87</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*</td></tr>
<tr><td class="LineNum">86</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td>
<td class="LineNum">88</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td></tr>
<tr><td class="LineNum">87</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public boolean equals(Object t) {</td>
<td class="LineNum">89</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public boolean equals(Object t) {</td></tr>
<tr><td class="LineNum">88</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!(t instanceof Term))</td>
<td class="LineNum">90</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!(t instanceof Term))</td></tr>
<tr><td class="LineNum">89</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;</td>
<td class="LineNum">91</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;</td></tr>
<tr><td class="LineNum">90</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return isEqual((Term) t);</td>
<td class="LineNum">92</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return isEqual((Term) t);</td></tr>
<tr><td class="LineNum">91</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">93</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">92</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">94</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">93</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">95</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">94</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td>
<td class="LineNum">96</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td></tr>
<tr><td class="LineNum">95</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* is term greater than term t?</td>
<td class="LineNum">97</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* is term greater than term t?</td></tr>
<tr><td class="LineNum">96</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td>
<td class="LineNum">98</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td></tr>
<tr><td class="LineNum">97</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public abstract boolean isGreater(Term t);</td>
<td class="LineNum">99</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public abstract boolean isGreater(Term t);</td></tr>
<tr><td class="LineNum">98</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">100</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">99</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td>
<td class="LineNum">101</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td></tr>
<tr><td class="LineNum">100</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Tests if this term is (logically) equal to another</td>
<td class="LineNum">102</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Tests if this term is (logically) equal to another</td></tr>
<tr><td class="LineNum">101</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td>
<td class="LineNum">103</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td></tr>
<tr><td class="LineNum">102</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public abstract boolean isEqual(Term t);</td>
<td class="LineNum">104</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public abstract boolean isEqual(Term t);</td></tr>
<tr><td class="LineNum">103</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">105</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">104</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td>
<td class="LineNum">106</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td></tr>
<tr><td class="LineNum">105</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Gets the actual term referred by this Term.</td>
<td class="LineNum">107</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Gets the actual term referred by this Term.</td></tr>
<tr><td class="LineNum">106</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*</td>
<td class="LineNum">108</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*</td></tr>
<tr><td class="LineNum">107</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* if the Term is a bound variable, the method gets</td>
<td class="LineNum">109</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* if the Term is a bound variable, the method gets</td></tr>
<tr><td class="LineNum">108</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* the Term linked to the variable</td>
<td class="LineNum">110</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* the Term linked to the variable</td></tr>
<tr><td class="LineNum">109</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td>
<td class="LineNum">111</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td></tr>
<tr><td class="LineNum">110</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public abstract Term getTerm();</td>
<td class="LineNum">112</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public abstract Term getTerm();</td></tr>
<tr><td class="LineNum">111</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">113</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">112</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">114</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">113</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td>
<td class="LineNum">115</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td></tr>
<tr><td class="LineNum">114</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Unlink variables inside the term</td>
<td class="LineNum">116</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Unlink variables inside the term</td></tr>
<tr><td class="LineNum">115</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td>
<td class="LineNum">117</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td></tr>
<tr><td class="LineNum">116</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public abstract void free();</td>
<td class="LineNum">118</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public abstract void free();</td></tr>
<tr><td class="LineNum">117</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">119</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">118</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">120</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">119</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td>
<td class="LineNum">121</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td></tr>
<tr><td class="LineNum">120</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Resolves variables inside the term, starting from a specific time count.</td>
<td class="LineNum">122</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Resolves variables inside the term, starting from a specific time count.</td></tr>
<tr><td class="LineNum">121</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*</td>
<td class="LineNum">123</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*</td></tr>
<tr><td class="LineNum">122</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* If the variables has been already resolved, no renaming is done.</td>
<td class="LineNum">124</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* If the variables has been already resolved, no renaming is done.</td></tr>
<tr><td class="LineNum">123</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @param count new starting time count for resolving process</td>
<td class="LineNum">125</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @param count new starting time count for resolving process</td></tr>
<tr><td class="LineNum">124</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @return the new time count, after resolving process</td>
<td class="LineNum">126</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @return the new time count, after resolving process</td></tr>
<tr><td class="LineNum">125</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td>
<td class="LineNum">127</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td></tr>
<tr><td class="LineNum">126</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;abstract long resolveTerm(long count);</td>
<td class="LineNum">128</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;abstract long resolveTerm(long count);</td></tr>
<tr><td class="LineNum">127</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">129</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">128</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">130</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">129</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td>
<td class="LineNum">131</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td></tr>
<tr><td class="LineNum">130</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Resolves variables inside the term</td>
<td class="LineNum">132</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Resolves variables inside the term</td></tr>
<tr><td class="LineNum">131</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* </td>
<td class="LineNum">133</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* </td></tr>
<tr><td class="LineNum">132</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* If the variables has been already resolved, no renaming is done.</td>
<td class="LineNum">134</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* If the variables has been already resolved, no renaming is done.</td></tr>
<tr><td class="LineNum">133</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td>
<td class="LineNum">135</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td></tr>
<tr><td class="LineNum">134</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public void resolveTerm() {</td>
<td class="LineNum">136</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public void resolveTerm() {</td></tr>
<tr><td class="LineNum">135</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resolveTerm(System.currentTimeMillis());</td>
<td class="LineNum">137</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resolveTerm(System.currentTimeMillis());</td></tr>
<tr><td class="LineNum">136</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">138</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">137</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">139</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">138</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">140</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">139</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td>
<td class="LineNum">141</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td></tr>
<tr><td class="LineNum">140</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* gets a engine's copy of this term.</td>
<td class="LineNum">142</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* gets a engine's copy of this term.</td></tr>
<tr><td class="LineNum">141</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @param idExecCtx Execution Context identified</td>
<td class="LineNum">143</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @param idExecCtx Execution Context identified</td></tr>
<tr><td class="LineNum">142</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td>
<td class="LineNum">144</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td></tr>
<tr><td class="LineNum">143</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public Term copyGoal(AbstractMap vars, int idExecCtx) {</td>
<td class="LineNum">145</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public Term copyGoal(AbstractMap vars, int idExecCtx) {</td></tr>
<tr><td class="LineNum">144</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return copy(vars,idExecCtx);</td>
<td class="LineNum">146</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return copy(vars,idExecCtx);</td></tr>
<tr><td class="LineNum">145</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">147</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">146</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">148</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">147</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">149</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">148</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td>
<td class="LineNum">150</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td></tr>
<tr><td class="LineNum">149</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* gets a copy of this term for the output</td>
<td class="LineNum">151</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* gets a copy of this term for the output</td></tr>
<tr><td class="LineNum">150</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td>
<td class="LineNum">152</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td></tr>
<tr><td class="LineNum">151</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public Term copyResult(Collection goalVars, List resultVars) {</td>
<td class="LineNum">153</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public Term copyResult(Collection goalVars, List resultVars) {</td></tr>
<tr><td class="LineNum">152</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IdentityHashMap originals = new IdentityHashMap();</td>
<td class="LineNum">154</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;IdentityHashMap originals = new IdentityHashMap();</td></tr>
<tr><td class="LineNum">153</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (Iterator i = goalVars.iterator(); i.hasNext();) {</td>
<td class="LineNum">155</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;for (Iterator i = goalVars.iterator(); i.hasNext();) {</td></tr>
<tr><td class="LineNum">154</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Var key = (Var) i.next();</td>
<td class="LineNum">156</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Var key = (Var) i.next();</td></tr>
<tr><td class="LineNum">155</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Var clone = new Var();</td>
<td class="LineNum">157</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Var clone = new Var();</td></tr>
<tr><td class="LineNum">156</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!key.isAnonymous())</td>
<td class="LineNum">158</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (!key.isAnonymous())</td></tr>
<tr><td class="LineNum">157</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clone = new Var(key.getOriginalName());</td>
<td class="LineNum">159</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;clone = new Var(key.getOriginalName());</td></tr>
<tr><td class="LineNum">158</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;originals.put(key,clone);</td>
<td class="LineNum">160</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;originals.put(key,clone);</td></tr>
<tr><td class="LineNum">159</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resultVars.add(clone);</td>
<td class="LineNum">161</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resultVars.add(clone);</td></tr>
<tr><td class="LineNum">160</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">162</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">161</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return copy(originals,new IdentityHashMap());</td>
<td class="LineNum">163</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return copy(originals,new IdentityHashMap());</td></tr>
<tr><td class="LineNum">162</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">164</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">163</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">165</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">164</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">166</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">165</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td>
<td class="LineNum">167</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td></tr>
<tr><td class="LineNum">166</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* gets a copy (with renamed variables) of the term.</td>
<td class="LineNum">168</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* gets a copy (with renamed variables) of the term.</td></tr>
<tr><td class="LineNum">167</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*</td>
<td class="LineNum">169</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*</td></tr>
<tr><td class="LineNum">168</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* The list argument passed contains the list of variables to be renamed</td>
<td class="LineNum">170</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* The list argument passed contains the list of variables to be renamed</td></tr>
<tr><td class="LineNum">169</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* (if empty list then no renaming)</td>
<td class="LineNum">171</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* (if empty list then no renaming)</td></tr>
<tr><td class="LineNum">170</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @param idExecCtx Execution Context identifier</td>
<td class="LineNum">172</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @param idExecCtx Execution Context identifier</td></tr>
<tr><td class="LineNum">171</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td>
<td class="LineNum">173</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td></tr>
<tr><td class="LineNum">172</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;abstract Term copy(AbstractMap vMap, int idExecCtx);</td>
<td class="LineNum">174</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;abstract Term copy(AbstractMap vMap, int idExecCtx);</td></tr>
<tr><td class="LineNum">173</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">175</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">174</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td>
<td class="LineNum">176</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td></tr>
<tr><td class="LineNum">175</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* gets a copy for result.</td>
<td class="LineNum">177</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* gets a copy for result.</td></tr>
<tr><td class="LineNum">176</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td>
<td class="LineNum">178</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td></tr>
<tr><td class="LineNum">177</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;abstract Term copy(AbstractMap vMap, AbstractMap substMap);</td>
<td class="LineNum">179</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;abstract Term copy(AbstractMap vMap, AbstractMap substMap);</td></tr>
<tr><td class="LineNum">178</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">180</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">179</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td>
<td class="LineNum">181</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td></tr>
<tr><td class="LineNum">180</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Try to unify two terms</td>
<td class="LineNum">182</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Try to unify two terms</td></tr>
<tr><td class="LineNum">181</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @param mediator have the reference of EngineManager</td>
<td class="LineNum">183</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @param mediator have the reference of EngineManager</td></tr>
<tr><td class="LineNum">182</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @param t1 the term to unify</td>
<td class="LineNum">184</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @param t1 the term to unify</td></tr>
<tr><td class="LineNum">183</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @return true if the term is unifiable with this one</td>
<td class="LineNum">185</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @return true if the term is unifiable with this one</td></tr>
<tr><td class="LineNum">184</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td>
<td class="LineNum">186</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td></tr>
<tr><td class="LineNum">185</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public boolean unify(Prolog mediator, Term t1) {</td>
<td class="LineNum">187</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public boolean unify(Prolog mediator, Term t1) {</td></tr>
<tr><td class="LineNum">186</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;EngineManager engine = mediator.getEngineManager();</td>
<td class="LineNum">188</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;EngineManager engine = mediator.getEngineManager();</td></tr>
<tr><td class="LineNum">187</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resolveTerm();</td>
<td class="LineNum">189</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resolveTerm();</td></tr>
<tr><td class="LineNum">188</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t1.resolveTerm();</td>
<td class="LineNum">190</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t1.resolveTerm();</td></tr>
<tr><td class="LineNum">189</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;List v1 = new LinkedList(); /* Reviewed by: Paolo Contessi (was: ArrayList()) */</td>
<td class="LineNum">191</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;List v1 = new LinkedList(); /* Reviewed by: Paolo Contessi (was: ArrayList()) */</td></tr>
<tr><td class="LineNum">190</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;List v2 = new LinkedList(); /* Reviewed by: Paolo Contessi (was: ArrayList()) */</td>
<td class="LineNum">192</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;List v2 = new LinkedList(); /* Reviewed by: Paolo Contessi (was: ArrayList()) */</td></tr>
<tr><td class="LineNum">191</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boolean ok = unify(v1,v2,t1);</td>
<td class="LineNum">193</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boolean ok = unify(v1,v2,t1);</td></tr>
<tr><td class="LineNum">192</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (ok) {</td>
<td class="LineNum">194</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (ok) {</td></tr>
<tr><td class="LineNum">193</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ExecutionContext ec = engine.getCurrentContext();</td>
<td class="LineNum">195</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ExecutionContext ec = engine.getCurrentContext();</td></tr>
<tr><td class="LineNum">194</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (ec != null) {</td>
<td class="LineNum">196</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if (ec != null) {</td></tr>
<tr><td class="LineNum">195</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int id = (engine.env==null)? Var.PROGRESSIVE : engine.env.nDemoSteps;</td>
<td class="LineNum">197</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int id = (engine.env==null)? Var.PROGRESSIVE : engine.env.nDemoSteps;</td></tr>
<tr><td class="LineNum">196</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Update trailingVars</td>
<td class="LineNum">198</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Update trailingVars</td></tr>
<tr><td class="LineNum">197</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ec.trailingVars = new OneWayList(v1,ec.trailingVars);</td>
<td class="LineNum">199</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ec.trailingVars = new OneWayList(v1,ec.trailingVars);</td></tr>
<tr><td class="LineNum">198</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Renaming after unify because its utility regards not the engine but the user</td>
<td class="LineNum">200</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;// Renaming after unify because its utility regards not the engine but the user</td></tr>
<tr><td class="LineNum">199</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int count = 0;</td>
<td class="LineNum">201</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int count = 0;</td></tr>
<tr><td class="LineNum">200</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Iterator it = v1.iterator();</td>
<td class="LineNum">202</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Iterator it = v1.iterator();</td></tr>
<tr><td class="LineNum">201</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (it.hasNext()) {</td>
<td class="LineNum">203</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (it.hasNext()) {</td></tr>
<tr><td class="LineNum">202</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((Var)it.next()).rename(id,count);</td>
<td class="LineNum">204</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((Var)it.next()).rename(id,count);</td></tr>
<tr><td class="LineNum">203</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">205</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">204</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;it = v2.iterator();</td>
<td class="LineNum">206</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;it = v2.iterator();</td></tr>
<tr><td class="LineNum">205</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (it.hasNext()) {</td>
<td class="LineNum">207</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;while (it.hasNext()) {</td></tr>
<tr><td class="LineNum">206</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((Var)it.next()).rename(id,count);</td>
<td class="LineNum">208</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;((Var)it.next()).rename(id,count);</td></tr>
<tr><td class="LineNum">207</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">209</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">208</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">210</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">209</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;</td>
<td class="LineNum">211</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return true;</td></tr>
<tr><td class="LineNum">210</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">212</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">211</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Var.free(v1);</td>
<td class="LineNum">213</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Var.free(v1);</td></tr>
<tr><td class="LineNum">212</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Var.free(v2);</td>
<td class="LineNum">214</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Var.free(v2);</td></tr>
<tr><td class="LineNum">213</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;</td>
<td class="LineNum">215</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return false;</td></tr>
<tr><td class="LineNum">214</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">216</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">215</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">217</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">216</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">218</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">217</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td>
<td class="LineNum">219</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td></tr>
<tr><td class="LineNum">218</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Tests if this term is unifiable with an other term.</td>
<td class="LineNum">220</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Tests if this term is unifiable with an other term.</td></tr>
<tr><td class="LineNum">219</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* No unification is done.</td>
<td class="LineNum">221</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* No unification is done.</td></tr>
<tr><td class="LineNum">220</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*</td>
<td class="LineNum">222</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*</td></tr>
<tr><td class="LineNum">221</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* The test is done outside any demonstration context</td>
<td class="LineNum">223</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* The test is done outside any demonstration context</td></tr>
<tr><td class="LineNum">222</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @param t the term to checked</td>
<td class="LineNum">224</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @param t the term to checked</td></tr>
<tr><td class="LineNum">223</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*</td>
<td class="LineNum">225</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*</td></tr>
<tr><td class="LineNum">224</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @return true if the term is unifiable with this one</td>
<td class="LineNum">226</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @return true if the term is unifiable with this one</td></tr>
<tr><td class="LineNum">225</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td>
<td class="LineNum">227</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td></tr>
<tr><td class="LineNum">226</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public boolean match(Term t) {</td>
<td class="LineNum">228</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public boolean match(Term t) {</td></tr>
<tr><td class="LineNum">227</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resolveTerm();</td>
<td class="LineNum">229</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;resolveTerm();</td></tr>
<tr><td class="LineNum">228</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.resolveTerm();</td>
<td class="LineNum">230</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;t.resolveTerm();</td></tr>
<tr><td class="LineNum">229</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;List v1 = new LinkedList(); /* Reviewed by: Paolo Contessi (was: ArrayList()) */</td>
<td class="LineNum">231</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;List v1 = new LinkedList(); /* Reviewed by: Paolo Contessi (was: ArrayList()) */</td></tr>
<tr><td class="LineNum">230</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;List v2 = new LinkedList(); /* Reviewed by: Paolo Contessi (was: ArrayList()) */</td>
<td class="LineNum">232</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;List v2 = new LinkedList(); /* Reviewed by: Paolo Contessi (was: ArrayList()) */</td></tr>
<tr><td class="LineNum">231</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boolean ok = unify(v1,v2,t);</td>
<td class="LineNum">233</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;boolean ok = unify(v1,v2,t);</td></tr>
<tr><td class="LineNum">232</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Var.free(v1);</td>
<td class="LineNum">234</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Var.free(v1);</td></tr>
<tr><td class="LineNum">233</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Var.free(v2);</td>
<td class="LineNum">235</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Var.free(v2);</td></tr>
<tr><td class="LineNum">234</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ok;</td>
<td class="LineNum">236</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return ok;</td></tr>
<tr><td class="LineNum">235</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">237</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">236</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">238</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">237</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">239</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">238</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td>
<td class="LineNum">240</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td></tr>
<tr><td class="LineNum">239</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Tries to unify two terms, given a demonstration context</td>
<td class="LineNum">241</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Tries to unify two terms, given a demonstration context</td></tr>
<tr><td class="LineNum">240</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* identified by the mark integer.</td>
<td class="LineNum">242</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* identified by the mark integer.</td></tr>
<tr><td class="LineNum">241</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*</td>
<td class="LineNum">243</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*</td></tr>
<tr><td class="LineNum">242</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Try the unification among the term and the term specified</td>
<td class="LineNum">244</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Try the unification among the term and the term specified</td></tr>
<tr><td class="LineNum">243</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @param varsUnifiedArg1 Vars unified in myself</td>
<td class="LineNum">245</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @param varsUnifiedArg1 Vars unified in myself</td></tr>
<tr><td class="LineNum">244</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @param varsUnifiedArg2 Vars unified in term t</td>
<td class="LineNum">246</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @param varsUnifiedArg2 Vars unified in term t</td></tr>
<tr><td class="LineNum">245</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td>
<td class="LineNum">247</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td></tr>
<tr><td class="LineNum">246</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;abstract boolean unify(List varsUnifiedArg1, List varsUnifiedArg2, Term t);</td>
<td class="LineNum">248</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;abstract boolean unify(List varsUnifiedArg1, List varsUnifiedArg2, Term t);</td></tr>
<tr><td class="LineNum">247</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">249</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">248</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">250</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">249</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td>
<td class="LineNum">251</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td></tr>
<tr><td class="LineNum">250</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Static service to create a Term from a string.</td>
<td class="LineNum">252</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Static service to create a Term from a string.</td></tr>
<tr><td class="LineNum">251</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @param st the string representation of the term</td>
<td class="LineNum">253</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @param st the string representation of the term</td></tr>
<tr><td class="LineNum">252</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @return the term represented by the string</td>
<td class="LineNum">254</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @return the term represented by the string</td></tr>
<tr><td class="LineNum">253</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @throws InvalidTermException if the string does not represent a valid term</td>
<td class="LineNum">255</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @throws InvalidTermException if the string does not represent a valid term</td></tr>
<tr><td class="LineNum">254</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td>
<td class="LineNum">256</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td></tr>
<tr><td class="LineNum">255</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public static Term createTerm(String st) {</td>
<td class="LineNum">257</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public static Term createTerm(String st) {</td></tr>
<tr><td class="LineNum">256</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return Parser.parseSingleTerm(st);</td>
<td class="LineNum">258</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return Parser.parseSingleTerm(st);</td></tr>
<tr><td class="LineNum">257</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">259</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">258</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">260</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">259</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td>
<td class="LineNum">261</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td></tr>
<tr><td class="LineNum">260</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @deprecated Use {@link Term#createTerm(String)} instead.</td>
<td class="LineNum">262</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @deprecated Use {@link Term#createTerm(String)} instead.</td></tr>
<tr><td class="LineNum">261</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td>
<td class="LineNum">263</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td></tr>
<tr><td class="LineNum">262</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public static Term parse(String st) {</td>
<td class="LineNum">264</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public static Term parse(String st) {</td></tr>
<tr><td class="LineNum">263</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return Term.createTerm(st);</td>
<td class="LineNum">265</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return Term.createTerm(st);</td></tr>
<tr><td class="LineNum">264</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">266</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">265</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">267</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">266</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td>
<td class="LineNum">268</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td></tr>
<tr><td class="LineNum">267</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Static service to create a Term from a string, providing an</td>
<td class="LineNum">269</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Static service to create a Term from a string, providing an</td></tr>
<tr><td class="LineNum">268</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* external operator manager.</td>
<td class="LineNum">270</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* external operator manager.</td></tr>
<tr><td class="LineNum">269</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @param st the string representation of the term</td>
<td class="LineNum">271</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @param st the string representation of the term</td></tr>
<tr><td class="LineNum">270</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @param op the operator manager used to build the term</td>
<td class="LineNum">272</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @param op the operator manager used to build the term</td></tr>
<tr><td class="LineNum">271</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @return the term represented by the string</td>
<td class="LineNum">273</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @return the term represented by the string</td></tr>
<tr><td class="LineNum">272</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @throws InvalidTermException if the string does not represent a valid term</td>
<td class="LineNum">274</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @throws InvalidTermException if the string does not represent a valid term</td></tr>
<tr><td class="LineNum">273</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td>
<td class="LineNum">275</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td></tr>
<tr><td class="LineNum">274</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public static Term createTerm(String st, OperatorManager op) {</td>
<td class="LineNum">276</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public static Term createTerm(String st, OperatorManager op) {</td></tr>
<tr><td class="LineNum">275</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return Parser.parseSingleTerm(st, op);</td>
<td class="LineNum">277</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return Parser.parseSingleTerm(st, op);</td></tr>
<tr><td class="LineNum">276</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">278</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">277</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">279</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">278</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td>
<td class="LineNum">280</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td></tr>
<tr><td class="LineNum">279</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @deprecated Use {@link Term#createTerm(String, OperatorManager)} instead.</td>
<td class="LineNum">281</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @deprecated Use {@link Term#createTerm(String, OperatorManager)} instead.</td></tr>
<tr><td class="LineNum">280</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td>
<td class="LineNum">282</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td></tr>
<tr><td class="LineNum">281</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public static Term parse(String st, OperatorManager op) {</td>
<td class="LineNum">283</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public static Term parse(String st, OperatorManager op) {</td></tr>
<tr><td class="LineNum">282</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return Term.createTerm(st, op);</td>
<td class="LineNum">284</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return Term.createTerm(st, op);</td></tr>
<tr><td class="LineNum">283</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">285</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">284</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">286</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">285</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td>
<td class="LineNum">287</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td></tr>
<tr><td class="LineNum">286</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Gets an iterator providing</td>
<td class="LineNum">288</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Gets an iterator providing</td></tr>
<tr><td class="LineNum">287</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* a term stream from a source text</td>
<td class="LineNum">289</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* a term stream from a source text</td></tr>
<tr><td class="LineNum">288</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td>
<td class="LineNum">290</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td></tr>
<tr><td class="LineNum">289</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public static java.util.Iterator getIterator(String text) {</td>
<td class="LineNum">291</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public static java.util.Iterator getIterator(String text) {</td></tr>
<tr><td class="LineNum">290</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return new Parser(text).iterator();</td>
<td class="LineNum">292</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return new Parser(text).iterator();</td></tr>
<tr><td class="LineNum">291</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">293</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">292</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">294</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">293</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;// term representation</td>
<td class="LineNum">295</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;// term representation</td></tr>
<tr><td class="LineNum">294</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">296</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">295</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td>
<td class="LineNum">297</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td></tr>
<tr><td class="LineNum">296</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Gets the string representation of this term</td>
<td class="LineNum">298</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Gets the string representation of this term</td></tr>
<tr><td class="LineNum">297</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* as an X argument of an operator, considering the associative property.</td>
<td class="LineNum">299</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* as an X argument of an operator, considering the associative property.</td></tr>
<tr><td class="LineNum">298</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td>
<td class="LineNum">300</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td></tr>
<tr><td class="LineNum">299</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;String toStringAsArgX(OperatorManager op,int prio) {</td>
<td class="LineNum">301</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;String toStringAsArgX(OperatorManager op,int prio) {</td></tr>
<tr><td class="LineNum">300</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return toStringAsArg(op,prio,true);</td>
<td class="LineNum">302</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return toStringAsArg(op,prio,true);</td></tr>
<tr><td class="LineNum">301</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">303</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">302</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">304</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">303</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td>
<td class="LineNum">305</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td></tr>
<tr><td class="LineNum">304</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Gets the string representation of this term</td>
<td class="LineNum">306</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Gets the string representation of this term</td></tr>
<tr><td class="LineNum">305</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* as an Y argument of an operator, considering the associative property.</td>
<td class="LineNum">307</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* as an Y argument of an operator, considering the associative property.</td></tr>
<tr><td class="LineNum">306</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td>
<td class="LineNum">308</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td></tr>
<tr><td class="LineNum">307</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;String toStringAsArgY(OperatorManager op,int prio) {</td>
<td class="LineNum">309</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;String toStringAsArgY(OperatorManager op,int prio) {</td></tr>
<tr><td class="LineNum">308</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return toStringAsArg(op,prio,false);</td>
<td class="LineNum">310</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return toStringAsArg(op,prio,false);</td></tr>
<tr><td class="LineNum">309</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">311</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">310</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">312</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">311</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td>
<td class="LineNum">313</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td></tr>
<tr><td class="LineNum">312</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Gets the string representation of this term</td>
<td class="LineNum">314</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Gets the string representation of this term</td></tr>
<tr><td class="LineNum">313</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* as an argument of an operator, considering the associative property.</td>
<td class="LineNum">315</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* as an argument of an operator, considering the associative property.</td></tr>
<tr><td class="LineNum">314</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*</td>
<td class="LineNum">316</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*</td></tr>
<tr><td class="LineNum">315</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*  If the boolean argument is true, then the term must be considered</td>
<td class="LineNum">317</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*  If the boolean argument is true, then the term must be considered</td></tr>
<tr><td class="LineNum">316</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*  as X arg, otherwise as Y arg (referring to prolog associative rules)</td>
<td class="LineNum">318</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*  as X arg, otherwise as Y arg (referring to prolog associative rules)</td></tr>
<tr><td class="LineNum">317</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td>
<td class="LineNum">319</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td></tr>
<tr><td class="LineNum">318</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;String toStringAsArg(OperatorManager op,int prio,boolean x) {</td>
<td class="LineNum">320</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;String toStringAsArg(OperatorManager op,int prio,boolean x) {</td></tr>
<tr><td class="LineNum">319</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return toString();</td>
<td class="LineNum">321</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return toString();</td></tr>
<tr><td class="LineNum">320</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">322</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">321</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td>
<td class="LineNum">323</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum"></td><td class="Virtual">&nbsp;</td><td class="LineNum">324</td><td class="DstOnly">&nbsp;&nbsp;&nbsp;&nbsp;//</td></tr>
<tr><td class="LineNum"></td><td class="Virtual">&nbsp;</td><td class="LineNum">325</td><td class="DstOnly">&nbsp;&nbsp;&nbsp;&nbsp;</td></tr>
<tr><td class="LineNum">322</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td>
<td class="LineNum">326</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;/**</td></tr>
<tr><td class="LineNum">323</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* The iterated-goal term G of a term T is a term defined</td>
<td class="LineNum">327</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* The iterated-goal term G of a term T is a term defined</td></tr>
<tr><td class="LineNum">324</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* recursively as follows:</td>
<td class="LineNum">328</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* recursively as follows:</td></tr>
<tr><td class="LineNum">325</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* &lt;ul&gt;</td>
<td class="LineNum">329</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* &lt;ul&gt;</td></tr>
<tr><td class="LineNum">326</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* &lt;li&gt;if T unifies with ^(_, Goal) then G is the iterated-goal</td>
<td class="LineNum">330</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* &lt;li&gt;if T unifies with ^(_, Goal) then G is the iterated-goal</td></tr>
<tr><td class="LineNum">327</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* term of Goal&lt;/li&gt;</td>
<td class="LineNum">331</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* term of Goal&lt;/li&gt;</td></tr>
<tr><td class="LineNum">328</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* &lt;li&gt;else G is T&lt;/li&gt;</td>
<td class="LineNum">332</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* &lt;li&gt;else G is T&lt;/li&gt;</td></tr>
<tr><td class="LineNum">329</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* &lt;/ul&gt;</td>
<td class="LineNum">333</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* &lt;/ul&gt;</td></tr>
<tr><td class="LineNum">330</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td>
<td class="LineNum">334</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td></tr>
<tr><td class="LineNum">331</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public Term iteratedGoalTerm() {</td>
<td class="LineNum">335</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;public Term iteratedGoalTerm() {</td></tr>
<tr><td class="LineNum">332</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return this;</td>
<td class="LineNum">336</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return this;</td></tr>
<tr><td class="LineNum">333</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td>
<td class="LineNum">337</td><td class="Same">&nbsp;&nbsp;&nbsp;&nbsp;}</td></tr>
<tr><td class="LineNum">334</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">335</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;/**</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">336</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* Visitor pattern</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">337</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;* @param tv - Visitor</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">338</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;*/</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">339</td><td class="SrcOnly">&nbsp;&nbsp;&nbsp;&nbsp;public abstract void accept(TermVisitor tv);</td><td class="LineNum"></td><td class="Virtual">&nbsp;</td></tr>
<tr><td class="LineNum">340</td><td class="Same">}</td>
<td class="LineNum">338</td><td class="Same">}</td></tr>

</table>


</body></html>
